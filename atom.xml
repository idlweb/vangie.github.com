<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Life]]></title>
  <link href="http://vangie.github.com/atom.xml" rel="self"/>
  <link href="http://vangie.github.com/"/>
  <updated>2013-03-03T22:52:51+08:00</updated>
  <id>http://vangie.github.com/</id>
  <author>
    <name><![CDATA[Vangie Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在iTerm2中使用Zmodem传输文件]]></title>
    <link href="http://vangie.github.com/blog/2013/03/02/zmodem-integration-for-iterm2/"/>
    <updated>2013-03-02T14:54:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/03/02/zmodem-integration-for-iterm2</id>
    <content type="html"><![CDATA[<blockquote><p>rz,sz命令传输文件，比使用scp要方便得多，特别是在图形界面打开终端，SSH登陆到远程机器需要传输文件的时候。但是MacOS里Terminal.app并不支持Zmodel传输。好在iTerm2具备较强的扩展性可以通过简单的配置支持Zmodem传输。</p></blockquote>

<h3>什么是Zmodem</h3>

<p>Zmodem是针对modem的一种支持错误校验的文件传输协议。Zmodem是Ymodem的改进版，后者又是Xmodem的改进版。</p>

<!-- more -->


<h4>Xmodem</h4>

<p><a href="http://en.wikipedia.org/wiki/XMODEM">Xmodem</a>是一个简单的文件传输协议，是由Ward Christensen于1977年为他的MODEM.ASM终端程序开发。在早期的BBS系统非常的流行。</p>

<p>像许多文件传输协议一样，Xmodem把文件切分成有序的数据包。并在数据包上加上一些附件的信息允许接受方确定数据包是否在传输中损坏。</p>

<h5>数据包的结构</h5>

<p>包头：宝开始（SOH），包编号和包编号补码</p>

<p>数据：固定的128字节</p>

<p>包尾：校验和</p>

<h5>传输过程</h5>

<p>XModem工作时，先由收方发出NAK，然后等待发方的包开始SOH。收到SOH后，即 将整个包收完，检查是否有错。如出错，则向发方发出一个NAK，请求发方重发； 否则发出ACK,表示接收正确，请发下个包。XModem检查包编号和checksum来确定 该包是否传送有问题。编号是发方送得出包的顺序。当XModem发送完最后一个包 时，收方会收到文件结束符(EOT)，此时，收方会送出一个ACK通知发方传送结束。</p>

<h4>Ymodem</h4>

<p><a href="http://en.wikipedia.org/wiki/YMODEM">Ymodem</a>是Chuck Forsberg开发的Xmodem的改进版，1985年被Xmodem的开发者Ward Christensen称之为“Ymodem”。</p>

<p>相对于Xmodem的主要改进是在发送方发送真实数据块前，先发送一个称之为“block 0”的数据块（真实的数据块是从1开始计数），改数据块包含文件名，大小和时间戳。文件大小解决了Xmodem文件尾部剩余填充的问题。</p>

<h4>Zmodem</h4>

<p><a href="http://en.wikipedia.org/wiki/ZMODEM">Zmodem</a>是Chuck Forsberg于1986年发布的Ymodem的改进版本。关键的改进是引进了<strong>滑动窗口协议</strong>(<a href="http://en.wikipedia.org/wiki/Sliding_window">Sliding window protocol</a>)改进了传输的性能。</p>

<p>在Xmodem或者Ymodem传输时发送方需要等待接收方放的ACK或者NAK响应才继续发送下一个数据包。Zmodem把这个同步的确认过程改成了异步的，发送方可以不断的方式数据包，然后异步的接收ACK或者NAK包，过一段时候后再决定是否需要重新发送数据包。这种方式解决了确认包网络延迟造成对传输速率的影响。</p>

<h3>安装Zmodem的实现</h3>

<pre><code>brew install lrzsz
</code></pre>

<h3>创建脚本</h3>

<p>将下面两个脚本创建到<code>/usr/local/bin</code>目录</p>

<p>item2-send-zmodem.sh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Author: Matt Mastracci (matthew@mastracci.com)</span>
</span><span class='line'><span class="c"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span>
</span><span class='line'><span class="c"># licensed under cc-wiki with attribution required </span>
</span><span class='line'><span class="c"># Remainder of script public domain</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="sb">`</span>osascript -e <span class="s1">&#39;tell application &quot;iTerm&quot; to activate&#39;</span> -e <span class="s1">&#39;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#39;</span> -e <span class="s2">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$FILE</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo </span>Cancelled.
</span><span class='line'>  <span class="c"># Send ZModem cancel</span>
</span><span class='line'>  <span class="nb">echo</span> -e <span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Cancelled transfer
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$FILE</span>
</span><span class='line'>  /usr/local/bin/sz <span class="s2">&quot;$FILE&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Received <span class="nv">$FILE</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>iterm2-recv-zmodem.sh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Author: Matt Mastracci (matthew@mastracci.com)</span>
</span><span class='line'><span class="c"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span>
</span><span class='line'><span class="c"># licensed under cc-wiki with attribution required </span>
</span><span class='line'><span class="c"># Remainder of script public domain</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="sb">`</span>osascript -e <span class="s1">&#39;tell application &quot;iTerm&quot; to activate&#39;</span> -e <span class="s1">&#39;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#39;</span> -e <span class="s2">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$FILE</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo </span>Cancelled.
</span><span class='line'>  <span class="c"># Send ZModem cancel</span>
</span><span class='line'>  <span class="nb">echo</span> -e <span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Cancelled transfer
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$FILE</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="s2">&quot;$FILE&quot;</span>
</span><span class='line'>  /usr/local/bin/rz
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Received <span class="nv">$FILE</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置iTerm2</h3>

<p>修改iTerm2的default trigger（iTerm偏好设置-> Profiles -> Default -> Advanced -> Triggers的Edit按钮</p>

<pre><code>Regular expression: \*\*B0100 
Action: Run Silent Coprocess 
Parameters: /usr/local/bin/iterm2-send-zmodem.sh


Regular expression: \*\*B00000000000000 
Action: Run Silent Coprocess 
Parameters: /usr/local/bin/iterm2-recv-zmodem.sh
</code></pre>

<h3>发送文件到远端服务器</h3>

<ol>
<li>在远端服务器执行<code>rz</code></li>
<li>本地选择文件传输</li>
<li>等待传输指示消失</li>
</ol>


<h3>接收远端服务器的文件</h3>

<ol>
<li>再远端服务器执行<code>sz filename1 filename2 … filenameN</code></li>
<li>本地选择目录保存</li>
<li>等待传输指示消失</li>
</ol>


<h3>参考文献</h3>

<ol>
<li><a href="http://openexz.sinaapp.com/2012/08/29/%E5%9C%A8iterm2%E4%B8%AD%E4%BD%BF%E7%94%A8zmodem%E7%9A%84%E6%96%B9%E6%B3%95/">在iTerm2中使用Zmodem的方法</a></li>
<li><a href="https://github.com/mmastrac/iterm2-zmodem">ZModem integration for iTerm 2</a></li>
<li><a href="http://docstore.mik.ua/orelly/linux/run/apph_01.htm">Appendix H. Zmodem File Transfer</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6安装KuaiDial]]></title>
    <link href="http://vangie.github.com/blog/2013/02/07/install-kuaidial-on-ios6/"/>
    <updated>2013-02-07T17:27:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/02/07/install-kuaidial-on-ios6</id>
    <content type="html"><![CDATA[<blockquote><p>iOS6 越狱程序<a href="http://evasi0n.com/">evasi0n</a>自本周一发布以来，累计被下载了170万次。果断升级了，升级以后发现KuaiDial没有用了。</p></blockquote>

<p>kuaidial原来的升级源http://kuaidail.googlecode.com/svn/deb没有用了，装威锋源里的kuaidial也没有用。改用<strong>第一中文源</strong>http://apt.178.com,然后安装<strong>Kuaidial iOS6 测试版</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipad-play-video-from-macbook-over-upnp]]></title>
    <link href="http://vangie.github.com/blog/2013/02/05/ipad-play-video-from-macbook-over-upnp/"/>
    <updated>2013-02-05T00:58:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/02/05/ipad-play-video-from-macbook-over-upnp</id>
    <content type="html"><![CDATA[<blockquote><p>mac air里下载的电影通过开启upnp服务，然后iPad安装一个支持upnp服务的播放器可以直接播放电影，免去拷贝的过程。</p></blockquote>

<h1>Mac OS端安装Mediatomb</h1>

<p>mediatomb是一个跨平台免费的upnp服务器，以web ui的方式管理，仅仅是一个命令行工具。</p>

<pre><code>brew install mediatomb
</code></pre>

<p>安装完成以后执行命令<code>mediatomb</code>,如果遇到端口被占用的错误，需要重启一下机器。我重启两次就好了。</p>

<h1>iOS端安装aceplayer</h1>

<p><a href="https://itunes.apple.com/us/app/aceplayer-powerful-media-player/id540326056?mt=8">aceplayer</a>是一个近乎全能的播放器，支持upnp，可以直接播放或者下载upnp服务器里的视频文件。但是播放时色彩还原效果相对差一点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Keynote里输入Font Awesome字符]]></title>
    <link href="http://vangie.github.com/blog/2013/01/28/using-font-awesome-in-keynote/"/>
    <updated>2013-01-28T23:23:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/01/28/using-font-awesome-in-keynote</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://fortawesome.github.com/Font-Awesome/">Font Awesome</a>提供了200多个矢量图标的字体文件。矢量字体可以支持无线的放缩，而且体积更好，如果能放到keynote里作为幻灯片的图标素材非常不错。想法是好的，但是由于这些字体对应了一些保留的unicode编码，使用通常的输入法无法输入。</p></blockquote>

<h3>安装Font Awesome字体</h3>

<p>下载 <a href="https://github.com/FortAwesome/Font-Awesome/zipball/master">FontAwesome-Font-Awesome.zip</a>，解压缩后，找到font/FontAwesome.otf文件，双击安装即可。</p>

<h3>找到icon对应的Unicode编码</h3>

<p>找到css/font-awesome.css文件，使用编辑器打开。可以找到许多形如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.icon-key</span><span class="nd">:before</span>                  <span class="p">{</span> <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;\f084&quot;</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>f084</code>就是icon-key图标对应的unicode编码。</p>

<h3>开启Mac OS的unicode16进制输入法</h3>

<p>打开“系统偏好设置\语言与文本\输入源”,在左侧&#8221;请选择要使用的输入源&#8221;列表中勾上”Unicode 十六进制输入“。然后将系统输入法切换为”Unicode输入法“。按住Control健输入4位unicode字符即可输入.若当前字体不存在对应的unicode编码的字形会出现框框，所有输入前需要在keynote里把当前字体改为FontAwesome。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为CentOS虚拟机添加第二块网卡]]></title>
    <link href="http://vangie.github.com/blog/2012/12/11/add-secondary-network-interface-to-vm-of-centos/"/>
    <updated>2012-12-11T18:43:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/11/add-secondary-network-interface-to-vm-of-centos</id>
    <content type="html"><![CDATA[<blockquote><p>使用virt-install安装了一个CentOS虚拟机，安装过程未指定网络参数，默认使用内置虚拟NAT的方式上网，现在希望给虚拟机另外安装一块虚拟的网卡，然后给其分配一个外网IP地址（与宿主机处于同一网段）。</p></blockquote>

<h3>安装CentOS</h3>

<pre><code>$ sudo virt-install --connect qemu:///system --noautoconsole \
-n centos -r 4096 --vcpus=4 --arch=x86_64 --os-type=linux \
--os-variant=rhel6 --accelerate -v -l http://mirrors.163.com/centos/6.3/os/x86_64/ \
--disk path=/var/lib/libvirt/images/centos.img,size=200 \
--graphics vnc,password=foobar,listen=0.0.0.0,port=5901 
</code></pre>

<!-- more -->


<h3>为宿主机添加虚拟网桥</h3>

<pre><code>$ vim /etc/network/interfaces
</code></pre>

<p>修改如下</p>

<pre><code># This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
iface em1 inet manual

auto br0
iface br0 inet static
    bridge_ports    em1
    bridge_stp  on
    bridge_maxwait  0
    bridge_fd   0
    address     192.168.18.130
    netmask     255.255.255.0
    network     192.168.18.0
    broadcast   192.168.18.255
    gateway     192.168.18.1
    dns-nameservers 192.168.18.1
</code></pre>

<p>添加虚拟网桥配置br0,并且把主网卡em1（大多数情况下主网卡为eth0）配置由dhcp或者static改成manual。</p>

<p>然后重启网络服务</p>

<pre><code>$ sudo service networking restart
</code></pre>

<h3>为虚拟机添加一张额外的虚拟网卡</h3>

<p>首先关闭VM</p>

<pre><code>$ virsh destory centos
</code></pre>

<p>然后编辑VM配置文件</p>

<pre><code>$ virsh edit centos
</code></pre>

<p>在</interface>之后加入如下xml片段</p>

<pre><code>&lt;interface type='bridge'&gt;
  &lt;mac address='00:16:3e:1a:b3:4a'/&gt;
  &lt;source bridge='br0'/&gt;
  &lt;model type='virtio'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/&gt;
&lt;/interface&gt;
</code></pre>

<p>然后保存退出。</p>

<p>启动刚才修改过的VM虚拟节点</p>

<pre><code>$ virsh start centos
</code></pre>

<h3>为CentOS添加新网卡配置</h3>

<p>参看<code>/sys/class/net</code>可以看到新添加的网卡eth1</p>

<pre><code># ls /sys/class/net/
eth0  eth1  lo
</code></pre>

<p>通过ifconfig获得该网卡的MAC地址</p>

<pre><code># ifconfig eth1
eth1    Link encap:Ethernet  HWaddr 00:16:3E:1A:B3:4A  
        inet addr:192.168.18.210  Bcast:192.168.18.255  Mask:255.255.255.0
        inet6 addr: fe80::216:3eff:fe1a:b34a/64 Scope:Link
        UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
        RX packets:3343 errors:0 dropped:0 overruns:0 frame:0
        TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
        collisions:0 txqueuelen:1000 
        RX bytes:216373 (211.3 KiB)  TX bytes:1364 (1.3 KiB)
</code></pre>

<p>执行uuidgen生成一个随机的UUID</p>

<pre><code># uuidgen
e5281311-f265-4afa-a7e1-4d76718f7de0
</code></pre>

<p>然后完事具备只欠东方了，</p>

<pre><code># cd /etc/sysconfig/network-scripts
# cp ifcfg-eth0 ifcfg-eth1
# vim ifcfg-eth1
</code></pre>

<p>结合上面的MAC地址和UUID，修改内容如下</p>

<pre><code>DEVICE="eth1"
BOOTPROTO="dhcp"
HWADDR="00:16:3E:1A:B3:4A"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
NM_CONTROLLED="yes"
ONBOOT="yes"
TYPE="Ethernet"
UUID="e5281311-f265-4afa-a7e1-4d76718f7de0"
</code></pre>

<p>然后VM网络服务即可</p>

<pre><code># service network restart
</code></pre>

<h3>参考文献</h3>

<ol>
<li><a href="http://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-networkscripts-interfaces.html">Interface Configuration Files</a></li>
<li><a href="http://libvirt.org/archnetwork.html">Network management architecture</a></li>
<li><a href="http://libvirt.org/formatnetwork.html">Network XML format</a></li>
<li><a href="http://wiki.libvirt.org/page/Networking">libvirt networking</a></li>
<li><a href="http://wiki.debian.org/BridgeNetworkConnections">Bridging Network Connections</a></li>
<li><a href="http://www.linux-kvm.org/page/Networking">KVM setting guest network</a></li>
<li><a href="http://www.selbytech.com/2009/10/adding-virtual-network-interfaces-on-centos-5-x/">Adding Virtual Network Interfaces on CentOS 5.x</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三种不同类型的ssh隧道]]></title>
    <link href="http://vangie.github.com/blog/2012/12/09/three-types-of-ssh-turneling/"/>
    <updated>2012-12-09T13:20:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/09/three-types-of-ssh-turneling</id>
    <content type="html"><![CDATA[<blockquote><p>想通过ssh隧道连接远端机器的VNC服务，对<code>ssh -L</code>命令不太熟悉，<code>man ssh</code>后发现3组与隧道（turnnel）相关的参数:<code>ssh -D</code>，<code>ssh -L</code>，<code>ssh -R</code>，一下子就搞糊涂了，所有下决心仔细研究一番。</p></blockquote>

<h3>何谓SSH隧道</h3>

<p>隧道是一种把一种网络协议封装进另外一种网络协议进行传输的技术。这里我们研究ssh隧道，所以所有的网络通讯都是加密的。又被称作端口转发，因为ssh隧道通常会绑定一个本地端口，所有发向这个端口端口的数据包，都会被加密并透明地传输到远端系统。</p>

<h3>SSH隧道的类型</h3>

<p>ssh隧道有3种类型：</p>

<ol>
<li>动态端口转发（Socks 代理）</li>
<li>本地端口转发</li>
<li>远端端口转发</li>
</ol>


<!-- more -->


<h4>动态端口转发</h4>

<p>动态端口允许通过配置一个本地端口，把通过隧道到数据转发到远端的所有地址。本地的应用程序需要使用Socks协议与本地端口通讯。此时SSH充当Socks代理服务器的角色。</p>

<p><strong>命令格式</strong></p>

<pre><code>ssh -D [bind_address:]port
</code></pre>

<p><strong>参数说明</strong></p>

<ul>
<li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为<code>*</code>会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为<code>localhost</code>。</li>
<li>port 指定本地绑定的端口</li>
</ul>


<p><strong>使用场景</strong></p>

<p>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以连接主机B，但无法连接主机C。</p>

<p>在主机A执行</p>

<pre><code>$ ssh -D localhost:8080 root@192.168.2.100
</code></pre>

<p>然后主机A上的应用程序就可以通过</p>

<pre><code>SOCKS5 localhost:8080
</code></pre>

<p>访问主机C上的服务。</p>

<p><strong>优点</strong></p>

<ul>
<li>配置一个代理服务就可以访问远端机器和与其所在子网络的所有服务</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>应用程序需要额外配置SOCKS代理，若应用程序不支持代理配置则无法使用</li>
</ul>


<h4>本地端口转发</h4>

<p>通过SSH隧道，将一个远端机器能够访问到的地址和端口，映射为一个本地的端口。</p>

<p><strong>命令格式</strong></p>

<pre><code>ssh -L [bind_address:]port:host:hostport
</code></pre>

<p><strong>参数说明</strong></p>

<ul>
<li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为<code>*</code>会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为<code>localhost</code>。</li>
<li>port 指定本地绑定的端口</li>
<li>host 指定数据包转发目标地址的IP，如果目标主机和ssh server是同一台主机时该参数指定为<code>localhost</code></li>
<li>host_port 指定数据包转发目标端口</li>
</ul>


<p><strong>使用场景</strong></p>

<p>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以连接主机B，但无法连接主机C。A主机需要访问C主机的VNC服务（5900端口）</p>

<p>在A主机上建立本地转发端口5901</p>

<pre><code>$ ssh -L 5901:192.168.2.101:5900 root@192.168.2.100
</code></pre>

<p>然后本地vnc客户端通过5901端口打开c主机的vnc服务</p>

<pre><code>$ open vnc://localhost:5901
</code></pre>

<p><strong>优点</strong></p>

<ul>
<li>无需设置代理</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>每个服务都需要配置不同的端口转发</li>
</ul>


<h4>远端端口转发</h4>

<p>远程端口转发用于某些单向阻隔的内网环境，比如说NAT，网络防火墙。在NAT设备之后的内网主机可以直接访问公网主机，但外网主机却无法访问内网主机的服务。如果内网主机向外网主机建立一个远程转发端口，就可以让外网主机通过该端口访问该内网主机的服务。可以把这个内网主机理解为“内应”和“开门者”。</p>

<p><strong>命令格式</strong></p>

<pre><code>ssh -R [bind_address:]port:host:hostport
</code></pre>

<p><strong>参数说明</strong></p>

<ul>
<li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为<code>*</code>会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为<code>localhost</code>。</li>
<li>port 指定本地绑定的端口</li>
<li>host 指定数据包转发源地址的IP，如果源主机和ssh server是同一台主机时该参数指定为<code>localhost</code></li>
<li>host_port 指定数据包转发源端口</li>
</ul>


<p><strong>使用场景</strong></p>

<p>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以通过SSH访问登录B主机，但反向直接连接被禁止，主机B和主机C可以相互访问。若主机C想访问主机A的VNC服务（5900端口）。</p>

<p>在主机A执行如下命令，开放B主机远端端口转发。</p>

<pre><code>$ ssh -R 5900:192.168.2.100:5901 root@192.168.2.100
</code></pre>

<p>然后主机C连接主机B的5901端口</p>

<pre><code>$ open vnc://192.168.2.100:5901
</code></pre>

<p><strong>优点</strong></p>

<ul>
<li>可以穿越防火墙和NAT设备</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>每个服务都需要配置不同的端口转发</li>
</ul>


<h3>如何禁止端口转发</h3>

<p>设置ssh服务配置文件<code>/etc/ssh/sshd_config</code></p>

<pre><code>AllowTcpForwarding no
</code></pre>

<h3>参考文献</h3>

<ol>
<li><a href="http://chamibuddhika.wordpress.com/2012/03/21/ssh-tunnelling-explained/">SSH Tunneling Explained</a></li>
<li><a href="http://www.ramkitech.com/2012/04/how-to-do-ssh-tunneling-port-forwarding.html">How to do SSH Tunneling (Port Forwarding) </a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qemu-kvm将SLIc 2.1刷入BIOS并成功激活Windows Server 2008 R2]]></title>
    <link href="http://vangie.github.com/blog/2012/12/07/qemu-kvm-add-slic-2-dot-1-to-bios-and-activate-windows-server-2008-r2-sucessfully/"/>
    <updated>2012-12-07T13:20:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/07/qemu-kvm-add-slic-2-dot-1-to-bios-and-activate-windows-server-2008-r2-sucessfully</id>
    <content type="html"><![CDATA[<blockquote><p>在一台DELL R310的宿主机上安装了Ubuntu Server 12.10默认集成KVM虚拟机，用户态虚拟机软件qemu-kvm使用seabios的作为bios实现(位于 <code>/usr/share/qemu-kvm/bios.bin</code>,来自于qemu-common 1.2.0+noroms-0ubuntu2)，该bios.bin仅包含部分来自宿主机的SLIC信息，但不完整，无法通过Window OEM验证。</p></blockquote>

<p>本文将介绍安装KVM虚拟机，借助virt-install安装Windows客户机，去除bios.bin里内置的SLIC，然后使用-acpitable参数载入正确的SLIc 2.1信息，导入OEM证书和OEM key激活Windows。</p>

<p>由于Ubuntu Server没有安装图形环境，DELL R310服务器也是不带显示器的，所有windows的安装过程是通过本来的Macbook Air的VNC客户端操作的。</p>

<!-- more -->


<h3>安装KVM虚拟机</h3>

<p>首先检查你的处理器是否支持硬件虚拟化；如果支持，下面这个命令</p>

<pre><code>$ sudo egrep '(vmx|svm)' --color=always /proc/cpuinfo
</code></pre>

<p>会看到如下类似信息</p>

<blockquote><p>flags      : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl <strong>vmx</strong> smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid</p></blockquote>

<p>若什么都没有显示，那么你的处理器不支持硬件虚拟化，就此打住，不要往下折腾了。</p>

<p>检查bios虚拟化开关是否开启</p>

<pre><code>$ sudo kvm-ok
</code></pre>

<p>正确的返回如下</p>

<blockquote><p>INFO: /dev/kvm exists<br/>
KVM acceleration can be used</p></blockquote>

<p>安装KVM,(若在Ubuntu Server安装过程中已经安装了KVM忽略此步骤)</p>

<pre><code>$ sudo apt-get install ubuntu-virt-server  kvm-ipxe
</code></pre>

<p>之后，将当前用户添加到libvirtd群组</p>

<pre><code>$ sudo adduser `id -un` libvirtd
$ sudo adduser `id -un` kvm
</code></pre>

<p>你需要要重新登录一下，才能让新群组生效。</p>

<p>验证kvm是否成功安装</p>

<pre><code>cloud03@cloud03:~$ virsh -c qemu:///system list
 Id    Name                           State
----------------------------------------------------

cloud03@cloud03:~$ 
</code></pre>

<h3>安装Windows Server 2008 R2</h3>

<h4>准备</h4>

<ol>
<li><a href="ed2k://|file|cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_vl_build_x64_dvd_617396.iso|3368962048|7C210CAC37A05F459758BCC1F4478F9E|/">Windows Server 2008 R2 安装镜像ISO</a></li>
<li><a href="http://www.linux-kvm.org/page/WindowsGuestDrivers/Download_Drivers">Windows VirtIO Drivers</a>,若不加载该驱动windows installer会无法找到虚拟磁盘（没有验证过，网上是怎么说的） 点击下载：<a href="http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/bin/virtio-win-0.1-30.iso">virtio-win-0.1-30.iso</a></li>
<li>安装virt-install <code>$ sudo apt-get install virtinst</code></li>
</ol>


<h3>开始安装</h3>

<pre><code>$ virt-install --connect qemu:///system --arch=x86_64 -n win2k8 -r 4096 --vcpus=2 \
-c /home/cloud03/cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_vl_build_x64_dvd_617396.iso \
--noautoconsole --os-type windows --os-variant win2k8 \
--disk path=/home/cloud03/virtio-win-0.1-30.iso,device=cdrom,perms=ro \
--disk path=/var/lib/libvirt/images/win2k8.img,size=50 \
--graphics vnc,password=foobar,listen=0.0.0.0 
</code></pre>

<p>部分参数说明</p>

<ul>
<li>-n win2k8 虚拟机的名称为win2k8</li>
<li>-r 4096 分配4G内存</li>
<li>-vcpus=2 两个cpu</li>
<li>-c /home/cloud03/cn_windows…617396.iso 指向ISO安装镜像位置</li>
<li>&#8211;disk path=/home/cloud03/virtio-win-0.1-30.iso,device=cdrom,perms=ro 加载virtio驱动</li>
<li>&#8211;disk path=/var/lib/libvirt/images/win2k8.img,size=50 创建虚拟磁盘，并分配50G的空间</li>
<li>&#8211;graphics vnc,password=foobar,listen=0.0.0.0 开启VNC，password选项是为了兼容mac内置Screen Sharing VNC终端无法连接不加密的VNC Server，listen选项是为了让VNC终端在所有IP地址上都开启监听，默认在127.0.0.1上监听，仅适用于本机VNC终端访问。</li>
</ul>


<p>使用VNC客户端打开远程桌面，Mac下非常简单，在Terminal.app里输入<code>open vnc://192.168.18.130</code>回车即可。windows和linux桌面系统请自行安装vnc客户端。</p>

<p>另外不少网友推荐Mac下用<a href="http://sourceforge.net/projects/cotvnc/">Chicken of the VNC.app</a>，试用过后不如内置Screen Sharing好，特别是系统重启断线重连的时候内置的客户端表现很稳定，Chicken of the VNC会假死，需要退出程序重开。</p>

<h3>编译bios.bin</h3>

<p><a href="https://github.com/ghuntley/seaslic">seaslic</a> 项目对seabios项目打了一个patch用于解决预安装正版windows的宿主机，改装linux运行kvm后，让虚拟机bios也有和宿主机一样的SLIc。简单的说就是把宿主机bios里的SLIc信息导入到虚拟机的bios.bin文件中去。让虚拟机也有正确的OEM标识。</p>

<p>经过测试seaslic项目导入的SLIc信息不完整，（至少在DELL R310下是不完整的），无法通过windows校验。</p>

<p>qemu-kvm有一个-acpitable选项，可以通过file=… 装载一个外部的SLIC文件（<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>） 这里几乎有所有OEM机器的SLIC文件和证书）。</p>

<p>但是如果直接使用-acpitable选项加载外部SLIC进BIOS无论是使用内置的bios.bin(<code>/usr/share/qemu-kvm/bios.bin</code>),还是seaslic项目打过Patch的bios.bin都会导致ACPI table里有两条SLIc记录，一条正确的一条不完整的，导致windows无法激活。</p>

<p>一个可行的方案：在sealic项目的基础上，稍作修改编译一个完全不包含SLIc的bios.bin,然后在结合-acpitable选项载入外部SLIC文件。经实践，可以激活。</p>

<p>具体步骤如下：</p>

<p>下载sealic项目源码</p>

<pre><code>$ cd ~
$ git clone git://github.com/ghuntley/seaslic
</code></pre>

<p>执行./patch.sh,该脚本会运用patch然后编译出bios.bin,调用该脚本只需要其运用patch的功能，编译出来的bios.bin先别管。</p>

<pre><code>$ cd seaslic
$ ./patch.sh
</code></pre>

<p>编辑acpi.c文件</p>

<pre><code>$ vim  seabios.submodule/src/acpi.c
</code></pre>

<p>注释掉638-647行,</p>

<pre><code>/*#ifdef CONFIG_OEM_SLIC
{ void *buf = malloc_high(sizeof(SLIC));
  if (!buf)
    warn_noalloc();
  else {
    memcpy(buf, SLIC, sizeof(SLIC));
    ACPI_INIT_TABLE(buf);
  }
}
#endif*/
</code></pre>

<p>然后编译</p>

<pre><code>$ cd seabios.submodule
$ make
</code></pre>

<p>替换系统内置bios.bin</p>

<pre><code>$ sudo cp out/bios.bin /usr/share/qemu-kvm/bios.bin
</code></pre>

<h3>修改虚拟机配置</h3>

<p>使用virsh edit命令可以修改虚拟机的配置。</p>

<pre><code>$ virsh edit win2k8
</code></pre>

<p>将第一行</p>

<pre><code>&lt;domain type='kvm'&gt;
</code></pre>

<p>改成</p>

<pre><code>&lt;domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'&gt;
</code></pre>

<p>然后，在靠近文件的末尾处，<code>&lt;/devices&gt;</code>便签之后，加入如下内容</p>

<pre><code>&lt;qemu:commandline&gt;
    &lt;qemu:arg value='-acpitable'/&gt;
    &lt;qemu:arg value='file=/usr/share/qemu/SLIC-DELL-PE_SC3-2.1.BIN'/&gt;
&lt;/qemu:commandline&gt;
</code></pre>

<p>保存退出。其中，SLIC-DELL-PE_SC3-2.1.BIN文件可以从<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>找到。</p>

<p>重启虚拟机，然后在虚拟机下载windows工具<a href="http://forums.mydigitallife.info/threads/6925-SLIC-ToolKit-x86-x64-(Includes-PKey-amp-Cert-Backup">SLIC Toolkit</a>.若“<strong>SLIC诊断</strong>”栏显示SLIC状态为<strong>验证通过</strong>则表明已生效。</p>

<h3>在Windows里安装OEM证书和序列号</h3>

<p>现在是完事具备只欠东风了，从<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>压缩包中可以找到DEL的OEM证书。</p>

<p>在windows控制台中使用如下命令导入</p>

<pre><code>&gt; slmgr -ilc DELL-DELL-2.0.XRM-MS
</code></pre>

<p>然后在这里<a href="http://forums.mydigitallife.info/threads/2827-Server-2008-Server-2008-R2-OEM-SLP-Keys">Server 2008/Server 2008 R2 OEM SLP Keys</a>找到对应的Key。使用下面的命令导入</p>

<pre><code>&gt; slmgr -ipk D7TCH-6P8JP-KRG4P-VJKYY-P9GFF
</code></pre>

<blockquote><p>Server 2008 R2 Standard DELL OEM KEY <br/>
D7TCH-6P8JP-KRG4P-VJKYY-P9GFF<br/>
Server 2008 R2 Enterprise DELL OEM KEY<br/>
BKCJJ-J6G9Y-4P7YF-8D4J7-7TCWD</p></blockquote>

<p>重新打开<a href="http://forums.mydigitallife.info/threads/6925-SLIC-ToolKit-x86-x64-(Includes-PKey-amp-Cert-Backup">SLIC Toolkit</a>工具，若“<strong>序列号与证书验证及备份</strong>”栏显示<strong>证书正确</strong>，那表示已经大功告成。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://virtual.51cto.com/art/201206/341911.htm">在Ubuntu 12.04 LTS服务器上借助KVM实现虚拟化</a></li>
<li><a href="https://www.nnbfn.net/2011/01/installing-win-server-2008-r2-as-a-kvm-guest-with-virtio/">Installing Win Server 2008 R2 as a KVM Guest with VirtIO</a></li>
<li><a href="http://forums.mydigitallife.info/threads/33723-Crafting-an-SLIC-BIOS-for-Linux-KVM-Guests">Crafting an SLIC BIOS for Linux KVM Guests</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server 12.10修改语言环境]]></title>
    <link href="http://vangie.github.com/blog/2012/12/04/change-default-locale-in-ubuntu-server-12-dot-10/"/>
    <updated>2012-12-04T16:59:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/04/change-default-locale-in-ubuntu-server-12-dot-10</id>
    <content type="html"><![CDATA[<blockquote><p>安装的时候把ubuntu server的默认语言设置成了中文，由于默认没有安装中文字体，控制台一片乱码。所有要么安装字体<code>sudo apt-get install language-pack-zh</code>,要么把语言环境设置成英文。</p></blockquote>

<p>网上大部分文章都提到修改<code>/etc/environment</code>文件，但是打开<code>/etc/environment</code>文件，默认是空的，说明这种方法虽然可以达到效果，但不是最完美的。更好的方式如下：</p>

<pre><code>$ sudo update-locale LANG=en_US.UTF-8
$ sudo update-locale LANGUAGE=en_US.en
</code></pre>

<p>然后重启系统即可。</p>

<!-- more -->


<h3>参考文献</h3>

<ol>
<li><a href="http://askubuntu.com/questions/89976/how-to-change-the-default-locale-in-ubuntu-10-10-server">How to change the default locale in ubuntu 10.10 server</a></li>
<li><a href="http://www.slyar.com/blog/ubuntu-server-utf8-zhcn.html">Ubuntu Server下配置UTF-8中文/英文环境</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何清除DNS缓存]]></title>
    <link href="http://vangie.github.com/blog/2012/11/20/how-to-flush-your-dns-cache/"/>
    <updated>2012-11-20T16:23:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/20/how-to-flush-your-dns-cache</id>
    <content type="html"><![CDATA[<blockquote><p>系统管理员或者web开发者，偶尔需要刷新一下DNS，由于DNS存在本地缓存，如果不主动清除，那需要一段漫长的等待</p></blockquote>

<h3>Mac OS</h3>

<p>OS X Lion (10.7) and OS X Mountain Lion (10.8)</p>

<pre><code>$ sudo killall -HUP mDNSResponder
</code></pre>

<p>Mac OS X 10.5, Mac OS X 10.6</p>

<pre><code>$ dscacheutil -flushcache
</code></pre>

<p>Mac OS X 10.4 Tiger</p>

<pre><code>$ lookupd -flushcache
</code></pre>

<h3>Windows</h3>

<p>Vista/Win7 以上系统</p>

<p>查看DNS缓存</p>

<pre><code>&gt; ipconfig /displaydns
</code></pre>

<p>清除DNS缓存</p>

<pre><code>&gt; ipconfig /flushdns 
</code></pre>

<p>Winxp和之前的老系统</p>

<pre><code>&gt; net stop dnscache
&gt; net start dnscache
</code></pre>

<h3>Linux</h3>

<pre><code>$ sudo /etc/init.d/nscd restart
</code></pre>

<h4>参考文献</h4>

<ol>
<li><a href="http://osxdaily.com/2008/03/21/how-to-flush-your-dns-cache-in-mac-os-x/">How to Flush DNS Cache in Mac OS X</a></li>
<li><a href="http://www.cnblogs.com/yryz/archive/2012/02/13/2299756.html">Vista/Win7以上系统查看和清除本地DNS缓存新方法</a></li>
<li><a href="http://www.techiecorner.com/35/how-to-flush-dns-cache-in-linux-windows-mac/">How to flush DNS cache in Linux / Windows / Mac</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lion系统安装GNU Grep]]></title>
    <link href="http://vangie.github.com/blog/2012/11/12/install-gnu-grep-in-mountain-lion/"/>
    <updated>2012-11-12T11:32:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/12/install-gnu-grep-in-mountain-lion</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://news.ycombinator.com/item?id=4588304">由于License的问题</a>，OS X将GNU Grep替换成了FreeBSD Grep，这两个版本的grep大部分都兼容，FreeBSD Grep唯独少了-P（&#8211;per-regex）选项，缺少了对Perl正则表达式的支持。</p></blockquote>

<p>可以通过使用homebrew自己安装GNU Grep以兼容包含-P参数的bash脚本。</p>

<pre><code>$ brew tap homebrew/dupes/
$ brew install homebrew/dupes/grep
</code></pre>

<p>记得在PATH里确保/usr/local/bin在/usr/bin前面，并重启终端。</p>

<!-- more -->


<h4>参考文献</h4>

<ol>
<li><a href="http://superuser.com/questions/419467/grep-in-mac-os-xs-terminal-only-displaying-one-color">Grep in Mac OS X&#8217;s terminal — only displaying one color</a></li>
<li><a href="http://www.dirtdon.com/?p=1452">Perl Regex Removed From Grep in Mountain Lion</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下安装Gate One]]></title>
    <link href="http://vangie.github.com/blog/2012/11/07/install-gateone-on-mac-osx/"/>
    <updated>2012-11-07T22:07:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/07/install-gateone-on-mac-osx</id>
    <content type="html"><![CDATA[<blockquote><p>HTML5终端模拟器/SSH客户端<a href="http://liftoffsoftware.com/Products/GateOne">Gate One</a>发布了<a href="https://github.com/liftoff/GateOne/downloads">v1.1版</a>。主要新特性包括：安全增强，性能改进，移动浏览器支持，改进终端模拟，系统日志信息的自动语法高亮，捕捉以及以图像形式展示PDF，Python 3支持，IE10支持，等等。官方DEMO演示显示你可以在浏览器上尝试vim，玩终端游戏，在lynx中冲浪，等等。</p></blockquote>

<p>官方给出了RPM，DEB安装包唯独没有mac下的安装包，由于该项目太新，也就不指望homebrew安装了，只能选择从源码安装。</p>

<!-- more -->


<h3>准备</h3>

<p>根据<a href="http://liftoff.github.com/GateOne/About/index.html#installation">官方的安装指南</a>,安装前置需求软件：</p>

<table>
<thead>
<tr>
<th align="left">软件               </th>
<th align="right"> 版本</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Python               </td>
<td align="right"> 2.6+ 或者 3.2+</td>
</tr>
<tr>
<td align="left">Tornado Framework    </td>
<td align="right"> 2.2+  </td>
</tr>
</tbody>
</table>


<p>终端执行如下命令验证</p>

<pre><code>user@modern-host:~ $ python -V 
Python 2.7.2+ 
user@modern-host:~ $ python -c "import tornado;print(tornado.version)" 
2.4 
</code></pre>

<p>若tornado没有安装，执行如下命令安装</p>

<pre><code>user@modern-host:~ $ sudo pip install tornado kerberos
</code></pre>

<h3>安装</h3>

<p>执行如下命令即可完成安装，安装目录位于/opt/gateone</p>

<pre><code>user@whatever:~ $ tar zxvf gateone*.tar.gz; cd GateOne*; sudo python setup.py install
</code></pre>

<p>由于gateone依赖dtach和PIL，如果没有安装这两个东西，启动的时候会提示某些功能会失效</p>

<pre><code>$ brew install dtach
$ sudo pip install PIL
</code></pre>

<h3>启动</h3>

<pre><code>$ cd /opt/gateone
$ sudo ./gateone.py
</code></pre>

<p>在chrome浏览器打开https://127.0.0.1即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过IP地址获得windows机制主机名]]></title>
    <link href="http://vangie.github.com/blog/2012/11/06/get-the-hostname-of-a-windows-machine-by-ip-address/"/>
    <updated>2012-11-06T11:46:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/06/get-the-hostname-of-a-windows-machine-by-ip-address</id>
    <content type="html"><![CDATA[<blockquote><p>局域网内可以通过NetBIOS协议将IP地址转换为windows机器的主机名</p></blockquote>

<h3>Windows</h3>

<pre><code>nbtstat -a [ip]
</code></pre>

<h3>Linux</h3>

<pre><code> nmblookup -A [ip]
</code></pre>

<h3>Mac OS</h3>

<pre><code>smbutil status [ip]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson多态类型数据绑定]]></title>
    <link href="http://vangie.github.com/blog/2012/11/03/jackson-polymorphic-deserialization/"/>
    <updated>2012-11-03T14:28:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/03/jackson-polymorphic-deserialization</id>
    <content type="html"><![CDATA[<blockquote><p>Jackson数据绑定可以很方便的将java的对象类型和json数据格式之间进行转换。对于有多个子类型的多态集成结构的对象，Jackson在序列化的时候加入一些类型信息，可以在反序列化的时候准确的还原某个类型的子类。</p></blockquote>

<p>想要把JSON数据准确的反序列化为正确的子类型，简单的方法就是在数据中存储数据的类型。但是Jackson序列化时默认不会将对象的类型信息保存到Json数据中。有两种方式开始使Jackson序列化类型信息</p>

<!-- more -->


<h3>方式一：全局Default Typing机制</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">enableDefaultTyping</span><span class="o">();</span> <span class="c1">// default to using DefaultTyping.OBJECT_AND_NON_CONCRETE</span>
</span><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">enableDefaultTyping</span><span class="o">(</span><span class="n">ObjectMapper</span><span class="o">.</span><span class="na">DefaultTyping</span><span class="o">.</span><span class="na">NON_FINAL</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>DefaultTyping有四个选项</p>

<ul>
<li><strong>JAVA_LANG_OBJECT</strong>: 当对象属性类型为Object时生效</li>
<li><strong>OBJECT_AND_NON_CONCRETE</strong>: 当对象属性类型为Object或者非具体类型（抽象类和接口）时生效</li>
<li><strong>NON_CONCRETE_AND+_ARRAYS</strong>: 同上, 另外所有的数组元素的类型都是非具体类型或者对象类型</li>
<li><strong>NON_FINAL</strong>: 对所有非final类型或者非final类型元素的数组</li>
</ul>


<p>开启DefaultTyping，并且让所有的非final类型对象持久化时都存储类型信息显然能准确的反序列多态类型的数据。</p>

<h3>方式二： 为Class添加@JsonTypeInfo</h3>

<p>先来看看<code>objectMapper.enableDefaultTyping()</code>的源码。</p>

<pre><code>/**
 * Convenience method that is equivalent to calling
 *&lt;pre&gt;
 *  enableObjectTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
 *&lt;/pre&gt;
 */
public ObjectMapper enableDefaultTyping() {
    return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
}

/**
 * Convenience method that is equivalent to calling
 *&lt;pre&gt;
 *  enableObjectTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
 *&lt;/pre&gt;
 */
public ObjectMapper enableDefaultTyping(DefaultTyping dti) {
    return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
}
</code></pre>

<p>该方法内部调用涉及到了<code>JsonTypeInfo.As.WRAPPER_ARRAY</code>。下面我们来看看如何使用@JsonTypeInfo这个注释来更精细的定制序列化的JSON文件格式。</p>

<pre><code>@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property="@class")
class Animal { } 
</code></pre>

<p>在超类Animal上加上一段@JsonTypeInfo，所有Animal的子类反序列化都可以准确的对于子类型。
我们来解释一下这段注释的意思：</p>

<ul>
<li><code>use=JsonTypeInfo.Id.CLASS</code>:使用类的完全限定名作为唯一识别</li>
<li><code>include=JsonTypeInfo.As.PROPERTY</code>:将这个唯一识别的字段保存为属性值</li>
<li><code>property="@class"</code>该属性值的名称为@class</li>
<li><code>@JsonTypeResolver</code>和<code>@JsonTypeIdResolver</code>取默认值时可以省略</li>
<li>加上了该注释的类型和子类型都会生效</li>
</ul>


<p>use的几个可选值</p>

<ul>
<li>CLASS 完全限定名</li>
<li>MINIMAL_CLASS 类名，若基类和子类在同一包类，会省略包名</li>
<li>NAME 逻辑名，需要单独定义名称与类的对应关系</li>
<li>CUSTOM 由@JsonTypeIdResolver对应</li>
</ul>


<p>include的几个选值</p>

<ul>
<li>PROPERTY 将属性包含在对象成员属性里</li>
<li>WRAPPER_OBJECT 属性作为键，序列化的对象作为值</li>
<li>WRAPPER_ARRAY 第一个元素是类型ID，第二原始是序列化的对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">// Type name as a property, same as above</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;@type&quot;</span> <span class="o">:</span> <span class="s">&quot;Employee&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wrapping class name as pseudo-property (similar to JAXB)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;com.fasterxml.beans.EmployeeImpl&quot;</span> <span class="o">:</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">...</span> <span class="c1">// actual instance data without any metadata properties</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wrapping class name as first element of wrapper array:</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="s">&quot;com.fasterxml.beans.EmployeeImpl&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>       <span class="o">...</span> <span class="c1">// actual instance data without any metadata properties</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考文献</h3>

<ol>
<li><a href="http://wiki.fasterxml.com/JacksonPolymorphicDeserialization">JacksonPolymorphicDeserialization</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[登录Shell和交互Shell的区别]]></title>
    <link href="http://vangie.github.com/blog/2012/10/11/different-between-login-shell-and-interactive-shell/"/>
    <updated>2012-10-11T14:47:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/10/11/different-between-login-shell-and-interactive-shell</id>
    <content type="html"><![CDATA[<blockquote><p>遇到两个shell的概念：<code>交互式登录shell</code>和<code>交互式非登录shell</code>。要理解上面两个术语，先要理清两个概念<code>登录shell</code>和<code>交互shell</code></p></blockquote>

<!-- more -->


<h3>登录shell（Login shell）</h3>

<p>从tty下登录（login）进去的shell称为<code>登录shell</code>,在已经登录的shell执行bash或者su命令启动的shell称为<code>非登录shell</code>（non-login shell）注意：通过命令<code>su -l [username]</code>可以进入<code>登录shell</code>，另外在图形界面（如Gnome）打开的命令行窗口（terminal）属于<code>非登录shell</code>。</p>

<h5>配置文件</h5>

<p>登录shell和非登录shell启动的时候会装载不同的配置文件。</p>

<p>登录shell</p>

<ul>
<li><code>/etc/profile</code></li>
<li><code>~/.bash_profile</code></li>
<li><code>~/.profile</code></li>
</ul>


<p>非登录shell</p>

<ul>
<li><code>/etc/bashrc</code>或者<code>/etc/bash.bashrc</code></li>
<li><code>~/.bash_rc</code></li>
</ul>


<h3>交互shell（Interactive Shell）</h3>

<p>交互就是<code>REPL</code>（Read-Eval-Print-Loop）。通俗的说，就是你输入点什么，它执行，然后你查看输出结果，周而复始。我们通常使用的shell都是<code>交互shell</code>。而<code>非交互shell</code>常见的场景是执行bash脚本的时候<code>bash script.sh</code>。shell以一种静默的方式逐行连续执行脚本。</p>

<p><code>登录shell</code>和<code>交互shell</code>是两个不同纬度的概念，所以组合就有所谓的<code>交互式登录shell</code>和<code>交互式非登录shell</code>。</p>

<h5>如何退出交互shell</h5>

<p>对于<code>非登录shell</code>执行<code>exit</code>命令，对于<code>登录shell</code>执行<code>logout</code>命令.</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://www.51testing.com/?uid-225738-action-viewspace-itemid-216858">交互式shell和非交互式shell、登录shell和非登录shell的区别</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决rinse安装CentOS 6报错找不到'/dev/urandom'的问题]]></title>
    <link href="http://vangie.github.com/blog/2012/10/09/yum-aborts-with-missing-uramdon-when-rinse-installing-centos-6/"/>
    <updated>2012-10-09T15:53:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/10/09/yum-aborts-with-missing-uramdon-when-rinse-installing-centos-6</id>
    <content type="html"><![CDATA[<blockquote><p>Debian系统xen安装centos 6.3失败，报错找不到<code>/dev/urandom</code>。</p></blockquote>

<h3>错误如下</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  File "/usr/lib64/python2.4/random.py", line 109, in seed
</span><span class='line'>    a = long(_hexlify(_urandom(16)), 16)
</span><span class='line'>OSError: [Errno 2] No such file or directory: '/dev/urandom'</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>解决方法</h3>

<p><code>vim /usr/lib/rinse/common/30-dev-urandom.sh</code>内容如下</p>

<pre><code>#!/bin/sh
#
#  Ensure the chroot has /dev/random and /dev/urandom
#
# Dan Kegel
# --


#
#  Get the root of the chroot.
#
prefix=$1

#
#  Ensure it exists.
#
if [ ! -d "${prefix}" ]; then
  echo "Serious error - the named directory doesn't     exist."
  exit
fi

#
#  Ensure we have /dev
#
if [ ! -d "${prefix}/dev" ]; then
    mkdir "${prefix}/dev"
fi


#
#  Create the nodes
#
echo "  Creating random devices in /dev"
if [ !  -e "${prefix}/dev/random" ]; then
    mknod -m 666 "${prefix}/dev/random" c 1 8
    chown root:root "${prefix}/dev/random"
fi
if [ !  -e "${prefix}/dev/urandom" ]; then
    mknod -m 666 "${prefix}/dev/urandom" c 1 9
    chown root:root "${prefix}/dev/urandom"
fi
</code></pre>

<p>然后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x /usr/lib/rinse/common/30-dev-urandom.sh
</span></code></pre></td></tr></table></div></figure>


<p>重新执行<code>xen-create-image</code>命令即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xen-create-image --hostname<span class="o">=</span>yourHostName --ip<span class="o">=</span>yourIP --dist<span class="o">=</span>centos-6 --install-method<span class="o">=</span>rinse --force --arch<span class="o">=</span>amd64
</span></code></pre></td></tr></table></div></figure>


<h3>参考文献</h3>

<p>1.<a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=685640">yum aborts with missing /dev/urandom at end of &#8220;rinse &#8211;arch amd64 &#8211;distribution centos-6&#8221;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X配置I2P匿名网络]]></title>
    <link href="http://vangie.github.com/blog/2012/10/07/config-i2p-router-in-macos-x/"/>
    <updated>2012-10-07T11:37:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/10/07/config-i2p-router-in-macos-x</id>
    <content type="html"><![CDATA[<blockquote><p>I2P 是一个匿名网络项目，它提供了一个简单的网络层供对身份敏感的程序进行安全的匿名通讯。I2P 网络是动态的分布式网络，它在设计上并不信任网络中的任何一方，其中的所有数据都经过多层加密。</p></blockquote>

<p>简单的说I2P和Tor一样都可以作为梯子。相比Tor，I2P不需要中央服务器，属于分布式的匿名网络，更难被封杀。下面介绍如何在MacOS X下将I2P配置成本地的HTTP Proxy服务。</p>

<!-- more -->


<h3>下载安装</h3>

<p>打开I2P的<a href="http://www.i2p2.de/download_zh.html">下载页面</a>,找到“Linux / OS X / BSD / Solaris 图形安装程序”下载i2pinstall_0.9.2.jar</p>

<p>然后在命令行里执行（需要java环境）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar i2pinstall_0.9.2.jar
</span></code></pre></td></tr></table></div></figure>


<p>图形向导很简单，没有什么特别需要注意的，可以选择<strong>中文</strong>界面语言。</p>

<h3>运行配置</h3>

<p>双击I2P安装目录（默认位置：/Applications/i2p）里Start I2P Router.app,I2P服务就启动了，浏览器打开<code>http://127.0.0.1:7657/</code>可以配置I2P服务。</p>

<h5>补种</h5>

<p>若此时网络状态为：<strong>测试中</strong>，则需要补种，默认的种子列表都被墙了。补种的方式有如下两个，请根据个人喜好任选一个。</p>

<ol>
<li><p>手动下载种子</p>

<p> 请翻墙打开官网的<a href="http://netdb.i2p2.de/">种子列表</a>，把页面上列出的大约20个种子下载下来。然后把下载的种子放到本机的 /Applications/i2p/netDb 目录下（这个目录是 I2P 用来存放种子的）。再把 I2P 重新启动一下。</p></li>
<li><p>通过代理补种</p>

<p> I2P 可以连接到它的官网去补种。但是 I2P 的官网被封。所以你需要在 I2P 的<a href="http://127.0.0.1:7657/configreseed">补种界面</a>添加代理，让 I2P 先暂时利用其它翻墙软件补充种子。</p></li>
</ol>


<p>不管哪种方法都是欲要翻墙先得翻墙</p>

<h5>UPnP</h5>

<p>若此时网络状态为：<strong>防火墙限制</strong>，这需要修改本地路由器配置开启UPnP。</p>

<p>重启后，若网络状态为：<strong>正常</strong> 或者 <strong>隐身</strong>,则表示服务已经正常启动。i2p会在4444端口，开启http代理服务；4445端口，开启https代理服务。</p>

<h3>后台服务</h3>

<p>双击<code>/Applications/i2p/install_i2p_service_osx.command</code>,i2p被注册成后台服务。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://program-think.blogspot.com/2012/06/gfw-i2p.html">如何翻墙：简单扫盲 I2P 的使用</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJs里给图片添加水印]]></title>
    <link href="http://vangie.github.com/blog/2012/09/20/create-warkmarked-picture-using-node-js/"/>
    <updated>2012-09-20T00:44:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/20/create-warkmarked-picture-using-node-js</id>
    <content type="html"><![CDATA[<p><a href="http://imagemagick.org/">ImageMagick</a>和<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>是两款强大的跨平台图片命令行工具,据说<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>是从<a href="http://imagemagick.org/">ImageMagick</a>分支出来的,更稳定些.</p>

<p>Java平台图片处理包<a href="http://im4java.sourceforge.net/">im4java</a>使用JNI的方式封装了<a href="http://imagemagick.org/">ImageMagick</a>.NodeJs平台图片处理模块<a href="http://aheckmann.github.com/gm/">gm</a>只需要<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>和<a href="http://imagemagick.org/">ImageMagick</a>任选一种安装就好了.</p>

<!-- more -->


<p>使用<a href="http://aheckmann.github.com/gm/">gm</a>进行图片处理非常之方便</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gm</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gm&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gm</span><span class="p">(</span><span class="s1">&#39;/path/to/image.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">resize</span><span class="p">(</span><span class="mi">353</span><span class="p">,</span> <span class="mi">257</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">autoOrient</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">writeStream</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39; hooray! &#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在Mac平台安装有些麻烦,由于<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>使用了linux的图形库,所以需要先安装<a href="http://xquartz.macosforge.org/">XQuartz</a>,最新版本已经支持Mountain Lion了.</p>

<p><a href="http://www.graphicsmagick.org/">GraphicsMagick</a>可以通过homebrew安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install graphicsmagick
</span></code></pre></td></tr></table></div></figure>


<p>装<a href="http://aheckmann.github.com/gm/">gm</a>就不多说了<code>npm install gm</code></p>

<p><a href="http://aheckmann.github.com/gm/">gm</a>目前只封装了<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>的<code>convert</code>子命令,添加水印需要的用到<code>composite</code>子命令.所以只能采用下策:直接调用<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>命令行接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">spawn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;child_process&#39;</span><span class="p">).</span><span class="nx">spawn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">composite</span> <span class="o">=</span> <span class="nx">spawn</span><span class="p">(</span><span class="s1">&#39;gm&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;composite&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;-gravity&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;SouthEast&#39;</span><span class="p">,</span> <span class="c1">//右下角</span>
</span><span class='line'>      <span class="s1">&#39;-dissolve&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;80&#39;</span><span class="p">,</span> <span class="c1">//溶解度,和透明度类似</span>
</span><span class='line'>      <span class="s1">&#39;watermark.png&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;src.jpg&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;dest.jpg&#39;</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">composite</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">composite</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">composite</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;exit&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">code</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;gm composite process exited with code &#39;</span> <span class="o">+</span> <span class="nx">code</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJs里将中文字符转换成拼音字母]]></title>
    <link href="http://vangie.github.com/blog/2012/09/18/convert-chinese-character-to-pinyin-in-nodejs/"/>
    <updated>2012-09-18T01:12:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/18/convert-chinese-character-to-pinyin-in-nodejs</id>
    <content type="html"><![CDATA[<p>中文文件名在不同的平台下常常会出现乱码问题.除了理清编码关系,正确的编解码外,比较简单的办法就是把中文去掉或者不用中文.</p>

<p>最近在做一个文件上传相关的功能,windows下的中文文件传到linux服务器上变成一串乱码文件名.于是想把文件名里的中文字符转换成拼音字母,这样相比直接使用UUID之类的做法,保留了部分语意.</p>

<!-- more -->


<p>Javascript作为一个轻量级的脚本语言本身并不支持字符到拼音的转换,甚至不支持字符集的转换.<a href="https://github.com/hotoo/pinyin.js">pinyin.js</a>是一个支持汉字转换成拼音的js库,<a href="https://github.com/vingel/node-pinyin">node-pinyin</a>是基于该库在node平台的一个简单移植版本.使用起来比较简单.</p>

<p>安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install pinyin</span></code></pre></td></tr></table></div></figure>


<p>下面给出中文文件名的转换拼音方法源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pinyin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pinyin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">normalize</span><span class="p">(</span><span class="nx">originalName</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">originalName</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">charcode</span> <span class="o">=</span> <span class="nx">originalName</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="kr">char</span> <span class="o">=</span> <span class="nx">originalName</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span> <span class="o">&gt;</span> <span class="mi">47</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span> <span class="o">&lt;</span><span class="mi">58</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="kr">char</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">&gt;</span><span class="mi">64</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span><span class="o">&lt;</span><span class="mi">91</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="kr">char</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">&gt;</span><span class="mi">96</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span><span class="o">&lt;</span><span class="mi">123</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="kr">char</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">&gt;</span> <span class="mh">0x4E00</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span> <span class="o">&lt;</span> <span class="mh">0x9FA5</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="p">(</span><span class="s2">&quot;_&quot;</span> <span class="o">+</span> <span class="nx">pinyin</span><span class="p">(</span><span class="kr">char</span><span class="p">,</span><span class="kc">true</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">==</span><span class="mi">46</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="s1">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="s1">&#39;_&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个瀑布流风格布局的jQuery插件]]></title>
    <link href="http://vangie.github.com/blog/2012/09/14/pinterest-like-layout-by-jquery/"/>
    <updated>2012-09-14T22:49:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/14/pinterest-like-layout-by-jquery</id>
    <content type="html"><![CDATA[<p>Pinterest的瀑布流布局,让人眼睛一亮,看图的过程变得很享受.巧妙的改善了分页让阅读中断的问题,页面懒装载的设计也很好的解决了一次性装载图片过多页面加载缓慢的问题.国内的<a href="http://huaban.com/">花瓣网</a>,借鉴了瀑布流的设计,做得挺不错的.</p>

<!-- more -->


<p>找了几个瀑布流的插件</p>

<ul>
<li><a href="http://masonry.desandro.com/">jQuery Masonry</a></li>
<li><a href="http://isotope.metafizzy.co/">jQuery Isotope</a></li>
<li><a href="http://www.wookmark.com/jquery-plugin">The Wookmark jQuery plugin</a></li>
<li><a href="http://imakewebthings.com/jquery-waypoints/">jQuery Waypoints plugin</a> 这款插件可以实现无线滚动条</li>
</ul>


<h4>参考文献</h4>

<ol>
<li><a href="http://ericbae.com/2012/01/30/implement-a-pinterest-like-layout/">Implement a Pinterest-like layout!</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求最大色差颜色]]></title>
    <link href="http://vangie.github.com/blog/2012/09/13/calculate-max-difference-color/"/>
    <updated>2012-09-13T22:51:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/13/calculate-max-difference-color</id>
    <content type="html"><![CDATA[<blockquote><p>对于一个给定的前景色，如何找到一个与之色差较大的背景色，使之醒目？</p></blockquote>

<h3>反色</h3>

<p>对颜色值取反，比较简单的方法：<code>0xFFFFFF - $color</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nx">coffeescript</span>
</span><span class='line'><span class="nv">invert = </span><span class="nf">(color) -&gt;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="s">&quot;000000&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="mh">0xFFFFFF</span> <span class="o">^</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="mi">16</span><span class="p">)).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是当<code>$color = 0x808080</code>时,<code>$color ≈ 0xFFFFFF - $color</code>前景色和背景色非常接近，显然取反的方法有瑕疵。</p>

<!-- more -->


<h3>何为色差</h3>

<p>色差简单来说就是颜色的差别,定量表示的色知觉差异。从<strong>明度</strong>、<strong>色调</strong>和<strong>彩度</strong>这三种颜色属性的差异来表示。明度差表示深浅的差异，色调差表示色相的差异（即偏红或偏蓝等），彩度差表示鲜艳度的差异。通过明度(L)、色调(A)和彩度(B)表示的颜色模型，称为LAB颜色模型，区别于RGB和CMYK颜色模型。</p>

<p><strong>LAB的取值范围</strong></p>

<ul>
<li>L [0, 100]</li>
<li>A [-128, 127]</li>
<li>B [-128, 127]</li>
</ul>


<h3>如何计算色差</h3>

<p><img src="http://upload.wikimedia.org/math/9/1/0/910227e12a98c6df4664034d33c2e91c.png" alt="色差计算公式" />
 ，其中<img src="http://upload.wikimedia.org/math/b/0/6/b06a11157eefd0439922bc2c5f390502.png" alt="颜色1" />和<img src="http://upload.wikimedia.org/math/4/0/1/4013fe6a2bdda4d686baa791861d3db5.png" alt="颜色2" />分别表示两个不同的LAB模型颜色。</p>

<h3>求得与某一颜色的色差最大的颜色</h3>

<p>根据上面的色差计算公式，对于一个给定的LAB颜色，计算出色差最大的颜色是很容易的。L1，a1和b1分别与对应取值范围的中值比较，小于中值取上界，大于中值去下届</p>

<pre><code>L2 = L1&lt;50?100:0
a2 = a1&lt;0?127:-128
b2 = b1&lt;0?127:-128
</code></pre>

<p>但是计算机和常见程序设计语言的采用RGB模型表示颜色。所以需要先将RGB颜色转换成LAB颜色，计算出最大色差颜色的LAB表示法，然后再转换成RGB颜色。</p>

<p><strong>RGB -> LAB</strong></p>

<pre><code>L = (13933 * R + 46871 * G + 4732 * B) / 2^16
a = 377 * (14503 * R - 22218 * G + 7714 * B) / 2^24 + 128
b = 160 * (12773 * R + 39695 * G - 52468 * B) / 2^24 + 128
</code></pre>

<p><strong>LAB -> RGB</strong></p>

<pre><code>R = L1 + (a1 * 100922 + b1 * 17790) / 2^23
G = L1 - (a1 * 30176 + b1 * 1481) / 2^23
B = L1 + (a1 * 1740 - b1 * 37719) / 2^23
</code></pre>

<p>真的有必要通过繁琐的步骤求出最大色差么，能不能简单的获得一个较大色差？</p>

<h3>近似求法</h3>

<p>如果我们略去RGB与LAB的转换，分别找出与R值，G值和B值的差值最大的R‘，G’和B‘也能取得较好的效果</p>

<pre><code>R' = R&lt;128 ? 255 : 0
G' = G&lt;128 ? 255 : 0
B' = B&lt;128 ? 255 : 0
</code></pre>

<p>源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span><span class="nx">coffeescript</span>
</span><span class='line'><span class="nv">diff = </span><span class="nf">(color) -&gt;</span>
</span><span class='line'>  <span class="nv">hex = </span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">r = </span><span class="k">if</span> <span class="p">(</span> <span class="nx">hex</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">128</span> <span class="k">then</span> <span class="s">&#39;00&#39;</span> <span class="k">else</span> <span class="s">&#39;FF&#39;</span>
</span><span class='line'>  <span class="nv">g = </span><span class="k">if</span> <span class="p">(</span> <span class="nx">hex</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">128</span> <span class="k">then</span> <span class="s">&#39;00&#39;</span> <span class="k">else</span> <span class="s">&#39;FF&#39;</span>
</span><span class='line'>  <span class="nv">b = </span><span class="k">if</span> <span class="p">(</span> <span class="nx">hex</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">128</span> <span class="k">then</span> <span class="s">&#39;00&#39;</span> <span class="k">else</span> <span class="s">&#39;FF&#39;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span> <span class="o">+</span> <span class="nx">r</span> <span class="o">+</span> <span class="nx">g</span> <span class="o">+</span> <span class="nx">b</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考文献</h3>

<ol>
<li><a href="http://maestric.com/doc/color_brightness_difference_calculator">Online calculator of color difference and color brightness difference</a></li>
<li><a href="http://en.wikipedia.org/wiki/Color_difference">Wikipedia - Color difference</a></li>
<li><a href="http://hao.qinz.net/comments.php?y=08&amp;m=07&amp;entry=entry080727-033517">从RGB到Lab色彩空间的转换</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
