<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Life]]></title>
  <link href="http://vangie.github.com/atom.xml" rel="self"/>
  <link href="http://vangie.github.com/"/>
  <updated>2012-09-05T01:36:08+08:00</updated>
  <id>http://vangie.github.com/</id>
  <author>
    <name><![CDATA[Vangie Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tweetbot for Mac使用GoAgent代理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/04/tweetbot-for-mac-using-goagent-as-proxy/"/>
    <updated>2012-09-04T22:45:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/04/tweetbot-for-mac-using-goagent-as-proxy</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://tapbots.com/blog/news/tweetbot-for-mac-beta-sort-of" title="Tweetbot for Mac">Tweetbot for Mac</a>是MacOS X上推的不二选择，但是该软件的所有版本都没有提供Proxy设置。网上少有几篇关于<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>如何使用<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>代理上网的教程是针对iOS平台的。</p></blockquote>

<p>玩Ubuntu的时候好像有个工具软件可以作为启动器启动另一个软件，然后让被启动的软件使用该工具软件设定好的代理上网。这个工具可以解决需要使用代理上网但软件有没有开放配置代理的功能。</p>

<p>为什么不使用全局代理呢？</p>

<ol>
<li>浪费<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>有限的浏览，下个迅雷就玩完了。</li>
<li>国内的站点到绕道国外一圈在回来，不是折腾么。</li>
</ol>


<p>可惜在Mac没能找到那么一款神奇的工具，庆幸的是找到了<a href="http://www.proxycap.com/" title="Proxifier and SSH Tunneler for Windows/Mac OS X">ProxyCap</a>和<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>两款软件，这两款软件的功能类似，都是通过配置规则来指定某些应用程序使用指定的代理访问网络。不管哪种方式，到达的效果是一样的,当两款都是收费软件，提供了30天的使用。经过测试<a href="http://www.proxycap.com/" title="Proxifier and SSH Tunneler for Windows/Mac OS X">ProxyCap</a>无法在Mountian Lion下工作，而且提供的是pkg的安装包，安装完需要重启。<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>可用，下面介绍如何配置。官网提供了30天使用的安装版本下载，dmg的安装过程就直接跳过了。</p>

<h3>配置Proxy</h3>

<p>打开<code>Proxies-&gt;Add</code>,针对本机<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>的配置添加一个代理</p>

<ul>
<li>类型: <code>HTTPS</code></li>
<li>地址: <code>127.0.0.1</code></li>
<li>端口: <code>8087</code></li>
</ul>


<p><img src="http://vangie.github.com/images/post/2012-09-04/proxies.jpg" alt="Proxy Setting" /></p>

<h3>配置规则</h3>

<p>打开<code>Rules-&gt;Add</code>,添加一个规则，指定<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>使用改成配置的代理上网</p>

<ul>
<li>名称: Tweetbot</li>
<li>应用程序：选择Tweetbot（默认是Any，右下角有一个<code>+</code>可以选择应用程序的位置）</li>
<li>目标主机(Target Hosts): <code>Any</code></li>
<li>目标端口(Target Port): <code>Any</code></li>
<li>行为(Action): <code>Proxy HTTPS 127.0.0.1:8087</code></li>
</ul>


<p><img src="http://vangie.github.com/images/post/2012-09-04/rules.jpg" alt="Rule Setting" /></p>

<h3>修改DNS设置</h3>

<p>打开 <code>DNS</code>,勾上<code>Resolve hostnames through proxy</code>。
这一步很重要，漏掉了会因为DNS污染导致连接不上。</p>

<p><img src="http://vangie.github.com/images/post/2012-09-04/DNS.jpg" alt="DNS Setting" /></p>

<p>接下打开<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>就可以尽情的Tweet了。在<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>的<code>Connections</code>Tab页能看到链接信息。</p>

<p><img src="http://vangie.github.com/images/post/2012-09-04/connections.jpg" alt="Connections information" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X里让GoAgent运行为后台服务]]></title>
    <link href="http://vangie.github.com/blog/2012/09/03/goagent-run-as-deamon-in-macos-x/"/>
    <updated>2012-09-03T22:22:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/03/goagent-run-as-deamon-in-macos-x</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://code.google.com/p/goagent/" title="GoAgent">GoAgent</a>官方推荐使用<a href="https://goagent.googlecode.com/files/GoAgentMac.dmg" title="GoAgent Mac GUI">GoAgent Mac GUI</a>或者<a href="https://github.com/ohdarling/GoAgentX" title="GoAgentX">GoAgentX</a>作为Mac下的客户端，<a href="https://goagent.googlecode.com/files/GoAgentMac.dmg" title="GoAgent Mac GUI">GoAgent Mac GUI</a>不支持随机启动，图标太难看。<a href="https://github.com/ohdarling/GoAgentX" title="GoAgentX">GoAgentX</a>图标和功能都不错，但是内置的goagent版本不是最新的。所有自己折腾了一下使用Mac下的LaunchAgent机制将goagent配置成自启动的后台服务。</p></blockquote>

<h2>新建plist文件</h2>

<p>在<code>~/Library/LaunchAgents/</code>目录里新建<code>com.googlecode.goagent.plist</code>文件。</p>

<p>文件内容如下</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;  
        &lt;true/&gt;
        &lt;key&gt;KeepAlive&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;com.googlecode.goagent&lt;/string&gt;
        &lt;key&gt;NetworkState&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;/usr/bin/python&lt;/string&gt;
            &lt;string&gt;/Users/vangie/Library/goagent-goagent-dcb39d4/local/proxy.py&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;StartCalendarInterval&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Hour&lt;/key&gt;
            &lt;integer&gt;5&lt;/integer&gt;
            &lt;key&gt;Minute&lt;/key&gt;
            &lt;integer&gt;10&lt;/integer&gt;
        &lt;/dict&gt;
        &lt;key&gt;ServiceDescription&lt;/key&gt;
        &lt;string&gt;goagent Local Service&lt;/string&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>注意<code>/Users/vangie/Library/goagent-goagent-dcb39d4/local/proxy.py</code>根据<a href="http://code.google.com/p/goagent/" title="GoAgent">GoAgent</a>的存放位置做相应的修改。 </p>

<h2>载入并运行该文件</h2>

<pre><code>$ launchctl load ~/Library/LaunchAgents/com.googlecode.goagent.plist
$ launchctl start com.googlecode.goagent
</code></pre>

<p>just enjoy it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress博客设置个性化域名]]></title>
    <link href="http://vangie.github.com/blog/2012/09/02/custom-domain-for-octopress/"/>
    <updated>2012-09-02T20:31:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/02/custom-domain-for-octopress</id>
    <content type="html"><![CDATA[<p>其实挺简单的，官方文档也写的很清晰，不过还是碰到了让人受挫的404错误。</p>

<h2>添加CNAME文件</h2>

<pre><code>echo 'your-domain.com' &gt;&gt; source/CNAME
</code></pre>

<h2>修改DNS记录</h2>

<p>然后去域名注册商那里配置DNS记录（本站域名在godaddy注册的，NS记录指向了<a href="https://www.dnspod.cn/" title="DNSPod">DNSPod</a>，国内用户强烈推荐<a href="https://www.dnspod.cn/" title="DNSPod">DNSPod</a>，配置方便，记录变更生效快）。</p>

<h4>顶级域名</h4>

<p>A记录指向 <code>204.232.175.78</code></p>

<h4>二级域名</h4>

<p>CNAME记录指向 <code>[your-username].github.com</code></p>

<h4>若配置多个域名</h4>

<p><code>source/CNAME</code>文件只能有配置一个域名，其他域名通过DNS的CNAME记录指向<code>source/CNAME</code>里配置的域名</p>

<h2>重新发布</h2>

<p>接下来就只需要重新发布一下</p>

<pre><code>rake generate
rake deploy
</code></pre>

<blockquote><p>别忘了<code>rake generate</code>否则使用新域名打开页面可能就会遇上404错误。</p></blockquote>

<h3>参考文献</h3>

<ol>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></li>
<li><a href="https://help.github.com/articles/my-custom-domain-isn-t-working">My custom domain isn&#8217;t working</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何为MacOS X终端设置代理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/02/how-to-set-proxy-for-terminal/"/>
    <updated>2012-09-02T04:06:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/02/how-to-set-proxy-for-terminal</id>
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何在MacOS X终端里使用代理访问网络,虽然只在Mountain Lion下测试，但同样适用于装有Bash的系统。</p></blockquote>

<p>实在无法忍受<a href="http://www.linode.com/" title="linode">linode</a>日本机房的高延迟，动手配置了一个<a href="http://code.google.com/p/goagent/" title="goagent">goagent</a>服务。但是HTTP代理和VPN不同，没法全局代理（<em>至少不能简单配置</em>），在Terminal里下载最新版本的Ruby，奇慢无比，下面介绍如何让Terminal里执行的程序使用<a href="http://code.google.com/p/goagent/" title="goagent">goagent</a>代理。</p>

<h3>HTTP代理</h3>

<pre><code>$ export http_proxy='http://YOUR_USERNAME:YOUR_PASSWORD@PROXY_IP:PROXY_PORT/'
</code></pre>

<h3>HTTPS代理</h3>

<pre><code>$ export https_proxy='http://YOUR_USERNAME:YOUR_PASSWORD@PROXY_IP:PROXY_PORT/'
</code></pre>

<h3>例子</h3>

<p>让Terminal里的http访问走<a href="http://code.google.com/p/goagent/" title="goagent">goagent</a>的默认端口8087</p>

<pre><code>$ export http_proxy='http://localhost:8087'
$ export https_proxy='http://localhost:8087'
</code></pre>

<h3>取消代理</h3>

<pre><code>$ unset http_proxy
$ unset https_proxy
</code></pre>

<h4>参考文章</h4>

<ol>
<li><a href="http://www.webupd8.org/2010/10/how-to-set-proxy-for-terminal-quick.html">HOW TO SET A PROXY FOR THE TERMINAL [QUICK LINUX TIP]</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X终端里SSH会话管理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/01/ssh-session-profile-management-in-terminal-of-mac-osx/"/>
    <updated>2012-09-01T23:31:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/01/ssh-session-profile-management-in-terminal-of-mac-osx</id>
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何在终端里使用ssh命令方便的管理常用的ssh访问会话，主要针对MacOS X系统编纂，并在Mountain Lion下测试通过。但是同样适用与安装有Bash终端的*uix系统。</p></blockquote>

<p>虽然windows没有对SSH的原生支持，但是<a href="http://www.netsarang.com/products/xsh_overview.html">XShell</a>和<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="Putty">Putty</a>都挺好用的。日常工作需要维护多台linux服务器，用户名和密码多了记不住，所有非常依赖会话记忆功能。</p>

<p>在Mac平台没有找到合适的与<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="Putty">Putty</a>功能类似的软件。可能由于*nix系的操作系统对SSH原生支持，开发者也就没有兴趣去折腾桌面软件，当然也可能是有好的，只是没有找到。</p>

<p>在Terminal里使用SSH便捷登录需要解决三个问题</p>

<ul>
<li>免密码</li>
<li>别名快捷登录</li>
<li>自动补全</li>
</ul>


<h2>免密码</h2>

<p>SSH有两种验证方式：密码和非对称密钥。虽然相比密码来说，非对称密钥的安全性会低一些<em>（某用户拥有你本地root权限，可能就可以操作你的远程服务器，当然密钥本身也设置有密码）</em>，但是这种与系统绑定的信任机制给无人值守的远程拷贝和系统备份提高了便利。</p>

<p>配置步骤如下：</p>

<ol>
<li><p><strong>创建密钥对</strong></p>

<p>开启终端并执行</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>依照提示完成即可，然后将<code>id_rsa</code>和<code>id_rsa.pub</code>文件拷贝到<code>~/.ssh/</code>目录。</p></li>
<li><p><strong>拷贝公钥到远程服务器</strong></p>

<p>需要将公钥<code>id_rsa.pub</code>的内容拷贝到远程服务器<code>~/.ssh/authorized_keys</code>文件里。该文件里可能不存在，需要新建。若该文件已经存在，里面可能有其他用户添加的公钥，所以需要将公钥<code>id_rsa.pub</code>的内容追加在文件尾部(独立成行)，而不是覆盖该文件.</p>

<ul>
<li><p>若<code>authorized_keys</code>已存在</p>

<pre><code>cat ~/.ssh/id_rsa.pub | ssh username@example.com "cat - &gt;&gt; ~/.ssh/authorized_keys"      
</code></pre></li>
<li><p>若<code>authorized_keys</code>不存在</p>

<pre><code>scp ~/.ssh/id_rsa.pub username@example.com:~/.ssh/authorized_keys
</code></pre></li>
</ul>
</li>
<li><p>[可选] <strong>提高系统安全性</strong></p>

<pre><code> chmod 0600 ~/.ssh/authorized_keys
</code></pre></li>
</ol>


<h2>别名快捷登录</h2>

<p>SSH可以在<code>/etc/ssh_config</code>或者<code>~/.ssh/config</code>文件里给远程连接主机配置别名。相当与Putty里的会话管理。</p>

<p>在<code>~/.ssh/config</code>里添加如下配置</p>

<pre><code>Host dv
    HostName example.com
    User domainuser
</code></pre>

<p>然后在终端里执行<code>ssh dv</code>，就相当于<code>ssh domainuser@example.com</code></p>

<p>至此，已经可以在命令行里实现类似<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="Putty">Putty</a>里免密码快捷登录了。但是随着<code>~/.ssh/config</code>里服务器别名项的增多，或者某些服务器长期不用，别名记不起来了。当然使用<code>cat</code>和<code>grep</code>命令可以轻松搞定。如果<code>ssh</code>命令能如<code>ls</code>命令有自动补全就好了。这个真可以有。</p>

<h2>自动补全</h2>

<p>往<code>~/.bash_profile</code>文件末尾追加如下行</p>

<pre><code>complete -W "$(echo `cat ~/.ssh/config | grep 'Host '| cut -f 2 -d ' '|uniq`;)" ssh
</code></pre>

<p>重启终端，<code>ssh + TAB</code>是不是很酷。</p>

<h4>参考文献</h4>

<ol>
<li><a href="http://smbjorklund.no/ssh-login-without-password-using-os-x">SSH login without password using OS X</a></li>
<li><a href="http://ccn.ucla.edu/wiki/index.php/Creating_SSH_Shortcuts_Using_SSH_Config">Creating SSH Shortcuts Using SSH Config</a></li>
<li><a href="http://www.commandlinefu.com/commands/view/2759/ssh-autocomplete">ssh autocomplete</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
