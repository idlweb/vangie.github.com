<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Life]]></title>
  <link href="http://vangie.github.com/atom.xml" rel="self"/>
  <link href="http://vangie.github.com/"/>
  <updated>2012-09-12T00:59:26+08:00</updated>
  <id>http://vangie.github.com/</id>
  <author>
    <name><![CDATA[Vangie Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浏览器自动补全不触发Input控件的onChange和onKeyup事件]]></title>
    <link href="http://vangie.github.com/blog/2012/09/10/fix-browser-autocomplete-does-not-fire-change-or-keyup-event/"/>
    <updated>2012-09-10T13:57:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/10/fix-browser-autocomplete-does-not-fire-change-or-keyup-event</id>
    <content type="html"><![CDATA[<p>表单的输入校验通常会使用<code>onBlur</code>事件，这个事件有个问题，若填完最后一个输入框时，直接点击“提交”按钮，那最后一个输入框的<code>onBlur</code>事件不会触发，导致校验不会执行。这种场景下，语意最贴切的就是<code>onChange</code>事件了，但是<code>onChange</code>事件在<code>onBlur</code>事件之后触发，所有只能用<code>onKeyup</code>或者<code>onKeyPress</code>方法来感知输入框的变化。但是如果在输入时浏览器提供自动补全的功能，那<code>onKeyup</code>和<code>onKeyPress</code>事件不会被触发。</p>

<!-- more -->


<p>下面是通过轮询输入框来模拟change事件的方法，来解决文本框内容变化不被感知的问题。</p>

<pre><code>(function($) {
    $.fn.listenForChange = function(options) {
        settings = $.extend({
            interval: 200 // 毫秒
        }, options);

        var jquery_object = this;
        var current_focus = null;

        jquery_object.filter(":input").add(":input", jquery_object).focus( function() {
            current_focus = this;
        }).blur( function() {
            current_focus = null;
        });

        setInterval(function() {
            // allow
            jquery_object.filter(":input").add(":input", jquery_object).each(function() {
                // set data cache on element to input value if not yet set
                if ($(this).data('change_listener') == undefined) {
                    $(this).data('change_listener', $(this).val());
                    return;
                }
                // return if the value matches the cache
                if ($(this).data('change_listener') == $(this).val()) {
                    return;
                }
                // ignore if element is in focus (since change event will fire on blur)
                if (this == current_focus) {
                    return;
                }
                // if we make it here, manually fire the change event and set the new value
                $(this).trigger('change');
                $(this).data('change_listener', $(this).val());
            });
        }, settings.interval);
        return this;
    };
})(jQuery);
</code></pre>

<p>然后只需要</p>

<pre><code>$("form").listenForChange();
</code></pre>

<h4>参考文献</h4>

<ol>
<li><a href="http://furrybrains.com/2009/01/02/capturing-autofill-as-a-change-event/">Capturing AutoFill as a Change Event</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《HTTP权威指南》读书笔记]]></title>
    <link href="http://vangie.github.com/blog/2012/09/08/reading-notes-of-http-the-definitive-guide/"/>
    <updated>2012-09-08T12:45:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/08/reading-notes-of-http-the-definitive-guide</id>
    <content type="html"><![CDATA[<blockquote><p>一直在做web开发，对HTTP协议还算熟悉，但是这本手册类的砖头书还是很吸引我，看了两章觉得还不错，对于巩固基础很有帮助，最近感觉记性不如从前，烂笔头越来越重要了。</p></blockquote>

<h1>第一章 HTTP概述</h1>

<h2>MIME</h2>

<p>媒体类型<code>MIME</code>（Multipurpose Internet Mail Extension）最初设计是为了解决不同的电子邮件系统之间搬移报文时存在的问题。</p>

<!-- more -->


<p>MIME类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分割</p>

<ul>
<li>HTML格式 text/html</li>
<li>ASCII文本 text/plain</li>
<li>JPEG图片 image/jpeg</li>
<li>GIF图片 image/gif</li>
</ul>


<h2>URI</h2>

<p>URI(Uniform Resource Identifier)统一资源标识符，他有两种形式URL和URN</p>

<ul>
<li>URL（Uniform Resource Locator）同一资源定位符</li>
<li>URN（Uniform Resource Name）同一资源名

<ul>
<li>由唯一的资源名来定位文件，解决URL因服务器变更等原因导致资源无法找到的问题，但是由于URL已被广泛的接受，目前URN技术没推广计划。</li>
<li>语法 <code>urn:&lt;NID&gt;:&lt;NSS&gt;</code><br/>
  <code>&lt;NID&gt;</code>表示命名空间标识符<br/>
  <code>&lt;NSS&gt;</code>表示命名空间里的特定字符</li>
</ul>
</li>
</ul>


<h2>协议</h2>

<p>HTTP协议是基于TCP协议的文本类型的报文，报文非为请求（Request）和相应（Response），报文的结构由3部分组成</p>

<ul>
<li>起始行（start line）</li>
<li>首部字段（header）</li>
<li>主体（body）</li>
</ul>


<p>Telnet实质上就是一个基于TCP协议的工具，所有可以使用Telnet工具模拟HTTP报文与web服务器通讯。</p>

<h2>HTTP协议的版本</h2>

<ul>
<li>HTTP/0.9 已经废弃</li>
<li>HTTP/1.0</li>
<li>HTTP/1.0+ 各家厂商自己扩展的协议</li>
<li>HTTP/1.1 当前使用版本</li>
<li>HTTP/2.0(HTTP-NG) 尚未推广</li>
</ul>


<h2>web的结构组件</h2>

<h3>代理</h3>

<p>位于客户端和服务器之间的HTTP中间实体。客户端向代理发出请求，代理代替客户端向服务端发出请求。</p>

<h3>缓存</h3>

<p>HTTP的仓库，使常用的页面的副本可以保存在离客户端更近的地方。</p>

<h3>网关</h3>

<p>连接其他应用程序的特殊web服务器，将HTTP协议转换为其他协议，如FTP协议</p>

<h3>隧道</h3>

<p>对HTTP通信报文进行盲目转发的特殊代理，常见用途，通过HTTP连接承载SSL流量</p>

<h3>Agent 代理</h3>

<p>发起自动HTTP请求的半智能web客户端，浏览器或者网络蜘蛛。</p>

<h2>相关资源链接</h2>

<ol>
<li><a href="http://www.ietf.org/rfc/rfc2616.txt">RFC2616 超文本传输协议-HTTP/1.1</a></li>
<li><a href="http://www.ietf.org/rfc/rfc1945.txt">RFC1945 超文本传输协议-HTTP/1.0</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2396.txt">RFC2396 统一资源标识符：通用语法</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2141.txt">RFC2141 URN语法规范</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2046.txt">RFC2046 MIME第二部分：媒体类型</a></li>
<li><a href="http://www.wrec.org/Drafts/draft-ietf-wrec-taxonomy-06.txt">因特网Web复制和缓存分类法</a></li>
<li><a href="http://www.w3.org/Protocols/WhyHTTP.html">Why HTTP</a></li>
<li><a href="http://www.w3.org/History.html">万维网简史</a></li>
<li><a href="http://www.w3.org/DesignIssues/Architecture.html">高考俯瞰Web结构</a></li>
</ol>


<h1>第二章 URL与资源</h1>

<h2>URL的语法</h2>

<pre><code>&lt;schema&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;
</code></pre>

<p>几乎没有URL包含上面的全部，最常见的部分是：<code>schema</code>，<code>host</code>，<code>path</code></p>

<ul>
<li><p>&lt;params>:参数</p>

<p>参数和参数，参数和路径之间使用<code>;</code>分割，每一级路径都可以带参数</p>

<pre><code>  ftp://prep.ai.mit.edu/pub/gnu;type=d
  http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true
</code></pre></li>
</ul>


<h2>URL字符集</h2>

<p>URL可以接受的字符是US-ASCII字符集的子集，超过该字符集的字符需要使用<code>%</code>+两位16进制数进行转义。</p>

<h2>需要转义的字符</h2>

<table>
<thead>
<tr>
<th align="left">字符           </th>
<th align="left">保留/受限</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">%             </td>
<td align="left">转移字符</td>
</tr>
<tr>
<td align="left">/             </td>
<td align="left">路径分隔符</td>
</tr>
<tr>
<td align="left">.             </td>
<td align="left">路径当前目录</td>
</tr>
<tr>
<td align="left">..            </td>
<td align="left">路径上一级目录</td>
</tr>
<tr>
<td align="left">#            </td>
<td align="left">分段定界符号</td>
</tr>
<tr>
<td align="left">?             </td>
<td align="left">查询定界符号</td>
</tr>
<tr>
<td align="left">;             </td>
<td align="left">参数定界符号</td>
</tr>
<tr>
<td align="left">:             </td>
<td align="left">方案，用户/口令,主机/端口定界符号</td>
</tr>
<tr>
<td align="left">$ , +         </td>
<td align="left">保留</td>
</tr>
<tr>
<td align="left">@ &amp; =         </td>
<td align="left">用户/主机,查询条件,键值对定界符号</td>
</tr>
<tr>
<td align="left">{}\</td>
<td align="left">\<sup>~[]&#8217;</sup>   |由于各种传输Agent代理不安全处理，受限</td>
</tr>
<tr>
<td align="left">&lt;>&#8221;           </td>
<td align="left">不安全，会破坏html文档</td>
</tr>
<tr>
<td align="left">0x00-0x1F,0x7F</td>
<td align="left">不可见</td>
</tr>
<tr>
<td align="left">>0x7F        </td>
<td align="left">超出US-ASCII字符集范围</td>
</tr>
</tbody>
</table>


<h2>PURL</h2>

<p>PURL(persistent uniform resource locators)<a href="http://purl.oclc.org">永久统一资源定位符</a>，是一种使用URL实现URN功能的方案。</p>

<h1>第三章 HTTP报文</h1>

<p>这张全面的介绍了http报文。</p>

<h2>报文的结构</h2>

<h3>报文语法</h3>

<p><strong>请求报文</strong></p>

<pre><code>&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>

<p><strong>响应报文</strong></p>

<pre><code>&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>

<h3>起始行</h3>

<p><strong>方法</strong></p>

<p>HTTP规范定义的方法：<code>GET</code>、<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>TRACE</code>、<code>OPTIONS</code>、<code>DELETE</code>。其中除了POST方法外，其它方法都是幂等的。</p>

<p>除了规范定义的7中方法，其他服务器可以实现一些自己的请求方法，这类自己实现的方法称为<code>扩展方法</code>。</p>

<p><strong>状态码分类</strong></p>

<table>
<thead>
<tr>
<th align="left">整体范围      </th>
<th align="left">已定义范围   </th>
<th align="left">分类</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">100~199      </td>
<td align="left">100-101    </td>
<td align="left">信息提示</td>
</tr>
<tr>
<td align="left">200~299      </td>
<td align="left">200-206    </td>
<td align="left">成功</td>
</tr>
<tr>
<td align="left">300~399      </td>
<td align="left">300-305    </td>
<td align="left">重定向</td>
</tr>
<tr>
<td align="left">400~499      </td>
<td align="left">400-415    </td>
<td align="left">客户端错误</td>
</tr>
<tr>
<td align="left">500~599      </td>
<td align="left">500-505    </td>
<td align="left">服务端错误</td>
</tr>
</tbody>
</table>


<p><strong>原因短语</strong></p>

<p>原因短语是响应起始行中的最后部分。他是文本形式，<code>HTTP/1.0 200 OK</code>，<code>OK</code>就是原因短语。原因短语没有控制作用，原因短语与状态码不匹配不会引发任何异常。</p>

<h3>首部</h3>

<p>首部紧接着起始行，为请求和响应添加一些附加信息，可分为</p>

<ul>
<li>通用首部</li>
<li>请求首部</li>
<li>响应首部</li>
<li>实体首部</li>
<li>扩展首部</li>
</ul>


<p>(未完待续…)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jetty临时目录被tmpwatch定时任务删除]]></title>
    <link href="http://vangie.github.com/blog/2012/09/07/jetty-tmp-deleted-by-tmpwatch-cron/"/>
    <updated>2012-09-07T16:44:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/07/jetty-tmp-deleted-by-tmpwatch-cron</id>
    <content type="html"><![CDATA[<p>linux下部署的jetty，隔大哥一周时间就会访问出错，或者出现web应用的目录列表。很长一段时间都被这个问题困扰着，由于是个演示系统，持续运行的要求不高，无奈配置了一个cron，定时重启。</p>

<p>最近发现原来linux下有一个叫做<code>tmpwatch</code>的命令，而且默认配置成了<code>cron.daily</code>。每日执行一次。</p>

<!-- more -->


<pre><code>[root@bsdn02 ~]# cat /etc/cron.daily/tmpwatch 
#! /bin/sh
flags=-umc
/usr/sbin/tmpwatch "$flags" -x /tmp/.X11-unix -x /tmp/.XIM-unix \
    -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \
    -X '/tmp/hsperfdata_*' 10d /tmp
/usr/sbin/tmpwatch "$flags" 30d /var/tmp
for d in /var/{cache/man,catman}/{cat?,X11R6/cat?,local/cat?}; do
    if [ -d "$d" ]; then
        /usr/sbin/tmpwatch "$flags" -f 30d "$d"
    fi
done
</code></pre>

<p>此定时任务根据文件的修改/创建时间,清理<code>/tmp</code>下的10天前创建或修改的文件。</p>

<p>jetty启动一个Web应用时，需要先按照<code>jetty_host_port_virtualHost_contextPath_hash</code>的格式创建一个子目录。该临时目录注册给ServletContext里的<code>javax.servlet.context.tempdir</code>属性。临时目前确定的规则如下</p>

<ol>
<li>通过<code>WebAppContext.setTempDirectory</code>设置的临时文件目录</li>
<li>上下文中已经定义的<code>javax.servlet.context.tempdir</code>所对应的目录</li>
<li><code>${jetty.home}/work</code>目录</li>
<li><code>WEB-INF/work</code>目录</li>
<li><code>${java.io.tmpdir}</code>目录</li>
</ol>


<p>默认情况下，jetty取得的临时目录是<code>${java.io.tmpdir}</code>目录,linux系统里，该目录通常指向<code>/tmp</code>目录。jetty会在临时目录里创建一个<code>webapp</code>子目录，用户存放war包里解压出来的内容。若<code>tmpwatch</code>真好删除了，<code>webapp</code>目录里的文件，特别是index.html或者index.jsp，就会导致上述的问题。</p>

<p>这里面需要注意的是，除了第一种（并且仅当该目录为Jetty创建的前提下）和最后一种使用场景下Jetty会在Web应用程序退出以后自动删除临时目录以外，其余场景Jetty都会保留临时文件目录。这就解释了为什么每隔一段时间重启服务能避开这个问题。但是更好的解决方法是，通过设置虚拟机的启动参数<code>-Djava.io.tmpdir</code>，把临时文件指向不受<code>tmpwatch</code>影响的目录位置。</p>

<h4>参考文献</h4>

<ol>
<li><a href="http://lostinmalmo.com/others/2009/04/20/jetty_tmp_dir.html">在Jetty中定位临时文件目录</a></li>
<li><a href="http://www.colorfuldays.org/program/%E9%81%87%E5%88%B0%E4%B8%80%E4%B8%AAjetty-tmp%E7%9A%84%E9%99%B7%E9%98%B1/">遇到一个Jetty tmp的陷阱</a></li>
<li><a href="http://www.longtask.com/blog/?p=734">Jetty部署中tmpdir导致服务不可用的问题</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse插件通过Maven依赖第三方jar包]]></title>
    <link href="http://vangie.github.com/blog/2012/09/05/eclipse-plugin-depend-thirdparty-jars-by-maven/"/>
    <updated>2012-09-05T22:32:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/05/eclipse-plugin-depend-thirdparty-jars-by-maven</id>
    <content type="html"><![CDATA[<blockquote><p>Osgi和Maven都分别提供了依赖管理的机制，在Osgi世界可以被依赖的单元称之为Bundle(一种特殊格式的jar)，在Maven世界称之为POM。各自的领域中都是优雅的技术，但是当两者结合在一起，就不那么美好了。</p></blockquote>

<h3>tycho让plugin和maven结合在一起</h3>

<p><a href="http://www.eclipse.org/tycho/" title="Building Eclipse plug-ins with maven">tycho</a>可以让一个eclipse plugin项目变成一个maven项目，把maven的自动构建和自动测试的优势带到了plugin项目。但是maven的另一个优势依赖管理并没有能够和plugin项目结合。</p>

<!-- more -->


<h3>OSGI如何处理依赖</h3>

<p>先简单介绍一下plugin项目不与maven结合的时候如何处理依赖问题。Eclipse plugin是构建在Osgi技术之上的，或者说Eclipse是Osgi规范的一种实现。</p>

<p>Osgi里每个独立的项目或者jar称之为Bundle，Bundle有生命周期，Osgi平台负责管理Bundle的生命周期状态和依赖关系。和Maven Repository类似，Osgi也有所谓的仓库，<a href="http://ebr.springsource.com/repository/app/" title="Bundle Repository for OSGI">SpringSource Enterprise Bundle Repository</a>和<a href="http://download.eclipse.org/eclipse/updates/4.2/" title="The software repository for the Eclipse Project">Eclipse Project Juno Software Repository</a>就是<a href="http://www.springsource.org/osgi" title="Spring Dynamic Modules">Spring DM</a>和Eclipse为各自的OSGI实现提供的官方仓库。</p>

<p>使用Maven的时候常常会发现总有几个包是仓库里找不到的。Osgi环境下也类似，通常有两种做法：</p>

<ul>
<li>通过工具直接把jar包转换成Bundle，Peter Kriens开发的<a href="http://www.aqute.biz/Bnd/Bnd" title="the Swiss army knife of OSGi">Bnd</a>是OSGI里的瑞士军刀。</li>
<li>把许多第三方jar嵌入到某个Bundle里，通过Osgi的<code>Export-Package</code>机制，将这些jar包里的类开放出来</li>
</ul>


<p>Eclipse plugin开发常用后一种方法。但是这些第三方jar包需要单独去下载，对于用惯maven的开发者来说，很难接受。</p>

<p>下面就介绍如何使用maven技术来构建这个jar包集bundle,我们将使用一个由<a href="http://felix.apache.org">Apache Felix</a>项目提供的maven插件<a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html" title="Bundle Plugin for Maven">maven-bundle-plugin</a></p>

<h3>通过maven-bundle-plugin包含第三方依赖的Bundle</h3>

<p><a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html" title="Bundle Plugin for Maven">maven-bundle-plugin</a>提供了详尽的文档和示例关于如何使用该maven插件，这里就不啰嗦了，直接贴出好用的pom文件片段吧</p>

<pre><code>&lt;project 
xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    ...

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
            &lt;version&gt;2.0.5&lt;/version&gt;
        &lt;/dependency&gt;   
    &lt;/dependencies&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
                &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.1.0&lt;/version&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
                &lt;configuration&gt;
                    &lt;manifestLocation&gt;META-INF&lt;/manifestLocation&gt;
                    &lt;instructions&gt;
                        &lt;Bundle-SymbolicName&gt;${project.artifactId}&lt;/Bundle-SymbolicName&gt;
                        &lt;Bundle-RequiredExecutionEnvironment&gt;
                            J2SE-1.5
                        &lt;/Bundle-RequiredExecutionEnvironment&gt;
                        &lt;Embed-Dependency&gt;
                            *;scope=compile|runtime;inline=false
                        &lt;/Embed-Dependency&gt;
                        &lt;_exportcontents&gt;
                            com.fasterxml.jackson.core.*,
                            com.fasterxml.jackson.databind.*,
                            com.fasterxml.jackson.annotation.*
                        &lt;/_exportcontents&gt;
                        &lt;Bundle-ClassPath&gt;.,{maven-dependencies}&lt;/Bundle-ClassPath&gt;
                        &lt;Embed-Transitive&gt;true&lt;/Embed-Transitive&gt;
                        &lt;Embed-Directory&gt;jars&lt;/Embed-Directory&gt;
                        &lt;Embed-StripGroup&gt;true&lt;/Embed-StripGroup&gt;
                        &lt;_failok&gt;true&lt;/_failok&gt;
                        &lt;_nouses&gt;true&lt;/_nouses&gt;
                    &lt;/instructions&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                &lt;executions&gt;

                    &lt;execution&gt;
                        &lt;id&gt;copy-dependencies&lt;/id&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;outputDirectory&gt;jars&lt;/outputDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
        &lt;pluginManagement&gt;
            &lt;plugins&gt;
                &lt;!--This plugin's configuration is used to store Eclipse m2e settings 
                    only. It has no influence on the Maven build itself. --&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;
                    &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;
                    &lt;version&gt;1.0.0&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;lifecycleMappingMetadata&gt;
                            &lt;pluginExecutions&gt;
                                &lt;pluginExecution&gt;
                                    &lt;pluginExecutionFilter&gt;
                                        &lt;groupId&gt;
                                            org.apache.maven.plugins
                                        &lt;/groupId&gt;
                                        &lt;artifactId&gt;
                                            maven-dependency-plugin
                                        &lt;/artifactId&gt;
                                        &lt;versionRange&gt;
                                            [2.1,)
                                        &lt;/versionRange&gt;
                                        &lt;goals&gt;
                                            &lt;goal&gt;
                                                copy-dependencies
                                            &lt;/goal&gt;
                                        &lt;/goals&gt;
                                    &lt;/pluginExecutionFilter&gt;
                                    &lt;action&gt;
                                        &lt;execute&gt;&lt;/execute&gt;
                                    &lt;/action&gt;
                                &lt;/pluginExecution&gt;
                            &lt;/pluginExecutions&gt;
                        &lt;/lifecycleMappingMetadata&gt;
                    &lt;/configuration&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>一些说明，这个pom会生成Osgi的描述文件<code>META-INF/MANIFEST.MF</code>,但是不会将jars目录下的jar加到<code>Referenced Libraries</code>里去，虽然<code>Maven Dependencies</code>里有，但是仍然会导致PDE编辑器对<code>Export-Package</code>段的校验报错。所以需要在PDE编辑器<code>Runtime-&gt;Classpath</code>里把jar全部删掉，再重新添加一次。</p>

<h4>参考文献</h4>

<ol>
<li><a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html">Bundle Plugin for Maven</a></li>
<li><a href="http://maxrohde.com/2010/12/02/%E2%80%9Cno-required-execution-environment-has-been-set%E2%80%9D-from-maven-bundle-plugin/">No required execution environment has been set” from Maven Bundle Plugin</a></li>
<li><a href="http://maven.apache.org/plugins/maven-dependency-plugin/copy-dependencies-mojo.html">Maven Dependency plugin > dependency:copy-dependencies</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweetbot for Mac使用GoAgent代理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/04/tweetbot-for-mac-using-goagent-as-proxy/"/>
    <updated>2012-09-04T22:45:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/04/tweetbot-for-mac-using-goagent-as-proxy</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://tapbots.com/blog/news/tweetbot-for-mac-beta-sort-of" title="Tweetbot for Mac">Tweetbot for Mac</a>是MacOS X上推的不二选择，但是该软件的所有版本都没有提供Proxy设置。网上少有几篇关于<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>如何使用<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>代理上网的教程是针对iOS平台的。</p></blockquote>

<p>玩Ubuntu的时候有个工具软件可以作为启动器启动另一个软件，然后让被启动的软件使用该工具软件设定好的代理上网。这个工具可以解决需要使用代理上网但软件自身未提供代理配置功能的问题。</p>

<!-- more -->


<p>为什么不使用全局代理呢？</p>

<ol>
<li>浪费<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>有限的浏览，下个迅雷就玩完了。</li>
<li>国内的站点到绕道国外一圈在回来，不是折腾么。</li>
</ol>


<p>可惜在Mac没能找到那么一款神奇的工具，庆幸的是找到了<a href="http://www.proxycap.com/" title="Proxifier and SSH Tunneler for Windows/Mac OS X">ProxyCap</a>和<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>两款软件，这两款软件的功能类似，都是通过配置规则来指定某些应用程序使用指定的代理访问网络。不管哪种方式，到达的效果是一样的,当两款都是收费软件，提供了30天的使用。经过测试<a href="http://www.proxycap.com/" title="Proxifier and SSH Tunneler for Windows/Mac OS X">ProxyCap</a>无法在Mountian Lion下工作，而且提供的是pkg的安装包，安装完需要重启。<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>可用，下面介绍如何配置。官网提供了30天使用的安装版本下载，dmg的安装过程就直接跳过了。</p>

<h3>配置Proxy</h3>

<p>打开<code>Proxies-&gt;Add</code>,针对本机<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>的配置添加一个代理</p>

<ul>
<li>类型: <code>HTTPS</code></li>
<li>地址: <code>127.0.0.1</code></li>
<li>端口: <code>8087</code></li>
</ul>


<p><img src="http://vangie.github.com/images/post/2012-09-04/Proxies.jpg" alt="Proxy Setting" /></p>

<h3>配置规则</h3>

<p>打开<code>Rules-&gt;Add</code>,添加一个规则，指定<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>使用改成配置的代理上网</p>

<ul>
<li>名称: Tweetbot</li>
<li>应用程序：选择Tweetbot（默认是Any，右下角有一个<code>+</code>可以选择应用程序的位置）</li>
<li>目标主机(Target Hosts): <code>Any</code></li>
<li>目标端口(Target Port): <code>Any</code></li>
<li>行为(Action): <code>Proxy HTTPS 127.0.0.1:8087</code></li>
</ul>


<p><img src="http://vangie.github.com/images/post/2012-09-04/Rules.jpg" alt="Rule Setting" /></p>

<h3>修改DNS设置</h3>

<p>打开 <code>DNS</code>,勾上<code>Resolve hostnames through proxy</code>。
这一步很重要，漏掉了会因为DNS污染导致连接不上。</p>

<p><img src="http://vangie.github.com/images/post/2012-09-04/DNS.jpg" alt="DNS Setting" /></p>

<p>接下打开<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>就可以尽情的Tweet了。在<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>的<code>Connections</code>Tab页能看到链接信息。</p>

<p><img src="http://vangie.github.com/images/post/2012-09-04/Connections.jpg" alt="Connections information" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X将GoAgent位置为后台服务]]></title>
    <link href="http://vangie.github.com/blog/2012/09/03/goagent-run-as-deamon-in-macos-x/"/>
    <updated>2012-09-03T22:22:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/03/goagent-run-as-deamon-in-macos-x</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://code.google.com/p/goagent/" title="GoAgent">GoAgent</a>官方推荐使用<a href="https://goagent.googlecode.com/files/GoAgentMac.dmg" title="GoAgent Mac GUI">GoAgent Mac GUI</a>或者<a href="https://github.com/ohdarling/GoAgentX" title="GoAgentX">GoAgentX</a>作为Mac下的客户端，<a href="https://goagent.googlecode.com/files/GoAgentMac.dmg" title="GoAgent Mac GUI">GoAgent Mac GUI</a>不支持随机启动，图标太难看。<a href="https://github.com/ohdarling/GoAgentX" title="GoAgentX">GoAgentX</a>图标和功能都不错，但是内置的goagent版本不是最新的。所有自己折腾了一下使用Mac下的LaunchAgent机制将goagent配置成自启动的后台服务。</p></blockquote>

<h2>新建plist文件</h2>

<p>在<code>~/Library/LaunchAgents/</code>目录里新建<code>com.googlecode.goagent.plist</code>文件。</p>

<!-- more -->


<p>文件内容如下</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;  
        &lt;true/&gt;
        &lt;key&gt;KeepAlive&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;com.googlecode.goagent&lt;/string&gt;
        &lt;key&gt;NetworkState&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;/usr/bin/python&lt;/string&gt;
            &lt;string&gt;/Users/vangie/Library/goagent-goagent-dcb39d4/local/proxy.py&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;StartCalendarInterval&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;Hour&lt;/key&gt;
            &lt;integer&gt;5&lt;/integer&gt;
            &lt;key&gt;Minute&lt;/key&gt;
            &lt;integer&gt;10&lt;/integer&gt;
        &lt;/dict&gt;
        &lt;key&gt;ServiceDescription&lt;/key&gt;
        &lt;string&gt;goagent Local Service&lt;/string&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>注意<code>/Users/vangie/Library/goagent-goagent-dcb39d4/local/proxy.py</code>根据<a href="http://code.google.com/p/goagent/" title="GoAgent">GoAgent</a>的存放位置做相应的修改。 </p>

<h2>载入并运行该文件</h2>

<pre><code>$ launchctl load ~/Library/LaunchAgents/com.googlecode.goagent.plist
$ launchctl start com.googlecode.goagent
</code></pre>

<p>just enjoy it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress博客设置个性化域名]]></title>
    <link href="http://vangie.github.com/blog/2012/09/02/custom-domain-for-octopress/"/>
    <updated>2012-09-02T20:31:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/02/custom-domain-for-octopress</id>
    <content type="html"><![CDATA[<p>其实挺简单的，官方文档也写的很清晰，不过还是碰到了让人受挫的404错误。</p>

<h2>添加CNAME文件</h2>

<pre><code>echo 'your-domain.com' &gt;&gt; source/CNAME
</code></pre>

<!-- more -->


<h2>修改DNS记录</h2>

<p>然后去域名注册商那里配置DNS记录（本站域名在godaddy注册的，NS记录指向了<a href="https://www.dnspod.cn/" title="DNSPod">DNSPod</a>，国内用户强烈推荐<a href="https://www.dnspod.cn/" title="DNSPod">DNSPod</a>，配置方便，记录变更生效快）。</p>

<h4>顶级域名</h4>

<p>A记录指向 <code>204.232.175.78</code></p>

<h4>二级域名</h4>

<p>CNAME记录指向 <code>[your-username].github.com</code></p>

<h4>若配置多个域名</h4>

<p><code>source/CNAME</code>文件只能有配置一个域名，其他域名通过DNS的CNAME记录指向<code>source/CNAME</code>里配置的域名</p>

<h2>重新发布</h2>

<p>接下来就只需要重新发布一下</p>

<pre><code>rake generate
rake deploy
</code></pre>

<blockquote><p>别忘了<code>rake generate</code>否则使用新域名打开页面可能就会遇上404错误。</p></blockquote>

<h3>参考文献</h3>

<ol>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></li>
<li><a href="https://help.github.com/articles/my-custom-domain-isn-t-working">My custom domain isn&#8217;t working</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何为MacOS X终端设置代理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/02/how-to-set-proxy-for-terminal/"/>
    <updated>2012-09-02T04:06:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/02/how-to-set-proxy-for-terminal</id>
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何在MacOS X终端里使用代理访问网络,虽然只在Mountain Lion下测试，但同样适用于装有Bash的系统。</p></blockquote>

<p>实在无法忍受<a href="http://www.linode.com/" title="linode">linode</a>日本机房的高延迟，动手配置了一个<a href="http://code.google.com/p/goagent/" title="goagent">goagent</a>服务。但是HTTP代理和VPN不同，没法全局代理（<em>至少不能简单配置</em>），在Terminal里下载最新版本的Ruby，奇慢无比，下面介绍如何让Terminal里执行的程序使用<a href="http://code.google.com/p/goagent/" title="goagent">goagent</a>代理。</p>

<!-- more -->


<h3>HTTP代理</h3>

<pre><code>$ export http_proxy='http://YOUR_USERNAME:YOUR_PASSWORD@PROXY_IP:PROXY_PORT/'
</code></pre>

<h3>HTTPS代理</h3>

<pre><code>$ export https_proxy='http://YOUR_USERNAME:YOUR_PASSWORD@PROXY_IP:PROXY_PORT/'
</code></pre>

<h3>例子</h3>

<p>让Terminal里的http访问走<a href="http://code.google.com/p/goagent/" title="goagent">goagent</a>的默认端口8087</p>

<pre><code>$ export http_proxy='http://localhost:8087'
$ export https_proxy='http://localhost:8087'
</code></pre>

<h3>取消代理</h3>

<pre><code>$ unset http_proxy
$ unset https_proxy
</code></pre>

<h4>参考文章</h4>

<ol>
<li><a href="http://www.webupd8.org/2010/10/how-to-set-proxy-for-terminal-quick.html">HOW TO SET A PROXY FOR THE TERMINAL [QUICK LINUX TIP]</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X终端里SSH会话管理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/01/ssh-session-profile-management-in-terminal-of-mac-osx/"/>
    <updated>2012-09-01T23:31:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/01/ssh-session-profile-management-in-terminal-of-mac-osx</id>
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何在终端里使用ssh命令方便的管理常用的ssh访问会话，主要针对MacOS X系统编纂，并在Mountain Lion下测试通过。但是同样适用与安装有Bash终端的*uix系统。</p></blockquote>

<p>虽然windows没有对SSH的原生支持，但是<a href="http://www.netsarang.com/products/xsh_overview.html">XShell</a>和<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="Putty">Putty</a>都挺好用的。日常工作需要维护多台linux服务器，用户名和密码多了记不住，所有非常依赖会话记忆功能。</p>

<!-- more -->


<p>在Mac平台没有找到合适的与<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="Putty">Putty</a>功能类似的软件。可能由于*nix系的操作系统对SSH原生支持，开发者也就没有兴趣去折腾桌面软件，当然也可能是有好的，只是没有找到。</p>

<p>在Terminal里使用SSH便捷登录需要解决三个问题</p>

<ul>
<li>免密码</li>
<li>别名快捷登录</li>
<li>自动补全</li>
</ul>


<h2>免密码</h2>

<p>SSH有两种验证方式：密码和非对称密钥。虽然相比密码来说，非对称密钥的安全性会低一些<em>（某用户拥有你本地root权限，可能就可以操作你的远程服务器，当然密钥本身也设置有密码）</em>，但是这种与系统绑定的信任机制给无人值守的远程拷贝和系统备份提高了便利。</p>

<p>配置步骤如下：</p>

<ol>
<li><p><strong>创建密钥对</strong></p>

<p>开启终端并执行</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>依照提示完成即可，然后将<code>id_rsa</code>和<code>id_rsa.pub</code>文件拷贝到<code>~/.ssh/</code>目录。</p></li>
<li><p><strong>拷贝公钥到远程服务器</strong></p>

<p>需要将公钥<code>id_rsa.pub</code>的内容拷贝到远程服务器<code>~/.ssh/authorized_keys</code>文件里。该文件里可能不存在，需要新建。若该文件已经存在，里面可能有其他用户添加的公钥，所以需要将公钥<code>id_rsa.pub</code>的内容追加在文件尾部(独立成行)，而不是覆盖该文件.</p>

<ul>
<li><p>若<code>authorized_keys</code>已存在</p>

<pre><code>cat ~/.ssh/id_rsa.pub | ssh username@example.com "cat - &gt;&gt; ~/.ssh/authorized_keys"      
</code></pre></li>
<li><p>若<code>authorized_keys</code>不存在</p>

<pre><code>scp ~/.ssh/id_rsa.pub username@example.com:~/.ssh/authorized_keys
</code></pre></li>
</ul>
</li>
<li><p>[可选] <strong>提高系统安全性</strong></p>

<pre><code> chmod 0600 ~/.ssh/authorized_keys
</code></pre></li>
</ol>


<h2>别名快捷登录</h2>

<p>SSH可以在<code>/etc/ssh_config</code>或者<code>~/.ssh/config</code>文件里给远程连接主机配置别名。相当与Putty里的会话管理。</p>

<p>在<code>~/.ssh/config</code>里添加如下配置</p>

<pre><code>Host dv
    HostName example.com
    User domainuser
</code></pre>

<p>然后在终端里执行<code>ssh dv</code>，就相当于<code>ssh domainuser@example.com</code></p>

<p>至此，已经可以在命令行里实现类似<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="Putty">Putty</a>里免密码快捷登录了。但是随着<code>~/.ssh/config</code>里服务器别名项的增多，或者某些服务器长期不用，别名记不起来了。当然使用<code>cat</code>和<code>grep</code>命令可以轻松搞定。如果<code>ssh</code>命令能如<code>ls</code>命令有自动补全就好了。这个真可以有。</p>

<h2>自动补全</h2>

<p>往<code>~/.bash_profile</code>文件末尾追加如下行</p>

<pre><code>complete -W "$(echo `cat ~/.ssh/config | grep 'Host '| cut -f 2 -d ' '|uniq`;)" ssh
</code></pre>

<p>重启终端，<code>ssh + TAB</code>是不是很酷。</p>

<h4>参考文献</h4>

<ol>
<li><a href="http://smbjorklund.no/ssh-login-without-password-using-os-x">SSH login without password using OS X</a></li>
<li><a href="http://ccn.ucla.edu/wiki/index.php/Creating_SSH_Shortcuts_Using_SSH_Config">Creating SSH Shortcuts Using SSH Config</a></li>
<li><a href="http://www.commandlinefu.com/commands/view/2759/ssh-autocomplete">ssh autocomplete</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
