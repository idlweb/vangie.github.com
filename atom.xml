<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Life]]></title>
  <link href="http://vangie.github.com/atom.xml" rel="self"/>
  <link href="http://vangie.github.com/"/>
  <updated>2013-06-25T23:59:47+08:00</updated>
  <id>http://vangie.github.com/</id>
  <author>
    <name><![CDATA[Vangie Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS 6.4升级Git]]></title>
    <link href="http://vangie.github.com/blog/2013/06/25/upgrade-git-on-centos-6-4/"/>
    <updated>2013-06-25T23:42:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/06/25/upgrade-git-on-centos-6-4</id>
    <content type="html"><![CDATA[<blockquote><p>GitHub和许多Git服务依赖的Git版本不低于1.7.10，而CentOS 6.4通过epel安装的git版本为1.7.1。rpmforge源里的二进制包比epel更新，本文介绍如果通过epel源升级git到1.7.11版本。</p></blockquote>

<h3>安装rpmforge源</h3>

<pre><code># rpm -i http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
</code></pre>

<p>安装证书</p>

<pre><code># rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt
</code></pre>

<p>更新rpmforge-extra源</p>

<pre><code># yum --enablerepo=rpmforge-extras update
</code></pre>

<!-- more -->


<h3>安装Git</h3>

<p>插槽可用的git模块</p>

<pre><code># yum --enablerepo=rpmforge-extras provides git
</code></pre>

<p>安装git-1.7.11</p>

<pre><code># yum --enablerepo=rpmforge-extras install git-1.7.11.3-1.el6.rfx.x86_64 
</code></pre>

<p>原来的1.7.1版本的git会被覆盖</p>

<pre><code># git --version
</code></pre>

<h3>参看资料</h3>

<p>[1]. <a href="http://www.charlestonsw.com/update-git-on-centos-6-3/">Update Git On CentOS 6.3</a> <br/>
[2]. <a href="http://www.tecmint.com/install-and-enable-rpmforge-repository-in-rhel-centos-6-5-4/">Install and Enable RPMForge Repository in RHEL/CentOS 6, 5, 4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 6下配置PPTP VPN客户端]]></title>
    <link href="http://vangie.github.com/blog/2013/06/25/setup-pptp-vpn-client-in-centos-6/"/>
    <updated>2013-06-25T21:34:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/06/25/setup-pptp-vpn-client-in-centos-6</id>
    <content type="html"><![CDATA[<blockquote><p>国内网络环境下载rubygems那叫一个痛苦，最近把https改成http也不好用了。百般无耐，考虑在服务器环境下装个PPTP Client连接国外的PPTPD服务。</p></blockquote>

<h3>安装pptp和pptp-setup</h3>

<p>pptp就不用解释了，pptp-setup是一个设置脚本，通过该脚本可以使用方便地进行初始化设置，生成配置文件。</p>

<pre><code># yum install pptp pptp-setup
</code></pre>

<h3>创建配置</h3>

<pre><code># pptpsetup --create codelife --server vpn.codelife.me \
--username codelife --password me --encrypt
</code></pre>

<!-- more -->


<p>若报如下错误</p>

<pre><code>FATAL: Module ppp_mppe not found.
/usr/sbin/pptpsetup: couldn't find MPPE support in kernel.
</code></pre>

<p>则需要执行</p>

<pre><code># modprobe ppp_mppe
</code></pre>

<p>向内核注册ppp_mppe模块</p>

<h3>连接VPN</h3>

<pre><code># pppd call codelife
</code></pre>

<h4>验证连接情况</h4>

<p>然后通过如下命令验证连接情况</p>

<pre><code># ip a |grep ppp
</code></pre>

<h4>排错</h4>

<p>如果上面命令没有任何返回，则说明连接失败了，可以参看<strong>/var/log/message</strong>文件了解错误的原因</p>

<pre><code># tail -f /var/log/message | grep ppp
</code></pre>

<h5>服务端不支持MPPE</h5>

<p>若错误为</p>

<pre><code>MPPE required but peer negotiation failed
</code></pre>

<p>说明服务端不支持MPPE加密，pptpsetup时不需要使用&#8211;encrypt选项。可以手工修改<strong>/etc/ppp/peers/codelife</strong>文件</p>

<pre><code># vim /etc/ppp/peers/codelife
</code></pre>

<p>去除或者注释掉require-mppe-128</p>

<h5>客户端不支持MPPE</h5>

<p>若错误为</p>

<pre><code>LCP terminated by peer (MPPE required but peer refused)
</code></pre>

<p>说明服务端要求MPPE加密，但是客户端不支持，pptpsetup时漏掉了&#8211;encrypt选项。解决方法正好相反，往<strong>/etc/ppp/peers/codelife</strong>文件添加一行require-mppe-128</p>

<h3>配置路由表</h3>

<p>连接成功后，通过route命令可参看路由表信息</p>

<pre><code># route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.0.1     0.0.0.0         255.255.255.255 UH    0      0        0 ppp0
192.168.228.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0
0.0.0.0         192.168.228.153 0.0.0.0         UG    0      0        0 eth0
</code></pre>

<p>可见，只添加了一条访问192.168.0.1 IP的路由信息。</p>

<h4>访问特定网段</h4>

<p>假设你想让登陆VPN服务器的客户端互相访问，那么，你需要在客户端上加入192.168.0.0网段，即：</p>

<pre><code># route add -net 192.168.0.0 netmask 255.255.255.0 dev ppp0
# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.0.1     *               255.255.255.255 UH    0      0        0 ppp0
192.168.228.0   *               255.255.255.0   U     0      0        0 eth0
192.168.0.0     *               255.255.255.0   U     0      0        0 ppp0
default         192.168.228.153 0.0.0.0         UG    0      0        0 eth0
</code></pre>

<p>然后使用ping命令测试</p>

<pre><code># ping 192.168.0.201 -c 3
PING 192.168.0.201 (192.168.0.201) 56(84) bytes of data.
64 bytes from 192.168.0.201: icmp_seq=1 ttl=127 time=90.1 ms
64 bytes from 192.168.0.201: icmp_seq=2 ttl=127 time=57.2 ms
64 bytes from 192.168.0.201: icmp_seq=3 ttl=127 time=61.9 ms

--- 192.168.0.201 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1999ms
rtt min/avg/max/mdev = 57.299/69.794/90.144/14.515 ms
</code></pre>

<p>这里，192.168.0.201是另一台客户端，同样，若希望访问网段也需要加入类似的路由信息。</p>

<h4>全部流量都通过VPN</h4>

<p>如果您想连接VPN后，全部流量都通过VPN出去（翻墙），就像Windows 那样。那么按上面的步骤可能会遇到一些问题。因为，Linux的默认网关只能是一个，所以，这需要分两种情况。</p>

<h5>a）没有默认网关</h5>

<p>这时，你只需设置一个默认路由即可，例如：</p>

<pre><code># route add -net 0.0.0.0 dev ppp0
</code></pre>

<h5>b）已有默认网关</h5>

<p>但更多情况下，默认网关都是存在的。例如，在这里的局域网内部已经设置了默认网关为192.168.228.153，例如：</p>

<pre><code># tracert www.163.com
traceroute to www.163.com (183.60.136.70), 30 hops max, 40 byte packets
1  192.168.228.153 (192.168.228.153)  0.634 ms  0.879 ms  0.879 ms
2  1.64.63.58.broad.gz.gd.dynamic.163data.com.cn (58.63.64.1)  16.410 ms  16.660 ms  17.150 ms
</code></pre>

<p>若像上面那样添加一条路由是不行的，需要先让访问VPN服务端的流量可通过，然后才能转发其他的数据包。</p>

<pre><code># ip route replace 124.248.205.115 via 192.168.228.153 dev eth0 src 192.168.228.135
# ip route replace default dev ppp0
</code></pre>

<p>更新后的路由表：</p>

<pre><code># route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.0.1     0.0.0.0         255.255.255.255 UH    0      0        0 ppp0
124.248.205.115 192.168.228.153 255.255.255.255 UGH   0      0        0 eth0
192.168.228.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0
0.0.0.0         0.0.0.0         0.0.0.0         U     0      0        0 ppp0
</code></pre>

<p>访问路径：</p>

<pre><code># tracert www.163.com
traceroute to www.163.com (183.60.136.70), 30 hops max, 40 byte packets
1  192.168.0.1 (192.168.0.1)  33.461 ms  33.665 ms  33.872 ms
2  switch1.hongkong.exchange.gigelayer.com (124.248.205.188)  35.284 ms  35.558 ms  35.799 ms
3  in.core-rt-003.gi.gi0.3.sunnyvision.com (123.242.225.1)  36.502 ms  36.747 ms  40.479 ms
</code></pre>

<p>当然，关闭连接时，也是需要恢复默认网关的：</p>

<pre><code># ip route del 124.248.205.115 via 192.168.228.153 dev eth0 src 192.168.228.135
# ip route add default via 192.168.228.153
</code></pre>

<h3>关闭连接</h3>

<p><strong>注意：启动连接很简单，但停止不能使用ifconfig pp0 down，否则只是禁用了ppp0网卡，后台连接还是存在的。</strong>当然，可以杀进程(<code>killall pppd</code>)来断开连接。不过，ppp工具包提供了更好用的脚本。但需要您进行一些额外的工作：</p>

<pre><code># cp /usr/share/doc/ppp-2.4.5/scripts/pon /usr/sbin/
# cp /usr/share/doc/ppp-2.4.5/scripts/poff /usr/sbin/
# chmod +x /usr/sbin/pon
# chmod +x /usr/sbin/poff
</code></pre>

<p>然后使用下面的命令启动和关闭连接即可：</p>

<pre><code># pon vpn
# poff vpn
</code></pre>

<h3>参考资料</h3>

<p>[1]. <a href="http://blog.secaserver.com/2012/12/centos-6-install-vpn-pptp-client-simple/">CentOS 6: Install VPN PPTP Client – The Simple Way</a> <br/>
[2]. <a href="http://bbs.chinaunix.net/thread-1597299-1-3.html">CentOS 5.3 配置pptp客户端(非图形界面)</a> <br/>
[3]. <a href="http://www.linuxfly.org/post/641/">Linux 下部署PPTP VPN &#8211; 客户端</a> <br/>
[4]. <a href="http://www.linuxfly.org/post/641/">PPTP Client Diagnosis</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kindle Paperwhite越狱和安装KOReader]]></title>
    <link href="http://vangie.github.com/blog/2013/06/20/jailbreak-kindle-paperwhite-and-install-koreader/"/>
    <updated>2013-06-20T00:42:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/06/20/jailbreak-kindle-paperwhite-and-install-koreader</id>
    <content type="html"><![CDATA[<blockquote><p>亚马逊中国的kindle paperwhite开卖了，与之前坊间谣传的500块的价格相比，849元真的很不给力。正好碰上有个朋友去日本，托人捎了台过来，￥7980，是日元，折合人民币550左右。kindle paperwhite的屏幕已经比较细腻了，翻页时屏幕依然闪烁，电子墨水的通病。但是这个版本的kindle已经内置了光源，一个非常人性化的功能，这么多年以后才加有，不知道亚马逊怎么想的。亚马逊的用户体验那个差呀，不知道是不是老外的思维和我们不一样，反正个人觉得京东和淘宝的页面看上去要顺眼得多。</p></blockquote>

<p>Kindle支持阅读PDF文档，只是效果不怎么好，特别显示扫描版本时。Kindle PaperWhite可以安装第三方的KOReader阅读器改进PDF文档的阅读体验，KOReader支持多种电子书格式，包括DJVU，FB2，EPUB，TXT，CBZ，HTML。在PDF显示方面KOreader得益于开源项目<a href="http://www.willus.com/k2pdfopt/">K2pdfopt</a>。</p>

<p>K2pdfopt也是为了解决PDF文档在小屏幕Kindle上阅读的排版问题而开发的。与其它PDF预处理软件相比，它有很多独一无二的特性，比如自动化程度很高，能够自动识别多栏排版的文档进行分栏，自动去除页面白边，自动对扫描文档进行水平校正，以及最重要的基于图像分割的重排版算法。</p>

<p>K2pdfopt使用完全基于图像处理的方法对文字重新排版，软件处理时会把原始PDF/DJVU页面放大再分割成以词为单位的像素区域，把这些像素区域重新排列到目标宽度的页面中，所以理论上只要能够读取文档的页面像素就可以对其中的文字进行重新排版。这个算法的前提是页面中的文字之间需要有一定的空隙，以提供分割像素区域的位点。</p>

<p>K2pdfopt被移植到Koreader/Kindlepdfviewer以后就可以在阅读时让PDF重新排版。实时重排可以省去电脑上处理PDF的步骤，并且可以在kindle上交互式地微调排版参数，尽可能地生成满意的排版。使用Koreader的重排模式阅读时，软件会自动把当前页和下一页重排版成适应屏幕的尺寸。</p>

<p>安装KOrader需要先越狱，然后安装KPVBooklet。具体步骤如下</p>

<!-- more -->


<h3>Kindle越狱</h3>

<p>Kindle Paperwhite Jailbreak (5.2.0 - 5.3.1,5.3.4,5.3.5)（paperwhite越狱工具不支持5.3.3和5.3.6版本，这些版本的固件需要先进行降级，然后越狱）</p>

<p><strong>如何参看Kindle系统的版本</strong> <br/>
从主页-> 按“菜单”键 -> 然后再按“设置” -> 在设置界面再按“菜单”键 -> 按“设备信息”
<img src="http://vangie.github.com/images/post/2013-06-20/device-info.jpg" alt="设备信息" /></p>

<p>越狱步骤如下：</p>

<ol>
<li><p>用数据线将Kindle连接到电脑上</p></li>
<li><p>下载<a href="http://www.mobileread.com/forums/attachment.php?attachmentid=103175&amp;d=1363715068">kpw_jb.zip</a>文件。（需要翻墙）
讨论原帖地址：http://www.mobileread.com/forums/showthread.php?t=198446</p></li>
<li><p>解压下载好的kpw_jb.zip文件，然后把jailbreak.sh和MOBI8_DEBUG文件拷贝到Kindle根目录，将jailbreak.mobi拷贝到documents目录</p></li>
<li><p>从电脑上安全移除Kindle设备，然后断开数据线</p></li>
<li><p>你将看到一个名为“PaperWhite Jailbreak”的文档在Kindle的主页里。点击打开文档。</p></li>
<li><p>按照提示按住kindle屏幕的左上角不动，直到画面退出桌面。</p></li>
<li><p>回到桌面代表成功了，那本“Paperwhite Jailbreak”的书也不见了，越狱完成。（连接电脑后可以删除documents文件夹中越狱完成后留下个LOG文件，无影响）</p></li>
</ol>


<p>我们进行下一步骤</p>

<h3>安装KPVBooklet</h3>

<p>KPVBooklet使原生系统支持KPV的工具。</p>

<ol>
<li><p>前往 https://code.google.com/p/kpvbooklet-package/downloads/list 下载最新版本的kindle-kpvbooklet-0.4.8.zip</p></li>
<li><p>解压后通过数据线将update_kpvbooklet_0.4.8_install.bin拷贝到kindle根目录，记得安全移除kindle设备和端口数据线.(另一个文件update_kpvbooklet_0.4.8_uninstall.bin用于卸载kpvbooklet此处用不到)</p></li>
<li><p>paperwhite上点击右上角菜单>设置>再点击右上角菜单> 更新您的kindle，一阵读条等待后完成</p></li>
</ol>


<p>终于可以安装KOReader了</p>

<h3>安装KOReader</h3>

<p>KOReader是kindlepdfviewer（KPV）的延续版本，安装方法非常简单，前往https://code.google.com/p/koreader-package/downloads/list下载最新版本koreader-v2013.03-246-gaaeb347.zip。</p>

<p>解压后将“extensions”，“koreader”，“launchpad”三个目录拷贝到kindle根目录即可。</p>

<p>KOReader至此已经安装完成，通过数据线将PDF拷贝到documents目录，然后在kindle的里打开该文件就可以了。pdf的默认阅读器已经是KOReader了。如果希望使用kindle的原生阅读器看pdf文件，可以长按pdf文件，在弹出菜单里选择“前往…”。</p>

<h3>关于升级固件</h3>

<p>目前最新版本的<a href="http://www.amazon.com/gp/help/customer/display.html/ref=hp_left_sib?ie=UTF8&amp;nodeId=201064850">kindle paperwhite固件</a>版本为5.3.6。</p>

<p>将update_kindle_5.3.6.bin放置到根目录然后在设备里点击升级即可。</p>

<p>升级完成以后，需要重新安装<a href="http://www.mobileread.com/forums/showthread.php?t=152294">Kindlet developer certificates</a>和<a href="http://www.mobileread.com/forums/showthread.php?p=2290044">Rescue Pack</a>以恢复越狱效果。</p>

<p>升级后KOReader会失效，重装一遍KPVBooklet即可。</p>

<h3>参考资料</h3>

<p>[1]. <a href="http://www.douban.com/group/topic/36613341/">【越狱，KPV】kindle paperwhite越狱安装KPV教程</a> <br/>
[2]. <a href="http://vislab.bjmu.edu.cn/blog/hwangxin/2012/10/read-scanned-pdfs-with-kindlepdfviewer/">让Kindle支持扫描版PDF重排</a> <br/>
[3]. <a href="http://blog.the-ebook-reader.com/2012/10/28/kindle-paperwhite-tips-and-shortcuts-guide/">Kindle Paperwhite Tips and Shortcuts Guide</a> <br/>
[4]. <a href="http://www.douban.com/group/topic/33931176/">Kindle PaperWhite 45个小技巧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Needham-Schroeder协议]]></title>
    <link href="http://vangie.github.com/blog/2013/06/13/needham-schroeder-protocol/"/>
    <updated>2013-06-13T22:23:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/06/13/needham-schroeder-protocol</id>
    <content type="html"><![CDATA[<blockquote><p>最近学习了一些账户登录和验证相关的知识，了解了OpenId机制的一些技术细节，发现OpenId的验证机制和某些基于Web的SSO验证机制非常类似，但不知道这些验证机制的原型和出处，于是开始转向学习Kerberos - Unix平台上一个老牌的单点登录验证系统。在《Kerberos权威指南》里找到了“Needham-Schroeder协议”,虽然不知道这个协议与其后出现的Web SSO和OpenId有没有渊源，但是学习这个协议对于理解SSO非常有帮助。</p></blockquote>

<h3>借助受信任的第三方相互验证</h3>

<p>《在大型计算机网络中使用加密身份验证》是Roger Needham和Michael Schroeder 1978年在施乐帕罗奥多研究中心（当年乔布斯偷师的地方）工作时发表的一篇论文。该论文讨论了在非安全网络环境下，通讯双方如果借助一个共同信任的第三方相互验证的方法。</p>

<p>协议假设有三方参与，一个客户机，一个应用服务器和一个验证服务器。客户机可以是某台请求验证的机器，通常是个人电脑。服务器提供客户机希望访问的服务，比如邮件服务。而验证服务器是一台专门的服务器，用于存储网络上用户和服务器的密钥（受信任的第三方）。</p>

<!-- more -->


<h3>协议的两个版本</h3>

<ul>
<li><strong>基于对称密钥算法的Needham-Schroeder协议</strong>。Kerberos单点认证系统基于此协议扩展，该协议旨在双方之间在网络上建立会话密钥，以保护之后的通讯。</li>
<li><strong>基于非对称密钥算法的Needham-Schroeder协议</strong>。该协议的目的是提供在网络上通信的双方之间的相互认证，但其建议的形式是不安全的。</li>
</ul>


<p>下面采用安全协议标记法(security protocal notation) 来表示两种不同版本的Needham-Schroeder协议</p>

<h3>对称密钥版本</h3>

<p>假设，Alice（简称A）发起向Bob（简称B）的通信。Server（简称S）一个被双方信任的服务器。</p>

<p>在通信中：</p>

<ul>
<li>A和B分别是Alice和Bob的身份标识</li>
<li>K<sub>AS</sub>是A和S的对称密钥</li>
<li>K<sub>BS</sub>是B和S的对称密钥</li>
<li>N<sub>A</sub>和N<sub>B</sub>分别是A和B生成的随机数nonces</li>
<li>K<sub>AB</sub>是一个生成的对称密钥，将用于A和B之间的会话的会话密钥。</li>
</ul>


<p>步骤如下：    <br/>
1. Alice向服务器发送一条包含她本人和Bob标识的消息，告诉服务器她想和Bob通信。 <br/>
 <img src="http://upload.wikimedia.org/math/1/b/5/1b53543c28f72a2151812f45874f7deb.png" alt="" /> <br/>
2. 该服务器产生K<sub>AB</sub>,并发送回Alice一个副本和一个被K<sub>BS</sub>加密的副本由Alice转交给Bob。由于Alice可能同时发出多份通信验证请求，所有nonce保证响应消息是新的和并与某一请求对应。在响应中加入了Bob的标识以告诉Alice她将与谁共享该密钥。</p>

<p> <img src="http://upload.wikimedia.org/math/6/5/a/65a61e0dc01947d23a57e0ce931977cf.png" alt="" /> <br/>
3. Alice将K<sub>AB</sub>密钥转交给Bob，他能通过K<sub>BS</sub>密钥（他于服务器的共享密钥）解密出该密钥，以验证数据的可靠性。</p>

<p> <img src="http://upload.wikimedia.org/math/2/f/1/2f163c6bc7957588abe99f9fa115740e.png" alt="" /> <br/>
4. 然后Bob想Alice发送一个通过密钥K<sub>AB</sub>随机数nonce，表示他以获得密钥</p>

<p> <img src="http://upload.wikimedia.org/math/3/b/d/3bdb6789891493725b8ebe8e6894f0fd.png" alt="" /> <br/>
5. Alice对接收到的随机数nonce进行简单的操作，重新进行加密，并把它发送回确认她也持有密钥并且仍处于活跃状态。</p>

<p> <img src="http://upload.wikimedia.org/math/e/2/7/e27ecba9e6a2499a8350be598e9ce40b.png" alt="" /></p>

<h4>攻击该协议</h4>

<p>该协议可被回放攻击。如果攻击者使用一个陈旧的被窃取的K<sub>AB</sub>，他可以回放{K<sub>AB</sub>, A}<sub>K<sub>BS</sub></sub>给Blob，Blob不但不知道这个密钥是已过期，反而欣然接收请求。</p>

<h4>改进版本</h4>

<p>Kerberos协议通过加入时间戳改进了这一缺陷。也可以引入随机数nonce。</p>

<ol>
<li><p>Alice向Bob发起请求</p>

<p> <img src="http://upload.wikimedia.org/math/d/e/6/de6d2884e31e5dd8a56cdbecd0379bb9.png" alt="" /></p></li>
<li><p>Bob响应她一个随机数nonce，该随机数被bob和认证服务器的对称密钥加密</p>

<p><img src="http://upload.wikimedia.org/math/e/3/e/e3ecf601c90b6ef52cbd3f3571320c97.png" alt="" /></p></li>
<li><p>Alice发送一个消息给服务器包含自己和鲍勃的标识，告知她想要与Bob通信服务器。</p>

<p><img src="http://upload.wikimedia.org/math/8/b/4/8b497cd33ae923645067291a7891cb2a.png" alt="" /></p></li>
<li><p>注意包含的随机数</p>

<p> <img src="http://upload.wikimedia.org/math/0/6/c/06c9c78b9f91526228116cc30ac66bfc.png" alt="" /></p></li>
</ol>


<p>接下来的3步与上面协议描述的类似。注意N&#8217;<sub>B</sub>不同于N<sub>B</sub>。新包含的随机数可以防止回放被窃取的{K<sub>AB</sub>, A}<sub>K<sub>BS</sub></sub>,由于新的消息格式为{K<sub>AB</sub>, A, N&#8217;<sub>B</sub>}<sub>K<sub>BS</sub></sub>,攻击者无法伪造，因为他得不到K<sub>BS</sub>密钥。</p>

<h3>非对称密钥版本</h3>

<p>该版本使用了公钥加密算法
假设，Alice（简称A）和Bob（简称B）都使用信任的服务器（简称S）发布的公钥用于请求。
这些密钥是：</p>

<ul>
<li>K<sub>PA</sub>和K<sub>SA</sub>，分别表示A的公钥和私钥对。其中（S表示“Secret Key”）</li>
<li>K<sub>PB</sub>和K<sub>SB</sub>，是B的密钥对。</li>
<li>K<sub>PS</sub>和K<sub>SS</sub>，是S的密钥对。</li>
</ul>


<p>协议的步骤是：</p>

<ol>
<li><p>A向S请求B的公钥</p>

<p> <img src="http://upload.wikimedia.org/math/5/7/2/57211ef0e2f43a95e8346290887e8da3.png" alt="" /></p></li>
<li><p>S响应B的标识和公钥，并使用自己的私钥加密数据，以便A验证自己。</p>

<p> <img src="http://upload.wikimedia.org/math/5/5/5/5556de3bf2768c8b3dd97e99cde6fe4c.png" alt="" /></p>

<ol>
<li>A引入随机数N<sub>A</sub>,然后发送给B</li>
</ol>


<p> <img src="http://upload.wikimedia.org/math/c/6/0/c60110a492a0096f31fa91b8ece8d4a6.png" alt="" /></p></li>
<li><p>B向S请求A的公钥</p>

<p> <img src="http://upload.wikimedia.org/math/e/6/b/e6bd04eb3d4a5f2462b9642954955443.png" alt="" /></p></li>
<li><p>S的响应</p>

<p> <img src="http://upload.wikimedia.org/math/b/3/1/b31c9fc795a424d490ca573f2aedd7ec.png" alt="" /></p></li>
<li><p>B引入随机数N<sub>B</sub>和N<sub>A</sub>使用K<sub>PA</sub>加密后发送给A，以证明他的能力。</p>

<p> <img src="http://upload.wikimedia.org/math/3/3/5/33583fcf1b33ad5e83c914ef6c529530.png" alt="" /></p></li>
<li><p>A发回确认请求包含N<sub>B</sub>，以证明他能使用K<sub>SA</sub>解密</p>

<p> <img src="http://upload.wikimedia.org/math/3/1/e/31e07ae0859dd58e24473fc5c720531b.png" alt="" /></p></li>
</ol>


<p>最后，A和B双方相互确认，也都知道随机数N<sub>A</sub>和N<sub>B</sub>。这些随机数不为窃听者所知。</p>

<h4>攻击该协议</h4>

<p>遗憾的是，该协议可被中间人攻击。如果一个骗子能说服A向他发起会话，然后他将消息传输给B，让B误以为在与A进行通信。</p>

<p>下面攻击的过程忽略了与S的通信，因为没有差异：</p>

<ol>
<li><p>A向I发送N<sub>A</sub>，使用I的公钥K<sub>SI</sub></p>

<p> <img src="http://upload.wikimedia.org/math/a/d/b/adbe524547c2d654be815394f719404f.png" alt="" /></p></li>
<li><p>I将消息转发给B，假装A在于他进行通信</p>

<p> <img src="http://upload.wikimedia.org/math/e/b/1/eb11f142798ea5b44a5bd5a93165ac98.png" alt="" /></p></li>
<li><p>B发回B<sub>N</sub></p>

<p> <img src="http://upload.wikimedia.org/math/c/d/3/cd3499b767d1e4a062fb2615e8b0d48d.png" alt="" /></p></li>
<li><p>I转发给A</p>

<p> <img src="http://upload.wikimedia.org/math/f/7/a/f7a0bee8365d9378cac7774608f2d0d8.png" alt="" /></p></li>
<li><p>加密的B<sub>N</sub>被发回，向I确认。</p>

<p> <img src="http://upload.wikimedia.org/math/3/c/e/3ce745fbe7e751c6d3f8442fecfa915b.png" alt="" /></p></li>
<li><p>I重新加密B<sub>N</sub>，向B假装他成功解密了。</p>

<p> <img src="http://upload.wikimedia.org/math/8/f/d/8fd48867959a9886843676ab3364be90.png" alt="" /></p></li>
</ol>


<p>最后，B错误的以为A在与他进行通信，随机数N<sub>A</sub>和N<sub>B</sub>仅仅被A和B知道。</p>

<h4>防止中间人攻击</h4>

<p>这个攻击方法是1995年Gavin Lowe在他的一篇论文中首次提出。文中还提供了该协议的一个修复版本，被称作Needham–Schroeder–Lowe协议。修复版本修改了第六步的消息。</p>

<p><img src="http://upload.wikimedia.org/math/3/3/5/33583fcf1b33ad5e83c914ef6c529530.png" alt="" /></p>

<p>改为：</p>

<p><img src="http://upload.wikimedia.org/math/c/5/8/c58c49f7dc501dc733a4053f88ce245f.png" alt="" /></p>

<h3>参考资料</h3>

<p>[1]. 《<a href="http://shop.oreilly.com/product/9780596004033.do">Kerberos:The Definitive Guide</a>》by Jason Garman August 2003  <br/>
[2]. 《<a href="http://jmiller.uaa.alaska.edu/cse465-fall2012/papers/needham1978.pdf">Using Encryption for Authentication in Large Networks of Computers</a>》Roger M.Needham and Michael D. Schroeder 1978 <br/>
[3]. <a href="http://en.wikipedia.org/wiki/Needham%E2%80%93Schroeder_protocol">Needham–Schroeder protocol</a> from Wikipedia <br/>
[4]. <a href="http://en.wikipedia.org/wiki/Security_protocol_notation">Security protocol notation</a> from Wikipeida</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用NodeJs开发微信公众平台账号]]></title>
    <link href="http://vangie.github.com/blog/2013/04/23/developing-wechat-public-platform-with-nodejs/"/>
    <updated>2013-04-23T16:25:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/04/23/developing-wechat-public-platform-with-nodejs</id>
    <content type="html"><![CDATA[<blockquote><p>微信越来越火，信息、语音短信、视频电话等非常实用OTT业务加上QQ好友和通讯录的导入一时间吸引了大量的用户。前段时间各大运营商开始吵着要收微信的费用。所谓“发现即晚期”，当运营商发现苗条不对的时候，已经来不及了。微信除了提供了好用的通讯替代功能，还是一个可扩展的平台，比如：微信公众平台，一种账号层面的扩展，可以理解为一种微信的公众账号区别于个人账号，通常可作为一种的资讯发布渠道，也可被实现成机器人程序与用户互动。本文介绍如何基于微信公众平台的Open API使用NodeJs开发一个HelloWord程序。</p></blockquote>

<!-- more -->


<h3>开启开发模式</h3>

<p>前往http://mp.weixin.qq.com 注册一个公众平台账号，注册过程与通常无异。激活并登录账号，前往【高级功能】开启【开发模式】（开启之前要确保头像已上传）。</p>

<h4>接口配置信息</h4>

<p>接口配置信息用于公众平台与应用程序之间相互验证。
假设配置信息如下</p>

<pre><code>URL:    http://mydomain.com/weixin
Tokan:  balabala
</code></pre>

<p>在提交该信息之前需要先保证该URL已经可访问，</p>

<h3>使用ExpressJs编写一个WebServer</h3>

<h4>server.js</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//setup Dependencies</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">weixin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./lib/weixin&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">xmlBodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./lib/xmlBodyParser&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">port</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">80</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Setup Express</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">xmlBodyParser</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">({</span> <span class="nx">secret</span><span class="o">:</span> <span class="s2">&quot;shhhhhhhhh!&quot;</span><span class="p">}));</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/static&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="s1">&#39;mydomain.com&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Setup Socket.IO</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Client Connected&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;server_message&#39;</span><span class="p">,</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;server_message&#39;</span><span class="p">,</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Client Disconnected.&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/weixin&#39;</span><span class="p">,</span> <span class="nx">weixin</span><span class="p">.</span><span class="nx">doGet</span><span class="p">);</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/weixin&#39;</span><span class="p">,</span> <span class="nx">weixin</span><span class="p">.</span><span class="nx">doPost</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Listening on http://mydomain.com:&#39;</span> <span class="o">+</span> <span class="nx">port</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>lib/xmlBodyParser.js</h4>

<p>这是一个处理xml请求的工具包，expressJs默认值不解析MIME类型为text/xml类型的请求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">xml2js</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;xml2js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mime</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;content-type&#39;</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">xmlBodyParser</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">_body</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ignore GET</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;GET&#39;</span> <span class="o">==</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span> <span class="o">||</span> <span class="s1">&#39;HEAD&#39;</span> <span class="o">==</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// check Content-Type</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;text/xml&#39;</span> <span class="o">!=</span> <span class="nx">mime</span><span class="p">(</span><span class="nx">req</span><span class="p">))</span> <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// flag as parsed</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">_body</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// parse</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">setEncoding</span><span class="p">(</span><span class="s1">&#39;utf8&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">){</span> <span class="nx">buf</span> <span class="o">+=</span> <span class="nx">chunk</span> <span class="p">});</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">parseString</span> <span class="o">=</span> <span class="nx">xml2js</span><span class="p">.</span><span class="nx">parseString</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">parseString</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">json</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>lib/weixin.js</h4>

<p>处理来自微信公众平台的get和post请求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">almanac</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./almanac&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;crypto&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">xmlbuilder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;xmlbuilder&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">doGet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">checkSource</span><span class="p">(</span><span class="nx">req</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">echostr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">doPost</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">checkSource</span><span class="p">(</span><span class="nx">req</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">xml</span> <span class="o">=</span> <span class="nx">buildXml</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">FromUserName</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">ToUserName</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xml</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">ele</span><span class="p">(</span><span class="s1">&#39;Content&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">dat</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xml</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="s1">&#39;text/xml&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">xml</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">checkSource</span><span class="p">(</span><span class="nx">req</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">signature</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">signature</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">timestamp</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">nonce</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">nonce</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">shasum</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;balabala&#39;</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">shasum</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">),</span><span class="s1">&#39;utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">shasum</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="nx">signature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">buildXml</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">msgType</span><span class="p">,</span> <span class="nx">funFlag</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">xml</span> <span class="o">=</span> <span class="nx">xmlbuilder</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s1">&#39;xml&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">ele</span><span class="p">(</span><span class="s1">&#39;ToUserName&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">dat</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">up</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">ele</span><span class="p">(</span><span class="s1">&#39;FromUserName&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">dat</span><span class="p">(</span><span class="nx">from</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">up</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">ele</span><span class="p">(</span><span class="s1">&#39;CreateTime&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">txt</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getMilliseconds</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">up</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">ele</span><span class="p">(</span><span class="s1">&#39;MsgType&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">dat</span><span class="p">(</span><span class="nx">msgType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">up</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">xml</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">xml</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">ele</span><span class="p">(</span><span class="s1">&#39;FuncFlag&#39;</span><span class="p">,{},</span><span class="nx">funFlag</span><span class="p">).</span><span class="nx">end</span><span class="p">({</span><span class="nx">pretty</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参阅</h3>

<ol>
<li><a href="http://www.tfan.org/using-xml2js-for-express-body-parser/">如何让 Node-express 支持 XML 形式的 POST 请求？</a></li>
<li><a href="https://gist.github.com/davidkrisch/2210498">Express-Node: Accepting POST with Content-Type: application/xml</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gfwlist转换成PAC文件]]></title>
    <link href="http://vangie.github.com/blog/2013/04/06/convert-gfwlist-to-pac/"/>
    <updated>2013-04-06T12:12:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/04/06/convert-gfwlist-to-pac</id>
    <content type="html"><![CDATA[<blockquote><p>iOS翻墙依赖于PAC文件，PAC文件里制定了一系列的规则用于智能判断某些流量是否需要走代理，这样就可以避免代理访问国内站点较慢的问题。</p></blockquote>

<h2>如何获得PAC</h2>

<ol>
<li>SwitchSharp里导出</li>
<li>从站点<a href="https://autoproxy2pac.appspot.com/">AutoProxy2PAC</a>定制下载或者直接引用</li>
<li>使用工具将gfwlist转换成PAC，如<a href="https://github.com/JinnLynn/GenPAC">JinnLynn/GenPAC</a></li>
</ol>


<h2>支持多重代理的PAC</h2>

<p>上面3中方法获得代理文件都只支持配置一种代理方法。不使用于本人上篇博文<a href="http://codelife.me/blog/2013/04/04/mixing-goagent-and-ssh-forwarding-on-iso-6/">iOS6里GoAgent和SSH Forwarding共用</a>里依赖的PAC文件。
形如：</p>

<pre><code>function FindProxyForURL(url, host) {
    return "DIRECT; PROXY 192.168.1.1:3128; SOCKS5 lilinux.net:1080"; 
}
</code></pre>

<h2>gfwlist2pac</h2>

<p>在项目<a href="https://github.com/JinnLynn/GenPAC">JinnLynn/GenPAC</a>的基础上，本人编写了一个<a href="https://github.com/vangie/gfwlist2pac">gfwlist2pac</a>工具，支持如下功能：</p>

<ul>
<li>代理规则基于<a href="http://autoproxy-gfwlist.googlecode.com">gfwlist</a></li>
<li>允许通过代理获得gfwlist</li>
<li>支持用户自定义规则</li>
<li>运行配置多重代理</li>
</ul>


<!--more-->


<h3>修改配置</h3>

<p>编辑<code>gfwlist2pac.cfg</code>文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; 配置
</span><span class='line'>
</span><span class='line'>[config]
</span><span class='line'>; gfwlist地址
</span><span class='line'>;gfwUrl = http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt
</span><span class='line'>
</span><span class='line'>; 访问gfwlist使用的代理
</span><span class='line'>; 格式 PROXY|SOCKS|SOCKS5 [username:password@]hostname:port
</span><span class='line'>; 'PROXY' 表示使用HTTP代理
</span><span class='line'>; 'SOCKS' 表示使用SOCKS4代理
</span><span class='line'>; 'SOCKS5' 表示使用SOCKS5代理
</span><span class='line'>;gfwProxy = SOCKS5 127.0.0.1:7070
</span><span class='line'>
</span><span class='line'>; 用于PAC规则的代理
</span><span class='line'>; 格式 DIRECT|((PROXY|SOCKS|SOCKS5) hostname:port) [[; DIRECT|((PROXY|SOCKS|SOCKS5) hostname:port)] ...]
</span><span class='line'>; 'DIRECT' 表示不使用代理
</span><span class='line'>; 'PROXY' 表示使用HTTP代理
</span><span class='line'>; 'SOCKS' 表示使用SOCKS4代理
</span><span class='line'>; 'SOCKS5' 表示使用SOCKS5代理
</span><span class='line'>; 多种连接方法使用';'隔开，系统会依次尝试，直到连通
</span><span class='line'>; 注意：如果是在MAC下的SOCKS代理，必须设置成SOCKS5,在IOS下SOCKS4和SOCKS5代理都使用SOCKS
</span><span class='line'>;pacProxy = DIRECT; SOCKS 127.0.0.1:7070; PROXY 127.0.0.1:8087
</span><span class='line'>
</span><span class='line'>; 生成的PAC文件名 默认 autoproxy.pac
</span><span class='line'>;pacFilename = autoproxy.pac
</span><span class='line'>
</span><span class='line'>; 调试模式
</span><span class='line'>debug = True</span></code></pre></td></tr></table></div></figure>


<h3>自定义规则</h3>

<p>编辑<code>gfwlist2pac.rules</code>文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>! 用户自定义的代理规则
</span><span class='line'>! 
</span><span class='line'>! 语法与gfwlist相同，即AdBlock Plus过滤规则
</span><span class='line'>!
</span><span class='line'>! 简单说明如下：
</span><span class='line'>! 通配符支持，如 *.example.com/* 实际书写时可省略* 如.example.com/ 意即*.example.com/* 
</span><span class='line'>! 正则表达式支持，以\开始和结束， 如 \[\w]+:\/\/example.com\
</span><span class='line'>! 例外规则 @@，如 @@*.example.com/* 满足@@后规则的地址不使用代理
</span><span class='line'>! 匹配地址开始和结尾 |，如 |http://example.com、example.com|分别表示以http://example.com开始和以example.com结束的地址
</span><span class='line'>! || 标记，如 ||example.com 则http://example.com、https://example.com、ftp://example.com等地址均满足条件
</span><span class='line'>! 注释 ! 如 ! Comment
</span><span class='line'>!
</span><span class='line'>! 更详细说明 请访问 http://adblockplus.org/en/filters
</span><span class='line'>!
</span><span class='line'>! 配置该文件时需谨慎，尽量避免与gfwlist产生冲突，
</span><span class='line'>! 或将一些本不需要代理的网址添加到代理列表
</span><span class='line'>! 可用test目录工具进行网址测试
</span><span class='line'>! 
</span><span class='line'>
</span><span class='line'>! Tip: 在最终生成的PAC文件中，用户定义规则先于gfwlist规则被处理
</span><span class='line'>!      因此可以在这里添加一些常用网址规则，或能减少在访问这些网址进行查询的时间
</span><span class='line'>!      如:
</span><span class='line'>@@sina.com
</span><span class='line'>@@163.com
</span><span class='line'>twitter.com
</span><span class='line'>youtube.com</span></code></pre></td></tr></table></div></figure>


<h3>生成Pac文件</h3>

<p>在命令行执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python gfwlist2pac.py
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6里GoAgent和SSH Forwarding共用]]></title>
    <link href="http://vangie.github.com/blog/2013/04/04/mixing-goagent-and-ssh-forwarding-on-iso-6/"/>
    <updated>2013-04-04T22:15:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/04/04/mixing-goagent-and-ssh-forwarding-on-iso-6</id>
    <content type="html"><![CDATA[<blockquote><p>入了一台iPhone5联通合约机，可惜iOS 6.1.3无法越狱了，庆幸内置系统版本6.1.2，Alfred调出evasi0n.app,果断越狱了。本文介绍在iOS6里整合Goagent和SSH forwarding两种方式翻越长城。</p></blockquote>

<!-- more -->


<h2>在安装GoAgent for iOS</h2>

<p>根据<a href="https://code.google.com/p/goagent/wiki/GoAgent_IOS" title="GoAgent官方iOS客户端安装教程">GoAgent官方iOS客户端安装教程</a></p>

<h3>前提条件</h3>

<ul>
<li>越狱</li>
<li>已经部署GoAgent服务端</li>
<li>将Cydia切换为<code>开发者</code>模式：Cydia->管理->设置->开发者</li>
</ul>


<h3>步骤</h3>

<ol>
<li>Cydia里添加源 http://repo.goagent.org/cydia</li>
<li>在Cydia里安装goagent-ios和goagent-widget,iFile</li>
<li>设置Proxy.ini里的appid

<ul>
<li>打开GoAgent for iOS.app，点击Edit File,如果有弹出菜单，先取消，找到<code>proxy.ini</code>文件，点击右边的箭头，在弹出的新页面里找到<code>打开方式…</code>，选<code>文本编辑器</code>,点击左边的<code>编辑</code>，然后将appid= goagent改成你server的appid</li>
</ul>
</li>
<li>安装CA.crt

<ul>
<li>在浏览器里打开 https://goagent.googlecode.com/files/CA.crt 然后安装</li>
</ul>
</li>
<li>开启通知中心GoAgent控件

<ul>
<li>设置 -> 通知 -> goagent-widget</li>
</ul>
</li>
<li>设置PAC

<ul>
<li>设置 -> Wi-Fi -> CurrentWiFi -> HTTP Proxy -> Auto -> http://127.0.0.1:8086/8086.pac</li>
<li>或者在GoAgent for iOS设置页里点击“Change System Proxy”</li>
</ul>
</li>
<li>打开Facebook测试一下</li>
</ol>


<h2>配置SSH Forwarding</h2>

<p>这部有许多shell操作，Cydia里mobile terminal提供了一个可用的Shell。但是使用起来很不方便，通过SSH远程登录到iPhone借助电脑的全键盘更加便利。</p>

<h3>SSH登录到iPhone</h3>

<ol>
<li>Cydia里安装OpenSSH</li>
<li>设置 -> Wi-Fi -> CurrentWiFi 参看IP地址(假设：192.168.2.107)</li>
<li>Mac OS里打开Bash输入<code>ssh root@192.168.2.107</code>，密码：alpine</li>
</ol>


<h3>免密码SSH登录远程服务器</h3>

<p>详细步骤和说明参看<a href="http://codelife.me/blog/2012/09/01/ssh-session-profile-management-in-terminal-of-macos-x/">MacOS X终端里SSH会话管理</a></p>

<ol>
<li>切换到mobie账户

<ul>
<li><code>su - mobile</code></li>
</ul>
</li>
<li>创建密钥对

<ul>
<li><code>ssh-keygen -t rsa</code></li>
</ul>
</li>
<li>拷贝公钥到远程服务器

<ul>
<li><p>若authorized_keys已存在</p>

<p>  cat ~/.ssh/id_rsa.pub | ssh username@example.com &#8220;cat - >> ~/.ssh/authorized_keys&#8221;`</p></li>
<li>若authorized_keys不存在
  scp ~/.ssh/id_rsa.pub username@example.com:~/.ssh/authorized_keys</li>
</ul>
</li>
<li><p>别名登录</p>

<ul>
<li><p>在<code>~/.ssh/config</code>里添加如下配置</p>

<p>  Host example</p>

<pre><code>  HostName example.com
  User username
  Port 22
</code></pre></li>
</ul>
</li>
<li><p>测试</p>

<ul>
<li><code>ssh example</code>能登录到远程主机即表示成功</li>
</ul>
</li>
</ol>


<h3>断线重连</h3>

<ol>
<li>编辑iOS下<code>/etc/ssh/ssh_config</code>

<ul>
<li>添加一行<code>ServerAliveInterval 10</code></li>
</ul>
</li>
<li>Cydia安装automatic ssh

<ul>
<li>使用<code>autossh -M 0 -D 9090 -Nfq example</code>开启SOCKS5代理服务，该命令会立即返回并且后台执行。</li>
</ul>
</li>
</ol>


<h3>创建一个兼容GoAgent和SSH Forwarding的PAC文件</h3>

<p>pac可以指定多个代理</p>

<pre><code>function FindProxyForURL(url, host) {
    return "DIRECT; PROXY 192.168.1.1:3128; SOCKS5 lilinux.net:1080"; 
}
</code></pre>

<p>上面语句的意思是：</p>

<ol>
<li>对所有URL，都直接连接；</li>
<li>如果不能直接连接，那么就使用192.168.1.1:3128这个http代理连接；</li>
<li>如果还是不能连接，则使用lilinux.net:1080这个socks5代理连接。<br/>
于是我们可以构造出<code>SOCKS 127.0.0.1:9090; PROXY 127.0.0.1:8087</code>让SSH Forwarding和GoAgent同时工作。(注意这里不能使用<code>SOCKS5</code>,iOS无法识别，只能用<code>SOCKS</code>)</li>
</ol>


<p>于是需要将GoAgent for iOS里的proxy.pac文件修改一下。</p>

<ol>
<li><p>将proxy.pac拷贝到本地</p>

<p> scp root@192.168.2.107:/Applications/goagent-ios.app/goagent-local/proxy.pac autoproxy.pac</p></li>
<li>编辑autoproxy.pac

<ol>
<li>在行首加入<code>var D='DIRECT',P='SOCKS 127.0.0.1:9090; PROXY 127.0.0.1:8087'</code></li>
<li>将所有的<code>"DIRECT"</code>和<code>'DIRECT'</code>替换成<code>D</code></li>
<li>将所有的<code>"PROXY 127.0.0.1:8087"</code>和<code>'PROXY 127.0.0.1:8087'</code>替换成<code>P</code></li>
</ol>
</li>
<li><p>将修改过的autoproxy.pac拷贝到<code>/var/root</code>目录</p>

<p> scp autoproxy.pac root@192.168.2.107:/var/root</p></li>
<li><p>重新设定WiFi的Pac</p>

<ul>
<li>设置 -> Wi-Fi -> CurrentWiFi -> HTTP Proxy -> Auto -> file:///var/root/autoproxy.pac</li>
</ul>
</li>
<li><p>让GPRS/EDGE/3G流量支持Pac
使用iFile编辑<code>/private/var/preferences/systemconfiguration/preferences.plist</code></p>

<pre><code>Interface = {
    DeviceName = "ip1";
    Hardware = "com.apple.CommCenter";
    Type = "com.apple.CommCenter";
    UserDefinedName = "com.apple.CommCenter (ip1)";
};
Proxies = {
    ProxyAutoConfigEnable = 1;
    ProxyAutoConfigURLString = "file:///var/root/pac";
};
UserDefinedName = "com.apple.CommCenter (ip1)";
</code></pre>

<p>加入Proxies块，（注意：从前版本preferences.plist是xml格式，新的文件采用了JSON格式）重启后生效。</p></li>
</ol>


<h2>启动</h2>

<ol>
<li>启动GoAgent有两种方法

<ol>
<li>在通知菜单启动 最方便</li>
<li>通过GoAgent for iOS.app启动</li>
</ol>
</li>
<li>启动SSH Forwarding，启动命令为<code>autossh -M 0 -D 9090 -Nfq example</code>其中example为host的别名

<ul>
<li>Mac OS远程登录启动（这个？没有电脑不就没戏了）</li>
<li>mobile terminal启动

<ol>
<li>Cydia里安装mobile terminal</li>
<li>在mobile terminal里设定shortcut Menu可以快捷输入</li>
</ol>
</li>
</ul>
</li>
</ol>


<h2>参考文献</h2>

<ol>
<li><a href="https://code.google.com/p/goagent/wiki/GoAgent_IOS" title="GoAgent官方iOS客户端安装教程">GoAgent官方iOS客户端安装教程</a></li>
<li><a href="http://catty-house.blogspot.jp/2012/10/ios-wifiedge3gssh.html">iPhne/iPad 通过SSH终极翻墙解决方案</a></li>
<li><a href="http://catty-house.blogspot.jp/2012/11/iphonevpspythonpac.html">越狱iPhone下 VPS+Shadowsocks+PAC翻墙</a></li>
<li><a href="http://www.cpplive.com/html/1301.html">SSH登陆iPhone后台</a></li>
<li><a href="http://www.truevue.org/javascript/pac-format">PAC自动代理文件格式，教你如何写PAC文件</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X里升级GoAgent后台服务]]></title>
    <link href="http://vangie.github.com/blog/2013/03/28/upgrade-goagent-daemon-in-macos-x/"/>
    <updated>2013-03-28T10:04:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/03/28/upgrade-goagent-daemon-in-macos-x</id>
    <content type="html"><![CDATA[<blockquote><p>本篇是<a href="http://codelife.me/blog/2012/09/03/goagent-run-as-deamon-in-macos-x/">MacOS X将GoAgent配置为后台服务</a>的姊妹篇，主要分享一下将GoAgent配置成随机启动的LaunchAgent后如何升级，并提供一个方便的管理脚本。</p></blockquote>

<h2>升级</h2>

<h3>下载安装</h3>

<p>假设GoAgent的安装目录为<code>~/Library/</code></p>

<p>下载最新的GoAgent，当前版本为v2.1.14。解压后得到<code>goagent-goagent-beadcf8</code>目录,将其移动到<code>~/Library/</code>目录</p>

<pre><code>mv goagent-goagent-beadcf8 ~/Library/
</code></pre>

<p>并在同目录下创建一个文件链接，</p>

<pre><code>ln -sf goagent-goagent-beadcf8 goagent
</code></pre>

<!-- more -->


<h3>上传服务端</h3>

<p>进入<code>~/Library/goagent/server</code>目录执行</p>

<pre><code>uploaddir=python python uploader.zip
</code></pre>

<p>然后按照命令行的提示输入APPID，还有gmail账号和密码上传服务端。</p>

<h3>配置客户端</h3>

<p>打开<code>~/Library/goagent/local/proxy.ini</code>文件,修改[gae]段的appid，如果有password别忘了填。</p>

<h3>修改LaunchAgent脚本</h3>

<p>修改<code>~/Library/LaunchAgents/com.googlecode.goagent.plist</code>文件</p>

<p>将</p>

<pre><code>/Users/vangie/Library/goagent-goagent-******/local/proxy.py
</code></pre>

<p>改为</p>

<pre><code>/Users/vangie/Library/goagent/local/proxy.py
</code></pre>

<p>这个文件只需要该一次，今后升级只需要<code>ln -sf</code>创建一个链接就可以了。</p>

<h2>重启LaunchAgent</h2>

<pre><code>launchctl unload -w ~/Library/LaunchAgents/com.googlecode.goagent.plist
launchctl load -w ~/Library/LaunchAgents/com.googlecode.goagent.plist
</code></pre>

<p>launchctl没有reload或者restart参数，重启挺麻烦的，而且命令不好记。</p>

<p>使用下面的脚本就方便多了，把脚本保存为<code>goagentctl</code>，保存到<code>$PATH</code>目录，我放在<code>~/bin</code>下面</p>

<pre><code>#!/bin/sh
#
# author: Vangie Du
# url: http://codelife.me/blog/2013/03/28/upgrade-goagent-daemon-in-macos-x
# version: 1.0
#
#
ARGV="$@"
#
# |||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
# --------------------                              --------------------
#
# pick up any necessary environment variables
if test -f /usr/sbin/envvars; then
  . /usr/sbin/envvars
fi
# --------------------                              --------------------
# ||||||||||||||||||||   END CONFIGURATION SECTION  ||||||||||||||||||||

LAUNCHCTL="/bin/launchctl"
LAUNCHD_JOB="/Users/vangie/Library/LaunchAgents/com.googlecode.goagent.plist"
LAUNCHD_JOB_NAME="com.googlecode.goagent"


run_launchctl() {
    $LAUNCHCTL $@
}


ERROR=0

case $ARGV in
start)
    run_launchctl load -w $LAUNCHD_JOB
    ERROR=$?
    ;;
stop)
    run_launchctl unload -w $LAUNCHD_JOB
    ERROR=$?
    ;;
restart)
    run_launchctl unload -w $LAUNCHD_JOB 2&gt; /dev/null
    run_launchctl load -w $LAUNCHD_JOB
    ERROR=$?
    ;;
status)
    run_launchctl list | grep  $LAUNCHD_JOB_NAME &gt; /dev/null
    if [ $? -eq 1 ]
    then
        echo goagent daemon is stopped.
    else
        echo goagent daemon is running...
    fi
    ;;
*)
    echo 'goagentctl (start|stop|restart|status)'
    ;;
esac

exit $ERROR
</code></pre>

<p> 然后执行</p>

<pre><code>goagentctl restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[支持Markdown的Finder快速预览插件]]></title>
    <link href="http://vangie.github.com/blog/2013/03/16/a-mac-os-x-quicklook-extension-for-markdown/"/>
    <updated>2013-03-16T12:33:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/03/16/a-mac-os-x-quicklook-extension-for-markdown</id>
    <content type="html"><![CDATA[<blockquote><p>寻找一个可扩展的markdown parser的java或者javascript实现，wikipedia上有一个<a href="http://en.wikipedia.org/wiki/List_of_Markdown_implementations">列表</a>非常全。比较之后决定弃用<a href="http://code.google.com/p/pagedown/">pagedown</a>改用<a href="http://code.google.com/p/markdown4j">markdown4j</a>，明显后者功能更加全面，而且同样可扩展。在这个长长的列表里意外的发现了<a href="(https://github.com/toland/qlmarkdown/)">qlmarkdown</a>。</p></blockquote>

<p><a href="(https://github.com/toland/qlmarkdown/)">qlmarkdown</a>是一个QuickLook的扩展（在Finder里选中文件敲空格键弹出的那个窗口就是Quicklook功能）。安装了这个扩展以后就可以快速的预览markdown文件了。</p>

<!-- more -->


<p>下载地址：https://github.com/toland/qlmarkdown/downloads</p>

<p>安装步骤很简单，拷贝QLMarkdown.qlgenerator到目录 <code>~/Library/QuickLook</code> 或者 <code>/Library/QuickLook</code>即可。</p>

<p>效果图</p>

<p><img src="http://vangie.github.com/images/post/2013-03-16/quicklook.png" alt="Quicklook" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffeescript人民币小写转换为大写]]></title>
    <link href="http://vangie.github.com/blog/2013/03/09/convert-amount-from-figures-to-words-by-coffeescript/"/>
    <updated>2013-03-09T10:43:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/03/09/convert-amount-from-figures-to-words-by-coffeescript</id>
    <content type="html"><![CDATA[<blockquote><p>windows系统的搜狗输入法v模式可以很贴心地把人民币由小写转换为大写模式，Mac平台的输入法迄今还没有发现类似的功能。OSChina上看到一个哥们写了个java的版本的，于是依葫芦画瓢倒腾了个coffee的版本只用</p></blockquote>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#! /usr/bin/env coffee</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># convert amount from figures to words</span>
</span><span class='line'><span class="c1"># @author vangie.du</span>
</span><span class='line'><span class="c1"># @url http://codelife.me/blog/2013/03/09/convert-amount-from-figures-to-words-by-coffeescript/</span>
</span><span class='line'><span class="c1"># @version 1.1</span>
</span><span class='line'><span class="c1"># @since 2013-03-09</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nv">n = </span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">  Usage: \n</span>
</span><span class='line'><span class="s">      rmb figure_number\n</span>
</span><span class='line'><span class="s">  Example:\n</span>
</span><span class='line'><span class="s">      rmb 42342.33\n</span>
</span><span class='line'><span class="s">      肆万贰仟叁佰肆拾贰元叁角叁分&quot;</span>
</span><span class='line'>  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">fractions = </span><span class="p">[</span><span class="s">&quot;角&quot;</span><span class="p">,</span> <span class="s">&quot;分&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nv">digits = </span><span class="p">[</span><span class="s">&quot;零&quot;</span><span class="p">,</span> <span class="s">&quot;壹&quot;</span><span class="p">,</span> <span class="s">&quot;贰&quot;</span><span class="p">,</span> <span class="s">&quot;叁&quot;</span><span class="p">,</span> <span class="s">&quot;肆&quot;</span><span class="p">,</span> <span class="s">&quot;伍&quot;</span><span class="p">,</span> <span class="s">&quot;陆&quot;</span><span class="p">,</span> <span class="s">&quot;柒&quot;</span><span class="p">,</span> <span class="s">&quot;捌&quot;</span><span class="p">,</span> <span class="s">&quot;玖&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nv">units = </span><span class="p">[[</span><span class="s">&quot;元&quot;</span><span class="p">,</span> <span class="s">&quot;万&quot;</span><span class="p">,</span> <span class="s">&quot;亿&quot;</span><span class="p">],[</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;拾&quot;</span><span class="p">,</span> <span class="s">&quot;佰&quot;</span><span class="p">,</span> <span class="s">&quot;仟&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">head</span><span class="p">,</span> <span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="k">if</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">then</span> <span class="p">[</span><span class="s">&#39;负&#39;</span><span class="p">,</span> <span class="o">-</span><span class="nx">n</span><span class="p">]</span> <span class="k">else</span> <span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="nx">n</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s = </span><span class="s">&#39;&#39;</span>
</span><span class='line'><span class="nv">fractionalPart = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">n</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">%</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">digits</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">fractionalPart</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="p">))</span> <span class="o">%</span> <span class="mi">10</span><span class="p">]</span> <span class="o">+</span> <span class="nx">fractions</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(零.)+/g</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s = </span><span class="s">&#39;整&#39;</span> <span class="nx">unless</span> <span class="nx">s</span>
</span><span class='line'>
</span><span class='line'><span class="nv">intPart = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="nx">units</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="k">when</span> <span class="nx">intPart</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nv">p = </span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="nx">units</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="k">when</span> <span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nv">p = </span><span class="nx">digits</span><span class="p">[</span><span class="nx">intPart</span> <span class="o">%</span> <span class="mi">10</span><span class="p">]</span> <span class="o">+</span> <span class="nx">units</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">p</span>
</span><span class='line'>      <span class="nv">intPart = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">intPart</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">s = </span><span class="nx">p</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(零.)*零$/g</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^$/g</span><span class="p">,</span> <span class="s">&quot;零&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">units</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">s</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">head</span> <span class="o">+</span> <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(零.)*零元/g</span><span class="p">,</span> <span class="s">&quot;元&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(零.)+/</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(零.)+/g</span><span class="p">,</span> <span class="s">&quot;零&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^整$/g</span><span class="p">,</span> <span class="s">&quot;零元整&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的文件保存为<code>~/bin/rmb</code>,或者其他$PATH中目录位置。</p>

<p>然后命令行执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod + x ~/bin/rmb
</span><span class='line'>rmb 42342.33
</span></code></pre></td></tr></table></div></figure>


<p>更进一步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s ~/bin/rmb ~/bin/￥
</span><span class='line'>￥ 42342.33
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ol>
<li><a href="http://www.oschina.net/code/snippet_32903_18900">人民币小写转换为大写</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iTerm2中使用Zmodem传输文件]]></title>
    <link href="http://vangie.github.com/blog/2013/03/02/zmodem-integration-for-iterm2/"/>
    <updated>2013-03-02T14:54:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/03/02/zmodem-integration-for-iterm2</id>
    <content type="html"><![CDATA[<blockquote><p>rz,sz命令传输文件，比使用scp要方便得多，特别是在图形界面打开终端，SSH登陆到远程机器需要传输文件的时候。但是MacOS里Terminal.app并不支持Zmodel传输。好在iTerm2具备较强的扩展性可以通过简单的配置支持Zmodem传输。</p></blockquote>

<h3>什么是Zmodem</h3>

<p>Zmodem是针对modem的一种支持错误校验的文件传输协议。Zmodem是Ymodem的改进版，后者又是Xmodem的改进版。</p>

<!-- more -->


<h4>Xmodem</h4>

<p><a href="http://en.wikipedia.org/wiki/XMODEM">Xmodem</a>是一个简单的文件传输协议，是由Ward Christensen于1977年为他的MODEM.ASM终端程序开发。在早期的BBS系统非常的流行。</p>

<p>像许多文件传输协议一样，Xmodem把文件切分成有序的数据包。并在数据包上加上一些附件的信息允许接受方确定数据包是否在传输中损坏。</p>

<h5>数据包的结构</h5>

<p>包头：宝开始（SOH），包编号和包编号补码</p>

<p>数据：固定的128字节</p>

<p>包尾：校验和</p>

<h5>传输过程</h5>

<p>XModem工作时，先由收方发出NAK，然后等待发方的包开始SOH。收到SOH后，即 将整个包收完，检查是否有错。如出错，则向发方发出一个NAK，请求发方重发； 否则发出ACK,表示接收正确，请发下个包。XModem检查包编号和checksum来确定 该包是否传送有问题。编号是发方送得出包的顺序。当XModem发送完最后一个包 时，收方会收到文件结束符(EOT)，此时，收方会送出一个ACK通知发方传送结束。</p>

<h4>Ymodem</h4>

<p><a href="http://en.wikipedia.org/wiki/YMODEM">Ymodem</a>是Chuck Forsberg开发的Xmodem的改进版，1985年被Xmodem的开发者Ward Christensen称之为“Ymodem”。</p>

<p>相对于Xmodem的主要改进是在发送方发送真实数据块前，先发送一个称之为“block 0”的数据块（真实的数据块是从1开始计数），改数据块包含文件名，大小和时间戳。文件大小解决了Xmodem文件尾部剩余填充的问题。</p>

<h4>Zmodem</h4>

<p><a href="http://en.wikipedia.org/wiki/ZMODEM">Zmodem</a>是Chuck Forsberg于1986年发布的Ymodem的改进版本。关键的改进是引进了<strong>滑动窗口协议</strong>(<a href="http://en.wikipedia.org/wiki/Sliding_window">Sliding window protocol</a>)改进了传输的性能。</p>

<p>在Xmodem或者Ymodem传输时发送方需要等待接收方放的ACK或者NAK响应才继续发送下一个数据包。Zmodem把这个同步的确认过程改成了异步的，发送方可以不断的方式数据包，然后异步的接收ACK或者NAK包，过一段时候后再决定是否需要重新发送数据包。这种方式解决了确认包网络延迟造成对传输速率的影响。</p>

<h3>安装Zmodem的实现</h3>

<pre><code>brew install lrzsz
</code></pre>

<h3>创建脚本</h3>

<p>将下面两个脚本创建到<code>/usr/local/bin</code>目录</p>

<p>item2-send-zmodem.sh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Author: Matt Mastracci (matthew@mastracci.com)</span>
</span><span class='line'><span class="c"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span>
</span><span class='line'><span class="c"># licensed under cc-wiki with attribution required </span>
</span><span class='line'><span class="c"># Remainder of script public domain</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="sb">`</span>osascript -e <span class="s1">&#39;tell application &quot;iTerm&quot; to activate&#39;</span> -e <span class="s1">&#39;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#39;</span> -e <span class="s2">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$FILE</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo </span>Cancelled.
</span><span class='line'>  <span class="c"># Send ZModem cancel</span>
</span><span class='line'>  <span class="nb">echo</span> -e <span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Cancelled transfer
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$FILE</span>
</span><span class='line'>  /usr/local/bin/sz <span class="s2">&quot;$FILE&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Received <span class="nv">$FILE</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>iterm2-recv-zmodem.sh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># Author: Matt Mastracci (matthew@mastracci.com)</span>
</span><span class='line'><span class="c"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span>
</span><span class='line'><span class="c"># licensed under cc-wiki with attribution required </span>
</span><span class='line'><span class="c"># Remainder of script public domain</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="sb">`</span>osascript -e <span class="s1">&#39;tell application &quot;iTerm&quot; to activate&#39;</span> -e <span class="s1">&#39;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#39;</span> -e <span class="s2">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$FILE</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo </span>Cancelled.
</span><span class='line'>  <span class="c"># Send ZModem cancel</span>
</span><span class='line'>  <span class="nb">echo</span> -e <span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18<span class="se">\\</span>x18
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Cancelled transfer
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$FILE</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="s2">&quot;$FILE&quot;</span>
</span><span class='line'>  /usr/local/bin/rz
</span><span class='line'>  <span class="nb">echo</span> <span class="se">\#</span> Received <span class="nv">$FILE</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置iTerm2</h3>

<p>修改iTerm2的default trigger（iTerm偏好设置-> Profiles -> Default -> Advanced -> Triggers的Edit按钮</p>

<pre><code>Regular expression: \*\*B0100 
Action: Run Silent Coprocess 
Parameters: /usr/local/bin/iterm2-send-zmodem.sh


Regular expression: \*\*B00000000000000 
Action: Run Silent Coprocess 
Parameters: /usr/local/bin/iterm2-recv-zmodem.sh
</code></pre>

<h3>发送文件到远端服务器</h3>

<ol>
<li>在远端服务器执行<code>rz</code></li>
<li>本地选择文件传输</li>
<li>等待传输指示消失</li>
</ol>


<h3>接收远端服务器的文件</h3>

<ol>
<li>再远端服务器执行<code>sz filename1 filename2 … filenameN</code></li>
<li>本地选择目录保存</li>
<li>等待传输指示消失</li>
</ol>


<h3>参考文献</h3>

<ol>
<li><a href="http://openexz.sinaapp.com/2012/08/29/%E5%9C%A8iterm2%E4%B8%AD%E4%BD%BF%E7%94%A8zmodem%E7%9A%84%E6%96%B9%E6%B3%95/">在iTerm2中使用Zmodem的方法</a></li>
<li><a href="https://github.com/mmastrac/iterm2-zmodem">ZModem integration for iTerm 2</a></li>
<li><a href="http://docstore.mik.ua/orelly/linux/run/apph_01.htm">Appendix H. Zmodem File Transfer</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6安装KuaiDial]]></title>
    <link href="http://vangie.github.com/blog/2013/02/07/install-kuaidial-on-ios6/"/>
    <updated>2013-02-07T17:27:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/02/07/install-kuaidial-on-ios6</id>
    <content type="html"><![CDATA[<blockquote><p>iOS6 越狱程序<a href="http://evasi0n.com/">evasi0n</a>自本周一发布以来，累计被下载了170万次。果断升级了，升级以后发现KuaiDial没有用了。</p></blockquote>

<p>kuaidial原来的升级源http://kuaidail.googlecode.com/svn/deb没有用了，装威锋源里的kuaidial也没有用。改用<strong>第一中文源</strong>http://apt.178.com,然后安装<strong>Kuaidial iOS6 测试版</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPad通过uPnp协议播放MacBook里的视频文件]]></title>
    <link href="http://vangie.github.com/blog/2013/02/05/ipad-play-video-from-macbook-over-upnp/"/>
    <updated>2013-02-05T00:58:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/02/05/ipad-play-video-from-macbook-over-upnp</id>
    <content type="html"><![CDATA[<blockquote><p>mac air里下载的电影通过开启upnp服务，然后iPad安装一个支持upnp服务的播放器可以直接播放电影，免去拷贝的过程。</p></blockquote>

<h1>Mac OS端安装Mediatomb</h1>

<p>mediatomb是一个跨平台免费的upnp服务器，以web ui的方式管理，仅仅是一个命令行工具。</p>

<pre><code>brew install mediatomb
</code></pre>

<p>安装完成以后执行命令<code>mediatomb</code>,如果遇到端口被占用的错误，需要重启一下机器。我重启两次就好了。</p>

<h1>iOS端安装aceplayer</h1>

<p><a href="https://itunes.apple.com/us/app/aceplayer-powerful-media-player/id540326056?mt=8">aceplayer</a>是一个近乎全能的播放器，支持upnp，可以直接播放或者下载upnp服务器里的视频文件。但是播放时色彩还原效果相对差一点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Keynote里输入Font Awesome字符]]></title>
    <link href="http://vangie.github.com/blog/2013/01/28/using-font-awesome-in-keynote/"/>
    <updated>2013-01-28T23:23:00+08:00</updated>
    <id>http://vangie.github.com/blog/2013/01/28/using-font-awesome-in-keynote</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://fortawesome.github.com/Font-Awesome/">Font Awesome</a>提供了200多个矢量图标的字体文件。矢量字体可以支持无线的放缩，而且体积更好，如果能放到keynote里作为幻灯片的图标素材非常不错。想法是好的，但是由于这些字体对应了一些保留的unicode编码，使用通常的输入法无法输入。</p></blockquote>

<h3>安装Font Awesome字体</h3>

<p>下载 <a href="https://github.com/FortAwesome/Font-Awesome/zipball/master">FontAwesome-Font-Awesome.zip</a>，解压缩后，找到font/FontAwesome.otf文件，双击安装即可。</p>

<h3>找到icon对应的Unicode编码</h3>

<p>找到css/font-awesome.css文件，使用编辑器打开。可以找到许多形如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.icon-key</span><span class="nd">:before</span>                  <span class="p">{</span> <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;\f084&quot;</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>f084</code>就是icon-key图标对应的unicode编码。</p>

<h3>开启Mac OS的unicode16进制输入法</h3>

<p>打开“系统偏好设置\语言与文本\输入源”,在左侧&#8221;请选择要使用的输入源&#8221;列表中勾上”Unicode 十六进制输入“。然后将系统输入法切换为”Unicode输入法“。按住Control健输入4位unicode字符即可输入.若当前字体不存在对应的unicode编码的字形会出现框框，所有输入前需要在keynote里把当前字体改为FontAwesome。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为CentOS虚拟机添加第二块网卡]]></title>
    <link href="http://vangie.github.com/blog/2012/12/11/add-secondary-network-interface-to-vm-of-centos/"/>
    <updated>2012-12-11T18:43:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/11/add-secondary-network-interface-to-vm-of-centos</id>
    <content type="html"><![CDATA[<blockquote><p>使用virt-install安装了一个CentOS虚拟机，安装过程未指定网络参数，默认使用内置虚拟NAT的方式上网，现在希望给虚拟机另外安装一块虚拟的网卡，然后给其分配一个外网IP地址（与宿主机处于同一网段）。</p></blockquote>

<h3>安装CentOS</h3>

<pre><code>$ sudo virt-install --connect qemu:///system --noautoconsole \
-n centos -r 4096 --vcpus=4 --arch=x86_64 --os-type=linux \
--os-variant=rhel6 --accelerate -v -l http://mirrors.163.com/centos/6.3/os/x86_64/ \
--disk path=/var/lib/libvirt/images/centos.img,size=200 \
--graphics vnc,password=foobar,listen=0.0.0.0,port=5901 
</code></pre>

<!-- more -->


<h3>为宿主机添加虚拟网桥</h3>

<pre><code>$ vim /etc/network/interfaces
</code></pre>

<p>修改如下</p>

<pre><code># This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
iface em1 inet manual

auto br0
iface br0 inet static
    bridge_ports    em1
    bridge_stp  on
    bridge_maxwait  0
    bridge_fd   0
    address     192.168.18.130
    netmask     255.255.255.0
    network     192.168.18.0
    broadcast   192.168.18.255
    gateway     192.168.18.1
    dns-nameservers 192.168.18.1
</code></pre>

<p>添加虚拟网桥配置br0,并且把主网卡em1（大多数情况下主网卡为eth0）配置由dhcp或者static改成manual。</p>

<p>然后重启网络服务</p>

<pre><code>$ sudo service networking restart
</code></pre>

<h3>为虚拟机添加一张额外的虚拟网卡</h3>

<p>首先关闭VM</p>

<pre><code>$ virsh destory centos
</code></pre>

<p>然后编辑VM配置文件</p>

<pre><code>$ virsh edit centos
</code></pre>

<p>在</interface>之后加入如下xml片段</p>

<pre><code>&lt;interface type='bridge'&gt;
  &lt;mac address='00:16:3e:1a:b3:4a'/&gt;
  &lt;source bridge='br0'/&gt;
  &lt;model type='virtio'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/&gt;
&lt;/interface&gt;
</code></pre>

<p>然后保存退出。</p>

<p>启动刚才修改过的VM虚拟节点</p>

<pre><code>$ virsh start centos
</code></pre>

<h3>为CentOS添加新网卡配置</h3>

<p>参看<code>/sys/class/net</code>可以看到新添加的网卡eth1</p>

<pre><code># ls /sys/class/net/
eth0  eth1  lo
</code></pre>

<p>通过ifconfig获得该网卡的MAC地址</p>

<pre><code># ifconfig eth1
eth1    Link encap:Ethernet  HWaddr 00:16:3E:1A:B3:4A  
        inet addr:192.168.18.210  Bcast:192.168.18.255  Mask:255.255.255.0
        inet6 addr: fe80::216:3eff:fe1a:b34a/64 Scope:Link
        UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
        RX packets:3343 errors:0 dropped:0 overruns:0 frame:0
        TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
        collisions:0 txqueuelen:1000 
        RX bytes:216373 (211.3 KiB)  TX bytes:1364 (1.3 KiB)
</code></pre>

<p>执行uuidgen生成一个随机的UUID</p>

<pre><code># uuidgen
e5281311-f265-4afa-a7e1-4d76718f7de0
</code></pre>

<p>然后完事具备只欠东方了，</p>

<pre><code># cd /etc/sysconfig/network-scripts
# cp ifcfg-eth0 ifcfg-eth1
# vim ifcfg-eth1
</code></pre>

<p>结合上面的MAC地址和UUID，修改内容如下</p>

<pre><code>DEVICE="eth1"
BOOTPROTO="dhcp"
HWADDR="00:16:3E:1A:B3:4A"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
NM_CONTROLLED="yes"
ONBOOT="yes"
TYPE="Ethernet"
UUID="e5281311-f265-4afa-a7e1-4d76718f7de0"
</code></pre>

<p>然后VM网络服务即可</p>

<pre><code># service network restart
</code></pre>

<h3>参考文献</h3>

<ol>
<li><a href="http://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-networkscripts-interfaces.html">Interface Configuration Files</a></li>
<li><a href="http://libvirt.org/archnetwork.html">Network management architecture</a></li>
<li><a href="http://libvirt.org/formatnetwork.html">Network XML format</a></li>
<li><a href="http://wiki.libvirt.org/page/Networking">libvirt networking</a></li>
<li><a href="http://wiki.debian.org/BridgeNetworkConnections">Bridging Network Connections</a></li>
<li><a href="http://www.linux-kvm.org/page/Networking">KVM setting guest network</a></li>
<li><a href="http://www.selbytech.com/2009/10/adding-virtual-network-interfaces-on-centos-5-x/">Adding Virtual Network Interfaces on CentOS 5.x</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三种不同类型的ssh隧道]]></title>
    <link href="http://vangie.github.com/blog/2012/12/09/three-types-of-ssh-turneling/"/>
    <updated>2012-12-09T13:20:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/09/three-types-of-ssh-turneling</id>
    <content type="html"><![CDATA[<blockquote><p>想通过ssh隧道连接远端机器的VNC服务，对<code>ssh -L</code>命令不太熟悉，<code>man ssh</code>后发现3组与隧道（turnnel）相关的参数:<code>ssh -D</code>，<code>ssh -L</code>，<code>ssh -R</code>，一下子就搞糊涂了，所有下决心仔细研究一番。</p></blockquote>

<h3>何谓SSH隧道</h3>

<p>隧道是一种把一种网络协议封装进另外一种网络协议进行传输的技术。这里我们研究ssh隧道，所以所有的网络通讯都是加密的。又被称作端口转发，因为ssh隧道通常会绑定一个本地端口，所有发向这个端口端口的数据包，都会被加密并透明地传输到远端系统。</p>

<h3>SSH隧道的类型</h3>

<p>ssh隧道有3种类型：</p>

<ol>
<li>动态端口转发（Socks 代理）</li>
<li>本地端口转发</li>
<li>远端端口转发</li>
</ol>


<!-- more -->


<h3>动态端口转发</h3>

<p>动态端口允许通过配置一个本地端口，把通过隧道到数据转发到远端的所有地址。本地的应用程序需要使用Socks协议与本地端口通讯。此时SSH充当Socks代理服务器的角色。</p>

<p><strong>命令格式</strong></p>

<pre><code>ssh -D [bind_address:]port
</code></pre>

<p><strong>参数说明</strong></p>

<ul>
<li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为<code>*</code>会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为<code>localhost</code>。</li>
<li>port 指定本地绑定的端口</li>
</ul>


<p><strong>使用场景</strong></p>

<p>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以连接主机B，但无法连接主机C。</p>

<p>在主机A执行</p>

<pre><code>$ ssh -D localhost:8080 root@192.168.2.100
</code></pre>

<p>然后主机A上的应用程序就可以通过</p>

<pre><code>SOCKS5 localhost:8080
</code></pre>

<p>访问主机C上的服务。</p>

<p><strong>优点</strong></p>

<ul>
<li>配置一个代理服务就可以访问远端机器和与其所在子网络的所有服务</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>应用程序需要额外配置SOCKS代理，若应用程序不支持代理配置则无法使用</li>
</ul>


<h3>本地端口转发</h3>

<p>通过SSH隧道，将一个远端机器能够访问到的地址和端口，映射为一个本地的端口。</p>

<p><img src="http://vangie.github.com/images/post/2012-12-09/local_forwarding.jpg" alt="本地端口转发" /></p>

<p><strong>命令格式</strong></p>

<pre><code>ssh -L [bind_address:]port:host:hostport
</code></pre>

<p><strong>参数说明</strong></p>

<ul>
<li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为<code>*</code>会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为<code>localhost</code>。</li>
<li>port 指定本地绑定的端口</li>
<li>host 指定数据包转发目标地址的IP，如果目标主机和ssh server是同一台主机时该参数指定为<code>localhost</code></li>
<li>host_port 指定数据包转发目标端口</li>
</ul>


<p><strong>使用场景</strong></p>

<p>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以连接主机B，但无法连接主机C。A主机需要访问C主机的VNC服务（5900端口）</p>

<p>在A主机上建立本地转发端口5901</p>

<pre><code>$ ssh -L 5901:192.168.2.101:5900 root@192.168.2.100
</code></pre>

<p>然后本地vnc客户端通过5901端口打开c主机的vnc服务</p>

<pre><code>$ open vnc://localhost:5901
</code></pre>

<p><strong>优点</strong></p>

<ul>
<li>无需设置代理</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>每个服务都需要配置不同的端口转发</li>
</ul>


<h3>远端端口转发</h3>

<p>远程端口转发用于某些单向阻隔的内网环境，比如说NAT，网络防火墙。在NAT设备之后的内网主机可以直接访问公网主机，但外网主机却无法访问内网主机的服务。如果内网主机向外网主机建立一个远程转发端口，就可以让外网主机通过该端口访问该内网主机的服务。可以把这个内网主机理解为“内应”和“开门者”。</p>

<p><img src="http://vangie.github.com/images/post/2012-12-09/remote_forwarding.jpg" alt="远端端口转发" /></p>

<p><strong>命令格式</strong></p>

<pre><code>ssh -R [bind_address:]port:host:hostport
</code></pre>

<p><strong>参数说明</strong></p>

<ul>
<li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为<code>*</code>会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为<code>localhost</code>。</li>
<li>port 指定本地绑定的端口</li>
<li>host 指定数据包转发源地址的IP，如果源主机和ssh server是同一台主机时该参数指定为<code>localhost</code></li>
<li>host_port 指定数据包转发源端口</li>
</ul>


<p><strong>使用场景</strong></p>

<p>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以通过SSH访问登录B主机，但反向直接连接被禁止，主机B和主机C可以相互访问。若主机C想访问主机A的VNC服务（5900端口）。</p>

<p>在主机A执行如下命令，开放B主机远端端口转发。</p>

<pre><code>$ ssh -R 5900:192.168.2.100:5901 root@192.168.2.100
</code></pre>

<p>然后主机C连接主机B的5901端口</p>

<pre><code>$ open vnc://192.168.2.100:5901
</code></pre>

<p><strong>优点</strong></p>

<ul>
<li>可以穿越防火墙和NAT设备</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>每个服务都需要配置不同的端口转发</li>
</ul>


<h3>如何禁止端口转发</h3>

<p>设置ssh服务配置文件<code>/etc/ssh/sshd_config</code></p>

<pre><code>AllowTcpForwarding no
</code></pre>

<h3>参考文献</h3>

<ol>
<li><a href="http://chamibuddhika.wordpress.com/2012/03/21/ssh-tunnelling-explained/">SSH Tunneling Explained</a></li>
<li><a href="http://www.ramkitech.com/2012/04/how-to-do-ssh-tunneling-port-forwarding.html">How to do SSH Tunneling (Port Forwarding) </a></li>
<li><a href="http://www.liugj.com/2013/04/SSH-port-forwarding/">SSH端口转发以及应用实例</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qemu-kvm将SLIc 2.1刷入BIOS并成功激活Windows Server 2008 R2]]></title>
    <link href="http://vangie.github.com/blog/2012/12/07/qemu-kvm-add-slic-2-dot-1-to-bios-and-activate-windows-server-2008-r2-sucessfully/"/>
    <updated>2012-12-07T13:20:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/07/qemu-kvm-add-slic-2-dot-1-to-bios-and-activate-windows-server-2008-r2-sucessfully</id>
    <content type="html"><![CDATA[<blockquote><p>在一台DELL R310的宿主机上安装了Ubuntu Server 12.10默认集成KVM虚拟机，用户态虚拟机软件qemu-kvm使用seabios的作为bios实现(位于 <code>/usr/share/qemu-kvm/bios.bin</code>,来自于qemu-common 1.2.0+noroms-0ubuntu2)，该bios.bin仅包含部分来自宿主机的SLIC信息，但不完整，无法通过Window OEM验证。</p></blockquote>

<p>本文将介绍安装KVM虚拟机，借助virt-install安装Windows客户机，去除bios.bin里内置的SLIC，然后使用-acpitable参数载入正确的SLIc 2.1信息，导入OEM证书和OEM key激活Windows。</p>

<p>由于Ubuntu Server没有安装图形环境，DELL R310服务器也是不带显示器的，所有windows的安装过程是通过本来的Macbook Air的VNC客户端操作的。</p>

<!-- more -->


<h3>安装KVM虚拟机</h3>

<p>首先检查你的处理器是否支持硬件虚拟化；如果支持，下面这个命令</p>

<pre><code>$ sudo egrep '(vmx|svm)' --color=always /proc/cpuinfo
</code></pre>

<p>会看到如下类似信息</p>

<blockquote><p>flags      : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl <strong>vmx</strong> smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid</p></blockquote>

<p>若什么都没有显示，那么你的处理器不支持硬件虚拟化，就此打住，不要往下折腾了。</p>

<p>检查bios虚拟化开关是否开启</p>

<pre><code>$ sudo kvm-ok
</code></pre>

<p>正确的返回如下</p>

<blockquote><p>INFO: /dev/kvm exists<br/>
KVM acceleration can be used</p></blockquote>

<p>安装KVM,(若在Ubuntu Server安装过程中已经安装了KVM忽略此步骤)</p>

<pre><code>$ sudo apt-get install ubuntu-virt-server  kvm-ipxe
</code></pre>

<p>之后，将当前用户添加到libvirtd群组</p>

<pre><code>$ sudo adduser `id -un` libvirtd
$ sudo adduser `id -un` kvm
</code></pre>

<p>你需要要重新登录一下，才能让新群组生效。</p>

<p>验证kvm是否成功安装</p>

<pre><code>cloud03@cloud03:~$ virsh -c qemu:///system list
 Id    Name                           State
----------------------------------------------------

cloud03@cloud03:~$ 
</code></pre>

<h3>安装Windows Server 2008 R2</h3>

<h4>准备</h4>

<ol>
<li><a href="ed2k://|file|cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_vl_build_x64_dvd_617396.iso|3368962048|7C210CAC37A05F459758BCC1F4478F9E|/">Windows Server 2008 R2 安装镜像ISO</a></li>
<li><a href="http://www.linux-kvm.org/page/WindowsGuestDrivers/Download_Drivers">Windows VirtIO Drivers</a>,若不加载该驱动windows installer会无法找到虚拟磁盘（没有验证过，网上是怎么说的） 点击下载：<a href="http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/bin/virtio-win-0.1-30.iso">virtio-win-0.1-30.iso</a></li>
<li>安装virt-install <code>$ sudo apt-get install virtinst</code></li>
</ol>


<h3>开始安装</h3>

<pre><code>$ virt-install --connect qemu:///system --arch=x86_64 -n win2k8 -r 4096 --vcpus=2 \
-c /home/cloud03/cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_vl_build_x64_dvd_617396.iso \
--noautoconsole --os-type windows --os-variant win2k8 \
--disk path=/home/cloud03/virtio-win-0.1-30.iso,device=cdrom,perms=ro \
--disk path=/var/lib/libvirt/images/win2k8.img,size=50 \
--graphics vnc,password=foobar,listen=0.0.0.0 
</code></pre>

<p>部分参数说明</p>

<ul>
<li>-n win2k8 虚拟机的名称为win2k8</li>
<li>-r 4096 分配4G内存</li>
<li>-vcpus=2 两个cpu</li>
<li>-c /home/cloud03/cn_windows…617396.iso 指向ISO安装镜像位置</li>
<li>&#8211;disk path=/home/cloud03/virtio-win-0.1-30.iso,device=cdrom,perms=ro 加载virtio驱动</li>
<li>&#8211;disk path=/var/lib/libvirt/images/win2k8.img,size=50 创建虚拟磁盘，并分配50G的空间</li>
<li>&#8211;graphics vnc,password=foobar,listen=0.0.0.0 开启VNC，password选项是为了兼容mac内置Screen Sharing VNC终端无法连接不加密的VNC Server，listen选项是为了让VNC终端在所有IP地址上都开启监听，默认在127.0.0.1上监听，仅适用于本机VNC终端访问。</li>
</ul>


<p>使用VNC客户端打开远程桌面，Mac下非常简单，在Terminal.app里输入<code>open vnc://192.168.18.130</code>回车即可。windows和linux桌面系统请自行安装vnc客户端。</p>

<p>另外不少网友推荐Mac下用<a href="http://sourceforge.net/projects/cotvnc/">Chicken of the VNC.app</a>，试用过后不如内置Screen Sharing好，特别是系统重启断线重连的时候内置的客户端表现很稳定，Chicken of the VNC会假死，需要退出程序重开。</p>

<h3>编译bios.bin</h3>

<p><a href="https://github.com/ghuntley/seaslic">seaslic</a> 项目对seabios项目打了一个patch用于解决预安装正版windows的宿主机，改装linux运行kvm后，让虚拟机bios也有和宿主机一样的SLIc。简单的说就是把宿主机bios里的SLIc信息导入到虚拟机的bios.bin文件中去。让虚拟机也有正确的OEM标识。</p>

<p>经过测试seaslic项目导入的SLIc信息不完整，（至少在DELL R310下是不完整的），无法通过windows校验。</p>

<p>qemu-kvm有一个-acpitable选项，可以通过file=… 装载一个外部的SLIC文件（<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>） 这里几乎有所有OEM机器的SLIC文件和证书）。</p>

<p>但是如果直接使用-acpitable选项加载外部SLIC进BIOS无论是使用内置的bios.bin(<code>/usr/share/qemu-kvm/bios.bin</code>),还是seaslic项目打过Patch的bios.bin都会导致ACPI table里有两条SLIc记录，一条正确的一条不完整的，导致windows无法激活。</p>

<p>一个可行的方案：在sealic项目的基础上，稍作修改编译一个完全不包含SLIc的bios.bin,然后在结合-acpitable选项载入外部SLIC文件。经实践，可以激活。</p>

<p>具体步骤如下：</p>

<p>下载sealic项目源码</p>

<pre><code>$ cd ~
$ git clone git://github.com/ghuntley/seaslic
</code></pre>

<p>执行./patch.sh,该脚本会运用patch然后编译出bios.bin,调用该脚本只需要其运用patch的功能，编译出来的bios.bin先别管。</p>

<pre><code>$ cd seaslic
$ ./patch.sh
</code></pre>

<p>编辑acpi.c文件</p>

<pre><code>$ vim  seabios.submodule/src/acpi.c
</code></pre>

<p>注释掉638-647行,</p>

<pre><code>/*#ifdef CONFIG_OEM_SLIC
{ void *buf = malloc_high(sizeof(SLIC));
  if (!buf)
    warn_noalloc();
  else {
    memcpy(buf, SLIC, sizeof(SLIC));
    ACPI_INIT_TABLE(buf);
  }
}
#endif*/
</code></pre>

<p>然后编译</p>

<pre><code>$ cd seabios.submodule
$ make
</code></pre>

<p>替换系统内置bios.bin</p>

<pre><code>$ sudo cp out/bios.bin /usr/share/qemu-kvm/bios.bin
</code></pre>

<h3>修改虚拟机配置</h3>

<p>使用virsh edit命令可以修改虚拟机的配置。</p>

<pre><code>$ virsh edit win2k8
</code></pre>

<p>将第一行</p>

<pre><code>&lt;domain type='kvm'&gt;
</code></pre>

<p>改成</p>

<pre><code>&lt;domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'&gt;
</code></pre>

<p>然后，在靠近文件的末尾处，<code>&lt;/devices&gt;</code>便签之后，加入如下内容</p>

<pre><code>&lt;qemu:commandline&gt;
    &lt;qemu:arg value='-acpitable'/&gt;
    &lt;qemu:arg value='file=/usr/share/qemu/SLIC-DELL-PE_SC3-2.1.BIN'/&gt;
&lt;/qemu:commandline&gt;
</code></pre>

<p>保存退出。其中，SLIC-DELL-PE_SC3-2.1.BIN文件可以从<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>找到。</p>

<p>重启虚拟机，然后在虚拟机下载windows工具<a href="http://forums.mydigitallife.info/threads/6925-SLIC-ToolKit-x86-x64-(Includes-PKey-amp-Cert-Backup">SLIC Toolkit</a>.若“<strong>SLIC诊断</strong>”栏显示SLIC状态为<strong>验证通过</strong>则表明已生效。</p>

<h3>在Windows里安装OEM证书和序列号</h3>

<p>现在是完事具备只欠东风了，从<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>压缩包中可以找到DEL的OEM证书。</p>

<p>在windows控制台中使用如下命令导入</p>

<pre><code>&gt; slmgr -ilc DELL-DELL-2.0.XRM-MS
</code></pre>

<p>然后在这里<a href="http://forums.mydigitallife.info/threads/2827-Server-2008-Server-2008-R2-OEM-SLP-Keys">Server 2008/Server 2008 R2 OEM SLP Keys</a>找到对应的Key。使用下面的命令导入</p>

<pre><code>&gt; slmgr -ipk D7TCH-6P8JP-KRG4P-VJKYY-P9GFF
</code></pre>

<blockquote><p>Server 2008 R2 Standard DELL OEM KEY <br/>
D7TCH-6P8JP-KRG4P-VJKYY-P9GFF<br/>
Server 2008 R2 Enterprise DELL OEM KEY<br/>
BKCJJ-J6G9Y-4P7YF-8D4J7-7TCWD</p></blockquote>

<p>重新打开<a href="http://forums.mydigitallife.info/threads/6925-SLIC-ToolKit-x86-x64-(Includes-PKey-amp-Cert-Backup">SLIC Toolkit</a>工具，若“<strong>序列号与证书验证及备份</strong>”栏显示<strong>证书正确</strong>，那表示已经大功告成。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://virtual.51cto.com/art/201206/341911.htm">在Ubuntu 12.04 LTS服务器上借助KVM实现虚拟化</a></li>
<li><a href="https://www.nnbfn.net/2011/01/installing-win-server-2008-r2-as-a-kvm-guest-with-virtio/">Installing Win Server 2008 R2 as a KVM Guest with VirtIO</a></li>
<li><a href="http://forums.mydigitallife.info/threads/33723-Crafting-an-SLIC-BIOS-for-Linux-KVM-Guests">Crafting an SLIC BIOS for Linux KVM Guests</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server 12.10修改语言环境]]></title>
    <link href="http://vangie.github.com/blog/2012/12/04/change-default-locale-in-ubuntu-server-12-dot-10/"/>
    <updated>2012-12-04T16:59:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/04/change-default-locale-in-ubuntu-server-12-dot-10</id>
    <content type="html"><![CDATA[<blockquote><p>安装的时候把ubuntu server的默认语言设置成了中文，由于默认没有安装中文字体，控制台一片乱码。所有要么安装字体<code>sudo apt-get install language-pack-zh</code>,要么把语言环境设置成英文。</p></blockquote>

<p>网上大部分文章都提到修改<code>/etc/environment</code>文件，但是打开<code>/etc/environment</code>文件，默认是空的，说明这种方法虽然可以达到效果，但不是最完美的。更好的方式如下：</p>

<pre><code>$ sudo update-locale LANG=en_US.UTF-8
$ sudo update-locale LANGUAGE=en_US.en
</code></pre>

<p>然后重启系统即可。</p>

<!-- more -->


<h3>参考文献</h3>

<ol>
<li><a href="http://askubuntu.com/questions/89976/how-to-change-the-default-locale-in-ubuntu-10-10-server">How to change the default locale in ubuntu 10.10 server</a></li>
<li><a href="http://www.slyar.com/blog/ubuntu-server-utf8-zhcn.html">Ubuntu Server下配置UTF-8中文/英文环境</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何清除DNS缓存]]></title>
    <link href="http://vangie.github.com/blog/2012/11/20/how-to-flush-your-dns-cache/"/>
    <updated>2012-11-20T16:23:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/20/how-to-flush-your-dns-cache</id>
    <content type="html"><![CDATA[<blockquote><p>系统管理员或者web开发者，偶尔需要刷新一下DNS，由于DNS存在本地缓存，如果不主动清除，那需要一段漫长的等待</p></blockquote>

<h3>Mac OS</h3>

<p>OS X Lion (10.7) and OS X Mountain Lion (10.8)</p>

<pre><code>$ sudo killall -HUP mDNSResponder
</code></pre>

<p>Mac OS X 10.5, Mac OS X 10.6</p>

<pre><code>$ dscacheutil -flushcache
</code></pre>

<p>Mac OS X 10.4 Tiger</p>

<pre><code>$ lookupd -flushcache
</code></pre>

<h3>Windows</h3>

<p>Vista/Win7 以上系统</p>

<p>查看DNS缓存</p>

<pre><code>&gt; ipconfig /displaydns
</code></pre>

<p>清除DNS缓存</p>

<pre><code>&gt; ipconfig /flushdns 
</code></pre>

<p>Winxp和之前的老系统</p>

<pre><code>&gt; net stop dnscache
&gt; net start dnscache
</code></pre>

<h3>Linux</h3>

<pre><code>$ sudo /etc/init.d/nscd restart
</code></pre>

<h4>参考文献</h4>

<ol>
<li><a href="http://osxdaily.com/2008/03/21/how-to-flush-your-dns-cache-in-mac-os-x/">How to Flush DNS Cache in Mac OS X</a></li>
<li><a href="http://www.cnblogs.com/yryz/archive/2012/02/13/2299756.html">Vista/Win7以上系统查看和清除本地DNS缓存新方法</a></li>
<li><a href="http://www.techiecorner.com/35/how-to-flush-dns-cache-in-linux-windows-mac/">How to flush DNS cache in Linux / Windows / Mac</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lion系统安装GNU Grep]]></title>
    <link href="http://vangie.github.com/blog/2012/11/12/install-gnu-grep-in-mountain-lion/"/>
    <updated>2012-11-12T11:32:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/12/install-gnu-grep-in-mountain-lion</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://news.ycombinator.com/item?id=4588304">由于License的问题</a>，OS X将GNU Grep替换成了FreeBSD Grep，这两个版本的grep大部分都兼容，FreeBSD Grep唯独少了-P（&#8211;per-regex）选项，缺少了对Perl正则表达式的支持。</p></blockquote>

<p>可以通过使用homebrew自己安装GNU Grep以兼容包含-P参数的bash脚本。</p>

<pre><code>$ brew tap homebrew/dupes/
$ brew install homebrew/dupes/grep
</code></pre>

<p>记得在PATH里确保/usr/local/bin在/usr/bin前面，并重启终端。</p>

<!-- more -->


<h4>参考文献</h4>

<ol>
<li><a href="http://superuser.com/questions/419467/grep-in-mac-os-xs-terminal-only-displaying-one-color">Grep in Mac OS X&#8217;s terminal — only displaying one color</a></li>
<li><a href="http://www.dirtdon.com/?p=1452">Perl Regex Removed From Grep in Mountain Lion</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
