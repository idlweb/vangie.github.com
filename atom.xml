<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Life]]></title>
  <link href="http://vangie.github.com/atom.xml" rel="self"/>
  <link href="http://vangie.github.com/"/>
  <updated>2012-12-07T22:40:18+08:00</updated>
  <id>http://vangie.github.com/</id>
  <author>
    <name><![CDATA[Vangie Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[qemu-kvm将SLIc 2.1刷入BIOS并成功激活Windows Server 2008 R2]]></title>
    <link href="http://vangie.github.com/blog/2012/12/07/qemu-kvm-add-slic-2-dot-1-to-bios-and-activate-windows-server-2008-r2-sucessfully/"/>
    <updated>2012-12-07T13:20:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/07/qemu-kvm-add-slic-2-dot-1-to-bios-and-activate-windows-server-2008-r2-sucessfully</id>
    <content type="html"><![CDATA[<blockquote><p>在一台DELL R310的宿主机上安装了Ubuntu Server 12.10默认集成KVM虚拟机，用户态虚拟机软件qemu-kvm使用的seabios的bios实现(位于 <code>/usr/share/qemu-kvm/bios.bin</code>,来自于qemu-common 1.2.0+noroms-0ubuntu2)，该bios.bin仅包含部分来自宿主机的SLIC信息，但不完整，无法通过window对OEM的验证。</p></blockquote>

<p>本文将介绍如何在使用virt-install安装windows，去除bios.bin里内置的错误SLIC，然后使用-acpitable参数载入正确的SLIc 2.1，通过OEM证书和OEM key激活windows。</p>

<p>由于Ubuntu Server没有安装图形环境，DELL R310服务器也是不带显示器的，所有windows的安装过程是通过本来的Macbook Air的VNC客户端操作的。</p>

<!-- more -->


<h3>安装KVM虚拟机</h3>

<p>首先检查你的处理器是否支持硬件虚拟化；如果支持，下面这个命令</p>

<pre><code>$ sudo egrep '(vmx|svm)' --color=always /proc/cpuinfo
</code></pre>

<p>会看到如下类似信息</p>

<blockquote><p>flags      : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl <strong>vmx</strong> smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid</p></blockquote>

<p>若什么都没有显示，那么你的处理器不支持硬件虚拟化，就此打住，不要往下折腾了。</p>

<p>检查bios虚拟化开关是否开启</p>

<pre><code>$ sudo kvm-ok
</code></pre>

<p>正确的返回如下</p>

<blockquote><p>INFO: /dev/kvm exists<br/>
KVM acceleration can be used</p></blockquote>

<p>安装KVM,(若在Ubuntu Server安装过程中已经安装了KVM忽略此步骤)</p>

<pre><code>$ sudo apt-get install ubuntu-virt-server  kvm-ipxe
</code></pre>

<p>之后，将当前用户添加到libvirtd群组</p>

<pre><code>$ adduser `id -un` libvirtd
$ adduser `id -un` kvm
</code></pre>

<p>你需要要重新登录一下，才能让新群组生效。</p>

<p>验证kvm是否成功安装</p>

<pre><code>cloud03@cloud03:~$ virsh -c qemu:///system list
 Id    Name                           State
----------------------------------------------------

cloud03@cloud03:~$ 
</code></pre>

<h3>安装Windows Server 2008 R2</h3>

<h4>准备</h4>

<ol>
<li><a href="ed2k://|file|cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_vl_build_x64_dvd_617396.iso|3368962048|7C210CAC37A05F459758BCC1F4478F9E|/">Windows Server 2008 R2 安装镜像ISO</a></li>
<li><a href="http://www.linux-kvm.org/page/WindowsGuestDrivers/Download_Drivers">Windows VirtIO Drivers</a>,若不加载该驱动windows installer会无法找到虚拟磁盘（没有验证过，网上是怎么说的） 点击下载：<a href="http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/bin/virtio-win-0.1-30.iso">virtio-win-0.1-30.iso</a></li>
<li>安装virt-install <code>$ sudo apt-get install virtinst</code></li>
</ol>


<h3>开始安装</h3>

<pre><code>$ virt-install --connect qemu:///system --arch=x86_64 -n win2k8 -r 4096 --vcpus=2 -c /home/cloud03/cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_vl_build_x64_dvd_617396.iso --noautoconsole --os-type windows --os-variant win2k8 --disk path=/home/cloud03/virtio-win-0.1-30.iso,device=cdrom,perms=ro --disk path=/var/lib/libvirt/images/win2k8.img,size=50 --graphics vnc,password=foobar,listen=0.0.0.0 
</code></pre>

<p>部分参数说明</p>

<ul>
<li>-n win2k8 虚拟机的名称为win2k8</li>
<li>-r 4096 分配4G内存</li>
<li>-vcpus=2 两个cpu</li>
<li>-c /home/cloud03/cn_windows…617396.iso 指向ISO安装镜像位置</li>
<li>&#8211;disk path=/home/cloud03/virtio-win-0.1-30.iso,device=cdrom,perms=ro 加载virtio驱动</li>
<li>&#8211;disk path=/var/lib/libvirt/images/win2k8.img,size=50 创建虚拟磁盘，并分配50G的空间</li>
<li>&#8211;graphics vnc,password=foobar,listen=0.0.0.0 开启VNC，password选项是为了兼容mac内置Screen Sharing VNC终端无法连接不加密的VNC Server，listen选项是为了让VNC终端在所有IP地址上都开启监听，默认在127.0.0.1上监听，仅适用于本机VNC终端访问。</li>
</ul>


<p>使用VNC客户端打开远程桌面，Mac下非常简单，在Terminal.app里输入<code>open vnc://192.168.18.130</code>回车即可。windows和linux桌面系统请自行安装vnc客户端。</p>

<p>另外不少网友推荐Mac下用<a href="http://sourceforge.net/projects/cotvnc/">Chicken of the VNC.app</a>，试用过后不如内置Screen Sharing好，特别是系统重启断线重连的时候内置的客户端表现很稳定，Chicken of the VNC会假死，需要退出程序重开。</p>

<h3>编译bios.bin</h3>

<p>https://github.com/ghuntley/seaslic 项目对seabios项目打了一个patch用于解决预安装正版windows的宿主机，改装linux运行kvm后，让虚拟机bios也有和宿主机一样的SLIc。简单的说就是把宿主机bios里的SLIc信息导入到虚拟机的bios.bin文件中去。让虚拟机也有正确的OEM标识。</p>

<p>经过测试seaslic项目导入的SLIc信息不完整，（至少在DELL R310下是不完整的），无法通过windows校验。</p>

<p>qemu-kvm有一个-acpitable选项，可以通过file=… 装载一个外部的SLIC文件（<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>） 这里几乎有所有OEM机器的SLIC文件和证书）。</p>

<p>但是如果直接使用-acpitable选项加载外部SLIC进BIOS无论是使用内置的bios.bin(<code>/usr/share/qemu-kvm/bios.bin</code>),还是seaslic项目打过Patch的bios.bin都会导致ACPI table里有两条SLIc记录，一条正确的一条不完整的，导致windows无法激活。</p>

<p>一个可行的方案：在sealic项目的基础上，稍作修改编译一个完全不包含SLIc的bios.bin,然后在结合-acpitable选项载入外部SLIC文件。经实践，可以激活。</p>

<p>具体步骤如下：</p>

<p>下载sealic项目源码</p>

<pre><code>$ cd ~
$ git clone git://github.com/ghuntley/seaslic
</code></pre>

<p>执行./patch.sh,该脚本会运用patch然后编译出bios.bin,调用该脚本只需要其运用patch的功能，编译出来的bios.bin先别管。</p>

<pre><code>$ cd seaslic
$ ./patch.sh
</code></pre>

<p>编辑acpi.c文件</p>

<pre><code>$ vim  seabios.submodule/src/acpi.c
</code></pre>

<p>注释掉638-647行,</p>

<pre><code>/*#ifdef CONFIG_OEM_SLIC
{ void *buf = malloc_high(sizeof(SLIC));
  if (!buf)
    warn_noalloc();
  else {
    memcpy(buf, SLIC, sizeof(SLIC));
    ACPI_INIT_TABLE(buf);
  }
}
#endif*/
</code></pre>

<p>然后编译</p>

<pre><code>$ cd seabios.submodule
$ make
</code></pre>

<p>替换系统内置bios.bin</p>

<pre><code>$ sudo cp out/bios.bin /usr/share/qemu-kvm/bios.sh
</code></pre>

<h3>修改虚拟机配置</h3>

<p>使用virsh edit命令可以修改虚拟机的配置。</p>

<pre><code>$ virsh edit win2k8
</code></pre>

<p>将第一行</p>

<pre><code>&lt;domain type='kvm'&gt;
</code></pre>

<p>改成</p>

<pre><code>&lt;domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'&gt;
</code></pre>

<p>然后，在靠近文件的末尾处，<code>&lt;/devices&gt;</code>便签之后，加入如下内容</p>

<pre><code>&lt;qemu:commandline&gt;
    &lt;qemu:arg value='-acpitable'/&gt;
    &lt;qemu:arg value='file=/usr/share/qemu/SLIC-DELL-PE_SC3-2.1.BIN'/&gt;
&lt;/qemu:commandline&gt;
</code></pre>

<p>保存退出。其中，SLIC-DELL-PE_SC3-2.1.BIN文件可以从<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>找到。</p>

<p>重启虚拟机，然后在虚拟机下载windows工具<a href="http://forums.mydigitallife.info/threads/6925-SLIC-ToolKit-x86-x64-(Includes-PKey-amp-Cert-Backup">SLIC Toolkit</a>.若“<strong>SLIC诊断</strong>”栏显示SLIC状态为<strong>验证通过</strong>则表明已生效。</p>

<h3>在Windows里安装OEM证书和序列号</h3>

<p>现在是完事具备只欠东风了，从<a href="http://rghost.net/25221821">SLIC 2.1 BINS 1-31-2011.7z</a>压缩包中可以找到DEL的OEM证书。</p>

<p>在windows控制台中使用如下命令导入</p>

<pre><code>&gt; slmgr -ilc DELL-DELL-2.0.XRM-MS
</code></pre>

<p>然后在这里<a href="http://forums.mydigitallife.info/threads/2827-Server-2008-Server-2008-R2-OEM-SLP-Keys">Server 2008/Server 2008 R2 OEM SLP Keys</a>找到对应的Key。使用下面的命令导入</p>

<pre><code>&gt; slmgr -ipk D7TCH-6P8JP-KRG4P-VJKYY-P9GFF
</code></pre>

<p>重新打开<a href="http://forums.mydigitallife.info/threads/6925-SLIC-ToolKit-x86-x64-(Includes-PKey-amp-Cert-Backup">SLIC Toolkit</a>工具，若“<strong>序列号与证书验证及备份</strong>”栏显示<strong>证书正确</strong>，那表示已经大功告成。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://virtual.51cto.com/art/201206/341911.htm">在Ubuntu 12.04 LTS服务器上借助KVM实现虚拟化</a></li>
<li><a href="https://www.nnbfn.net/2011/01/installing-win-server-2008-r2-as-a-kvm-guest-with-virtio/">Installing Win Server 2008 R2 as a KVM Guest with VirtIO</a></li>
<li><a href="http://forums.mydigitallife.info/threads/33723-Crafting-an-SLIC-BIOS-for-Linux-KVM-Guests">Crafting an SLIC BIOS for Linux KVM Guests</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server 12.10修改语言环境]]></title>
    <link href="http://vangie.github.com/blog/2012/12/04/change-default-locale-in-ubuntu-server-12-dot-10/"/>
    <updated>2012-12-04T16:59:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/12/04/change-default-locale-in-ubuntu-server-12-dot-10</id>
    <content type="html"><![CDATA[<blockquote><p>安装的时候把ubuntu server的默认语言设置成了中文，由于默认没有安装中文字体，控制台一片乱码。所有要么安装字体<code>sudo apt-get install language-pack-zh</code>,要么把语言环境设置成英文。</p></blockquote>

<p>网上大部分文章都提到修改<code>/etc/environment</code>文件，但是打开<code>/etc/environment</code>文件，默认是空的，说明这种方法虽然可以达到效果，但不是最完美的。更好的方式如下：</p>

<pre><code>$ sudo update-locale LANG=en_US.UTF-8
$ sudo update-locale LANGUAGE=en_US.en
</code></pre>

<p>然后重启系统即可。</p>

<!-- more -->


<h3>参考文献</h3>

<ol>
<li><a href="http://askubuntu.com/questions/89976/how-to-change-the-default-locale-in-ubuntu-10-10-server">How to change the default locale in ubuntu 10.10 server</a></li>
<li><a href="http://www.slyar.com/blog/ubuntu-server-utf8-zhcn.html">Ubuntu Server下配置UTF-8中文/英文环境</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X下如何清除DNS缓存]]></title>
    <link href="http://vangie.github.com/blog/2012/11/20/how-to-flush-your-dns-cache-in-mac-os-x/"/>
    <updated>2012-11-20T16:23:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/20/how-to-flush-your-dns-cache-in-mac-os-x</id>
    <content type="html"><![CDATA[<blockquote><p>系统管理员或者web开发者，偶尔需要刷新一下DNS，由于DNS存在本地缓存，如果不主动清除，那需要一段漫长的等待</p></blockquote>

<p>OS X Lion (10.7) and OS X Mountain Lion (10.8)</p>

<pre><code>$ sudo killall -HUP mDNSResponder
</code></pre>

<p>Mac OS X 10.5, Mac OS X 10.6</p>

<pre><code>$ dscacheutil -flushcache
</code></pre>

<p>Mac OS X 10.4 Tiger</p>

<pre><code>$ lookupd -flushcache
</code></pre>

<h4>参考文献</h4>

<ol>
<li><a href="http://osxdaily.com/2008/03/21/how-to-flush-your-dns-cache-in-mac-os-x/">How to Flush DNS Cache in Mac OS X</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lion系统安装GNU Grep]]></title>
    <link href="http://vangie.github.com/blog/2012/11/12/install-gnu-grep-in-mountain-lion/"/>
    <updated>2012-11-12T11:32:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/12/install-gnu-grep-in-mountain-lion</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://news.ycombinator.com/item?id=4588304">由于License的问题</a>，OS X将GNU Grep替换成了FreeBSD Grep，这两个版本的grep大部分都兼容，FreeBSD Grep唯独少了-P（&#8211;per-regex）选项，缺少了对Perl正则表达式的支持。</p></blockquote>

<p>可以通过使用homebrew自己安装GNU Grep以兼容包含-P参数的bash脚本。</p>

<pre><code>$ brew tap homebrew/dupes/
$ brew install homebrew/dupes/grep
</code></pre>

<p>记得在PATH里确保/usr/local/bin在/usr/bin前面，并重启终端。</p>

<!-- more -->


<h4>参考文献</h4>

<ol>
<li><a href="http://superuser.com/questions/419467/grep-in-mac-os-xs-terminal-only-displaying-one-color">Grep in Mac OS X&#8217;s terminal — only displaying one color</a></li>
<li><a href="http://www.dirtdon.com/?p=1452">Perl Regex Removed From Grep in Mountain Lion</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下安装Gate One]]></title>
    <link href="http://vangie.github.com/blog/2012/11/07/install-gateone-on-mac-osx/"/>
    <updated>2012-11-07T22:07:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/07/install-gateone-on-mac-osx</id>
    <content type="html"><![CDATA[<blockquote><p>HTML5终端模拟器/SSH客户端<a href="http://liftoffsoftware.com/Products/GateOne">Gate One</a>发布了<a href="https://github.com/liftoff/GateOne/downloads">v1.1版</a>。主要新特性包括：安全增强，性能改进，移动浏览器支持，改进终端模拟，系统日志信息的自动语法高亮，捕捉以及以图像形式展示PDF，Python 3支持，IE10支持，等等。官方DEMO演示显示你可以在浏览器上尝试vim，玩终端游戏，在lynx中冲浪，等等。</p></blockquote>

<p>官方给出了RPM，DEB安装包唯独没有mac下的安装包，由于该项目太新，也就不指望homebrew安装了，只能选择从源码安装。</p>

<!-- more -->


<h3>准备</h3>

<p>根据<a href="http://liftoff.github.com/GateOne/About/index.html#installation">官方的安装指南</a>,安装前置需求软件：</p>

<table>
<thead>
<tr>
<th align="left">软件               </th>
<th align="right"> 版本</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Python               </td>
<td align="right"> 2.6+ 或者 3.2+</td>
</tr>
<tr>
<td align="left">Tornado Framework    </td>
<td align="right"> 2.2+  </td>
</tr>
</tbody>
</table>


<p>终端执行如下命令验证</p>

<pre><code>user@modern-host:~ $ python -V 
Python 2.7.2+ 
user@modern-host:~ $ python -c "import tornado;print(tornado.version)" 
2.4 
</code></pre>

<p>若tornado没有安装，执行如下命令安装</p>

<pre><code>user@modern-host:~ $ sudo pip install tornado kerberos
</code></pre>

<h3>安装</h3>

<p>执行如下命令即可完成安装，安装目录位于/opt/gateone</p>

<pre><code>user@whatever:~ $ tar zxvf gateone*.tar.gz; cd GateOne*; sudo python setup.py install
</code></pre>

<p>由于gateone依赖dtach和PIL，如果没有安装这两个东西，启动的时候会提示某些功能会失效</p>

<pre><code>$ brew install dtach
$ sudo pip install PIL
</code></pre>

<h3>启动</h3>

<pre><code>$ cd /opt/gateone
$ sudo ./gateone.py
</code></pre>

<p>在chrome浏览器打开https://127.0.0.1即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过IP地址获得windows机制主机名]]></title>
    <link href="http://vangie.github.com/blog/2012/11/06/get-the-hostname-of-a-windows-machine-by-ip-address/"/>
    <updated>2012-11-06T11:46:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/06/get-the-hostname-of-a-windows-machine-by-ip-address</id>
    <content type="html"><![CDATA[<blockquote><p>局域网内可以通过NetBIOS协议将IP地址转换为windows机器的主机名</p></blockquote>

<h3>Windows</h3>

<pre><code>nbtstat -a [ip]
</code></pre>

<h3>Linux</h3>

<pre><code> nmblookup -A [ip]
</code></pre>

<h3>Mac OS</h3>

<pre><code>smbutil status [ip]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson多态类型数据绑定]]></title>
    <link href="http://vangie.github.com/blog/2012/11/03/jackson-polymorphic-deserialization/"/>
    <updated>2012-11-03T14:28:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/11/03/jackson-polymorphic-deserialization</id>
    <content type="html"><![CDATA[<blockquote><p>Jackson数据绑定可以很方便的将java的对象类型和json数据格式之间进行转换。对于有多个子类型的多态集成结构的对象，Jackson在序列化的时候加入一些类型信息，可以在反序列化的时候准确的还原某个类型的子类。</p></blockquote>

<p>想要把JSON数据准确的反序列化为正确的子类型，简单的方法就是在数据中存储数据的类型。但是Jackson序列化时默认不会将对象的类型信息保存到Json数据中。有两种方式开始使Jackson序列化类型信息</p>

<!-- more -->


<h3>方式一：全局Default Typing机制</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">enableDefaultTyping</span><span class="o">();</span> <span class="c1">// default to using DefaultTyping.OBJECT_AND_NON_CONCRETE</span>
</span><span class='line'><span class="n">objectMapper</span><span class="o">.</span><span class="na">enableDefaultTyping</span><span class="o">(</span><span class="n">ObjectMapper</span><span class="o">.</span><span class="na">DefaultTyping</span><span class="o">.</span><span class="na">NON_FINAL</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>DefaultTyping有四个选项</p>

<ul>
<li><strong>JAVA_LANG_OBJECT</strong>: 当对象属性类型为Object时生效</li>
<li><strong>OBJECT_AND_NON_CONCRETE</strong>: 当对象属性类型为Object或者非具体类型（抽象类和接口）时生效</li>
<li><strong>NON_CONCRETE_AND+_ARRAYS</strong>: 同上, 另外所有的数组元素的类型都是非具体类型或者对象类型</li>
<li><strong>NON_FINAL</strong>: 对所有非final类型或者非final类型元素的数组</li>
</ul>


<p>开启DefaultTyping，并且让所有的非final类型对象持久化时都存储类型信息显然能准确的反序列多态类型的数据。</p>

<h3>方式二： 为Class添加@JsonTypeInfo</h3>

<p>先来看看<code>objectMapper.enableDefaultTyping()</code>的源码。</p>

<pre><code>/**
 * Convenience method that is equivalent to calling
 *&lt;pre&gt;
 *  enableObjectTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
 *&lt;/pre&gt;
 */
public ObjectMapper enableDefaultTyping() {
    return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
}

/**
 * Convenience method that is equivalent to calling
 *&lt;pre&gt;
 *  enableObjectTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
 *&lt;/pre&gt;
 */
public ObjectMapper enableDefaultTyping(DefaultTyping dti) {
    return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
}
</code></pre>

<p>该方法内部调用涉及到了<code>JsonTypeInfo.As.WRAPPER_ARRAY</code>。下面我们来看看如何使用@JsonTypeInfo这个注释来更精细的定制序列化的JSON文件格式。</p>

<pre><code>@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property="@class")
class Animal { } 
</code></pre>

<p>在超类Animal上加上一段@JsonTypeInfo，所有Animal的子类反序列化都可以准确的对于子类型。
我们来解释一下这段注释的意思：</p>

<ul>
<li><code>use=JsonTypeInfo.Id.CLASS</code>:使用类的完全限定名作为唯一识别</li>
<li><code>include=JsonTypeInfo.As.PROPERTY</code>:将这个唯一识别的字段保存为属性值</li>
<li><code>property="@class"</code>该属性值的名称为@class</li>
<li><code>@JsonTypeResolver</code>和<code>@JsonTypeIdResolver</code>取默认值时可以省略</li>
<li>加上了该注释的类型和子类型都会生效</li>
</ul>


<p>use的几个可选值</p>

<ul>
<li>CLASS 完全限定名</li>
<li>MINIMAL_CLASS 类名，若基类和子类在同一包类，会省略包名</li>
<li>NAME 逻辑名，需要单独定义名称与类的对应关系</li>
<li>CUSTOM 由@JsonTypeIdResolver对应</li>
</ul>


<p>include的几个选值</p>

<ul>
<li>PROPERTY 将属性包含在对象成员属性里</li>
<li>WRAPPER_OBJECT 属性作为键，序列化的对象作为值</li>
<li>WRAPPER_ARRAY 第一个元素是类型ID，第二原始是序列化的对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">// Type name as a property, same as above</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;@type&quot;</span> <span class="o">:</span> <span class="s">&quot;Employee&quot;</span><span class="o">,</span>
</span><span class='line'>     <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wrapping class name as pseudo-property (similar to JAXB)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;com.fasterxml.beans.EmployeeImpl&quot;</span> <span class="o">:</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">...</span> <span class="c1">// actual instance data without any metadata properties</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wrapping class name as first element of wrapper array:</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="s">&quot;com.fasterxml.beans.EmployeeImpl&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>       <span class="o">...</span> <span class="c1">// actual instance data without any metadata properties</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考文献</h3>

<ol>
<li><a href="http://wiki.fasterxml.com/JacksonPolymorphicDeserialization">JacksonPolymorphicDeserialization</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[登录Shell和交互Shell的区别]]></title>
    <link href="http://vangie.github.com/blog/2012/10/11/different-between-login-shell-and-interactive-shell/"/>
    <updated>2012-10-11T14:47:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/10/11/different-between-login-shell-and-interactive-shell</id>
    <content type="html"><![CDATA[<blockquote><p>遇到两个shell的概念：<code>交互式登录shell</code>和<code>交互式非登录shell</code>。要理解上面两个术语，先要理清两个概念<code>登录shell</code>和<code>交互shell</code></p></blockquote>

<!-- more -->


<h3>登录shell（Login shell）</h3>

<p>从tty下登录（login）进去的shell称为<code>登录shell</code>,在已经登录的shell执行bash或者su命令启动的shell称为<code>非登录shell</code>（non-login shell）注意：通过命令<code>su -l [username]</code>可以进入<code>登录shell</code>，另外在图形界面（如Gnome）打开的命令行窗口（terminal）属于<code>非登录shell</code>。</p>

<h5>配置文件</h5>

<p>登录shell和非登录shell启动的时候会装载不同的配置文件。</p>

<p>登录shell</p>

<ul>
<li><code>/etc/profile</code></li>
<li><code>~/.bash_profile</code></li>
<li><code>~/.profile</code></li>
</ul>


<p>非登录shell</p>

<ul>
<li><code>/etc/bashrc</code>或者<code>/etc/bash.bashrc</code></li>
<li><code>~/.bash_rc</code></li>
</ul>


<h3>交互shell（Interactive Shell）</h3>

<p>交互就是<code>REPL</code>（Read-Eval-Print-Loop）。通俗的说，就是你输入点什么，它执行，然后你查看输出结果，周而复始。我们通常使用的shell都是<code>交互shell</code>。而<code>非交互shell</code>常见的场景是执行bash脚本的时候<code>bash script.sh</code>。shell以一种静默的方式逐行连续执行脚本。</p>

<p><code>登录shell</code>和<code>交互shell</code>是两个不同纬度的概念，所以组合就有所谓的<code>交互式登录shell</code>和<code>交互式非登录shell</code>。</p>

<h5>如何退出交互shell</h5>

<p>对于<code>非登录shell</code>执行<code>exit</code>命令，对于<code>登录shell</code>执行<code>logout</code>命令.</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://www.51testing.com/?uid-225738-action-viewspace-itemid-216858">交互式shell和非交互式shell、登录shell和非登录shell的区别</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决rinse安装CentOS 6报错找不到'/dev/urandom'的问题]]></title>
    <link href="http://vangie.github.com/blog/2012/10/09/yum-aborts-with-missing-uramdon-when-rinse-installing-centos-6/"/>
    <updated>2012-10-09T15:53:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/10/09/yum-aborts-with-missing-uramdon-when-rinse-installing-centos-6</id>
    <content type="html"><![CDATA[<blockquote><p>Debian系统xen安装centos 6.3失败，报错找不到<code>/dev/urandom</code>。</p></blockquote>

<h3>错误如下</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  File "/usr/lib64/python2.4/random.py", line 109, in seed
</span><span class='line'>    a = long(_hexlify(_urandom(16)), 16)
</span><span class='line'>OSError: [Errno 2] No such file or directory: '/dev/urandom'</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>解决方法</h3>

<p><code>vim /usr/lib/rinse/common/30-dev-urandom.sh</code>内容如下</p>

<pre><code>#!/bin/sh
#
#  Ensure the chroot has /dev/random and /dev/urandom
#
# Dan Kegel
# --


#
#  Get the root of the chroot.
#
prefix=$1

#
#  Ensure it exists.
#
if [ ! -d "${prefix}" ]; then
  echo "Serious error - the named directory doesn't     exist."
  exit
fi

#
#  Ensure we have /dev
#
if [ ! -d "${prefix}/dev" ]; then
    mkdir "${prefix}/dev"
fi


#
#  Create the nodes
#
echo "  Creating random devices in /dev"
if [ !  -e "${prefix}/dev/random" ]; then
    mknod -m 666 "${prefix}/dev/random" c 1 8
    chown root:root "${prefix}/dev/random"
fi
if [ !  -e "${prefix}/dev/urandom" ]; then
    mknod -m 666 "${prefix}/dev/urandom" c 1 9
    chown root:root "${prefix}/dev/urandom"
fi
</code></pre>

<p>然后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x /usr/lib/rinse/common/30-dev-urandom.sh
</span></code></pre></td></tr></table></div></figure>


<p>重新执行<code>xen-create-image</code>命令即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xen-create-image --hostname<span class="o">=</span>yourHostName --ip<span class="o">=</span>yourIP --dist<span class="o">=</span>centos-6 --install-method<span class="o">=</span>rinse --force --arch<span class="o">=</span>amd64
</span></code></pre></td></tr></table></div></figure>


<h3>参考文献</h3>

<p>1.<a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=685640">yum aborts with missing /dev/urandom at end of &#8220;rinse &#8211;arch amd64 &#8211;distribution centos-6&#8221;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X配置I2P匿名网络]]></title>
    <link href="http://vangie.github.com/blog/2012/10/07/config-i2p-router-in-macos-x/"/>
    <updated>2012-10-07T11:37:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/10/07/config-i2p-router-in-macos-x</id>
    <content type="html"><![CDATA[<blockquote><p>I2P 是一个匿名网络项目，它提供了一个简单的网络层供对身份敏感的程序进行安全的匿名通讯。I2P 网络是动态的分布式网络，它在设计上并不信任网络中的任何一方，其中的所有数据都经过多层加密。</p></blockquote>

<p>简单的说I2P和Tor一样都可以作为梯子。相比Tor，I2P不需要中央服务器，属于分布式的匿名网络，更难被封杀。下面介绍如何在MacOS X下将I2P配置成本地的HTTP Proxy服务。</p>

<!-- more -->


<h3>下载安装</h3>

<p>打开I2P的<a href="http://www.i2p2.de/download_zh.html">下载页面</a>,找到“Linux / OS X / BSD / Solaris 图形安装程序”下载i2pinstall_0.9.2.jar</p>

<p>然后在命令行里执行（需要java环境）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar i2pinstall_0.9.2.jar
</span></code></pre></td></tr></table></div></figure>


<p>图形向导很简单，没有什么特别需要注意的，可以选择<strong>中文</strong>界面语言。</p>

<h3>运行配置</h3>

<p>双击I2P安装目录（默认位置：/Applications/i2p）里Start I2P Router.app,I2P服务就启动了，浏览器打开<code>http://127.0.0.1:7657/</code>可以配置I2P服务。</p>

<h5>补种</h5>

<p>若此时网络状态为：<strong>测试中</strong>，则需要补种，默认的种子列表都被墙了。补种的方式有如下两个，请根据个人喜好任选一个。</p>

<ol>
<li><p>手动下载种子</p>

<p> 请翻墙打开官网的<a href="http://netdb.i2p2.de/">种子列表</a>，把页面上列出的大约20个种子下载下来。然后把下载的种子放到本机的 /Applications/i2p/netDb 目录下（这个目录是 I2P 用来存放种子的）。再把 I2P 重新启动一下。</p></li>
<li><p>通过代理补种</p>

<p> I2P 可以连接到它的官网去补种。但是 I2P 的官网被封。所以你需要在 I2P 的<a href="http://127.0.0.1:7657/configreseed">补种界面</a>添加代理，让 I2P 先暂时利用其它翻墙软件补充种子。</p></li>
</ol>


<p>不管哪种方法都是欲要翻墙先得翻墙</p>

<h5>UPnP</h5>

<p>若此时网络状态为：<strong>防火墙限制</strong>，这需要修改本地路由器配置开启UPnP。</p>

<p>重启后，若网络状态为：<strong>正常</strong> 或者 <strong>隐身</strong>,则表示服务已经正常启动。i2p会在4444端口，开启http代理服务；4445端口，开启https代理服务。</p>

<h3>后台服务</h3>

<p>双击<code>/Applications/i2p/install_i2p_service_osx.command</code>,i2p被注册成后台服务。</p>

<h3>参考文献</h3>

<ol>
<li><a href="http://program-think.blogspot.com/2012/06/gfw-i2p.html">如何翻墙：简单扫盲 I2P 的使用</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJs里给图片添加水印]]></title>
    <link href="http://vangie.github.com/blog/2012/09/20/create-warkmarked-picture-using-node-js/"/>
    <updated>2012-09-20T00:44:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/20/create-warkmarked-picture-using-node-js</id>
    <content type="html"><![CDATA[<p><a href="http://imagemagick.org/">ImageMagick</a>和<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>是两款强大的跨平台图片命令行工具,据说<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>是从<a href="http://imagemagick.org/">ImageMagick</a>分支出来的,更稳定些.</p>

<p>Java平台图片处理包<a href="http://im4java.sourceforge.net/">im4java</a>使用JNI的方式封装了<a href="http://imagemagick.org/">ImageMagick</a>.NodeJs平台图片处理模块<a href="http://aheckmann.github.com/gm/">gm</a>只需要<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>和<a href="http://imagemagick.org/">ImageMagick</a>任选一种安装就好了.</p>

<!-- more -->


<p>使用<a href="http://aheckmann.github.com/gm/">gm</a>进行图片处理非常之方便</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gm</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gm&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gm</span><span class="p">(</span><span class="s1">&#39;/path/to/image.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">resize</span><span class="p">(</span><span class="mi">353</span><span class="p">,</span> <span class="mi">257</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">autoOrient</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">writeStream</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39; hooray! &#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在Mac平台安装有些麻烦,由于<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>使用了linux的图形库,所以需要先安装<a href="http://xquartz.macosforge.org/">XQuartz</a>,最新版本已经支持Mountain Lion了.</p>

<p><a href="http://www.graphicsmagick.org/">GraphicsMagick</a>可以通过homebrew安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install graphicsmagick
</span></code></pre></td></tr></table></div></figure>


<p>装<a href="http://aheckmann.github.com/gm/">gm</a>就不多说了<code>npm install gm</code></p>

<p><a href="http://aheckmann.github.com/gm/">gm</a>目前只封装了<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>的<code>convert</code>子命令,添加水印需要的用到<code>composite</code>子命令.所以只能采用下策:直接调用<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>命令行接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">spawn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;child_process&#39;</span><span class="p">).</span><span class="nx">spawn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">composite</span> <span class="o">=</span> <span class="nx">spawn</span><span class="p">(</span><span class="s1">&#39;gm&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;composite&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;-gravity&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;SouthEast&#39;</span><span class="p">,</span> <span class="c1">//右下角</span>
</span><span class='line'>      <span class="s1">&#39;-dissolve&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;80&#39;</span><span class="p">,</span> <span class="c1">//溶解度,和透明度类似</span>
</span><span class='line'>      <span class="s1">&#39;watermark.png&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;src.jpg&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;dest.jpg&#39;</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">composite</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">composite</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">composite</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;exit&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">code</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;gm composite process exited with code &#39;</span> <span class="o">+</span> <span class="nx">code</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJs里将中文字符转换成拼音字母]]></title>
    <link href="http://vangie.github.com/blog/2012/09/18/convert-chinese-character-to-pinyin-in-nodejs/"/>
    <updated>2012-09-18T01:12:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/18/convert-chinese-character-to-pinyin-in-nodejs</id>
    <content type="html"><![CDATA[<p>中文文件名在不同的平台下常常会出现乱码问题.除了理清编码关系,正确的编解码外,比较简单的办法就是把中文去掉或者不用中文.</p>

<p>最近在做一个文件上传相关的功能,windows下的中文文件传到linux服务器上变成一串乱码文件名.于是想把文件名里的中文字符转换成拼音字母,这样相比直接使用UUID之类的做法,保留了部分语意.</p>

<!-- more -->


<p>Javascript作为一个轻量级的脚本语言本身并不支持字符到拼音的转换,甚至不支持字符集的转换.<a href="https://github.com/hotoo/pinyin.js">pinyin.js</a>是一个支持汉字转换成拼音的js库,<a href="https://github.com/vingel/node-pinyin">node-pinyin</a>是基于该库在node平台的一个简单移植版本.使用起来比较简单.</p>

<p>安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install pinyin</span></code></pre></td></tr></table></div></figure>


<p>下面给出中文文件名的转换拼音方法源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pinyin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pinyin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">normalize</span><span class="p">(</span><span class="nx">originalName</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">originalName</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">charcode</span> <span class="o">=</span> <span class="nx">originalName</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="kr">char</span> <span class="o">=</span> <span class="nx">originalName</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span> <span class="o">&gt;</span> <span class="mi">47</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span> <span class="o">&lt;</span><span class="mi">58</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="kr">char</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">&gt;</span><span class="mi">64</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span><span class="o">&lt;</span><span class="mi">91</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="kr">char</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">&gt;</span><span class="mi">96</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span><span class="o">&lt;</span><span class="mi">123</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="kr">char</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">&gt;</span> <span class="mh">0x4E00</span> <span class="o">&amp;&amp;</span> <span class="nx">charcode</span> <span class="o">&lt;</span> <span class="mh">0x9FA5</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="p">(</span><span class="s2">&quot;_&quot;</span> <span class="o">+</span> <span class="nx">pinyin</span><span class="p">(</span><span class="kr">char</span><span class="p">,</span><span class="kc">true</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">charcode</span><span class="o">==</span><span class="mi">46</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="s1">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="s1">&#39;_&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个瀑布流风格布局的jQuery插件]]></title>
    <link href="http://vangie.github.com/blog/2012/09/14/pinterest-like-layout-by-jquery/"/>
    <updated>2012-09-14T22:49:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/14/pinterest-like-layout-by-jquery</id>
    <content type="html"><![CDATA[<p>Pinterest的瀑布流布局,让人眼睛一亮,看图的过程变得很享受.巧妙的改善了分页让阅读中断的问题,页面懒装载的设计也很好的解决了一次性装载图片过多页面加载缓慢的问题.国内的<a href="http://huaban.com/">花瓣网</a>,借鉴了瀑布流的设计,做得挺不错的.</p>

<!-- more -->


<p>找了几个瀑布流的插件</p>

<ul>
<li><a href="http://masonry.desandro.com/">jQuery Masonry</a></li>
<li><a href="http://isotope.metafizzy.co/">jQuery Isotope</a></li>
<li><a href="http://www.wookmark.com/jquery-plugin">The Wookmark jQuery plugin</a></li>
<li><a href="http://imakewebthings.com/jquery-waypoints/">jQuery Waypoints plugin</a> 这款插件可以实现无线滚动条</li>
</ul>


<h4>参考文献</h4>

<ol>
<li><a href="http://ericbae.com/2012/01/30/implement-a-pinterest-like-layout/">Implement a Pinterest-like layout!</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求最大色差颜色]]></title>
    <link href="http://vangie.github.com/blog/2012/09/13/calculate-max-difference-color/"/>
    <updated>2012-09-13T22:51:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/13/calculate-max-difference-color</id>
    <content type="html"><![CDATA[<blockquote><p>对于一个给定的前景色，如何找到一个与之色差较大的背景色，使之醒目？</p></blockquote>

<h3>反色</h3>

<p>对颜色值取反，比较简单的方法：<code>0xFFFFFF - $color</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nx">coffeescript</span>
</span><span class='line'><span class="nv">invert = </span><span class="nf">(color) -&gt;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="s">&quot;000000&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="mh">0xFFFFFF</span> <span class="o">^</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="mi">16</span><span class="p">)).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是当<code>$color = 0x808080</code>时,<code>$color ≈ 0xFFFFFF - $color</code>前景色和背景色非常接近，显然取反的方法有瑕疵。</p>

<!-- more -->


<h3>何为色差</h3>

<p>色差简单来说就是颜色的差别,定量表示的色知觉差异。从<strong>明度</strong>、<strong>色调</strong>和<strong>彩度</strong>这三种颜色属性的差异来表示。明度差表示深浅的差异，色调差表示色相的差异（即偏红或偏蓝等），彩度差表示鲜艳度的差异。通过明度(L)、色调(A)和彩度(B)表示的颜色模型，称为LAB颜色模型，区别于RGB和CMYK颜色模型。</p>

<p><strong>LAB的取值范围</strong></p>

<ul>
<li>L [0, 100]</li>
<li>A [-128, 127]</li>
<li>B [-128, 127]</li>
</ul>


<h3>如何计算色差</h3>

<p><img src="http://upload.wikimedia.org/math/9/1/0/910227e12a98c6df4664034d33c2e91c.png" alt="色差计算公式" />
 ，其中<img src="http://upload.wikimedia.org/math/b/0/6/b06a11157eefd0439922bc2c5f390502.png" alt="颜色1" />和<img src="http://upload.wikimedia.org/math/4/0/1/4013fe6a2bdda4d686baa791861d3db5.png" alt="颜色2" />分别表示两个不同的LAB模型颜色。</p>

<h3>求得与某一颜色的色差最大的颜色</h3>

<p>根据上面的色差计算公式，对于一个给定的LAB颜色，计算出色差最大的颜色是很容易的。L1，a1和b1分别与对应取值范围的中值比较，小于中值取上界，大于中值去下届</p>

<pre><code>L2 = L1&lt;50?100:0
a2 = a1&lt;0?127:-128
b2 = b1&lt;0?127:-128
</code></pre>

<p>但是计算机和常见程序设计语言的采用RGB模型表示颜色。所以需要先将RGB颜色转换成LAB颜色，计算出最大色差颜色的LAB表示法，然后再转换成RGB颜色。</p>

<p><strong>RGB -> LAB</strong></p>

<pre><code>L = (13933 * R + 46871 * G + 4732 * B) / 2^16
a = 377 * (14503 * R - 22218 * G + 7714 * B) / 2^24 + 128
b = 160 * (12773 * R + 39695 * G - 52468 * B) / 2^24 + 128
</code></pre>

<p><strong>LAB -> RGB</strong></p>

<pre><code>R = L1 + (a1 * 100922 + b1 * 17790) / 2^23
G = L1 - (a1 * 30176 + b1 * 1481) / 2^23
B = L1 + (a1 * 1740 - b1 * 37719) / 2^23
</code></pre>

<p>真的有必要通过繁琐的步骤求出最大色差么，能不能简单的获得一个较大色差？</p>

<h3>近似求法</h3>

<p>如果我们略去RGB与LAB的转换，分别找出与R值，G值和B值的差值最大的R‘，G’和B‘也能取得较好的效果</p>

<pre><code>R' = R&lt;128 ? 255 : 0
G' = G&lt;128 ? 255 : 0
B' = B&lt;128 ? 255 : 0
</code></pre>

<p>源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span><span class="nx">coffeescript</span>
</span><span class='line'><span class="nv">diff = </span><span class="nf">(color) -&gt;</span>
</span><span class='line'>  <span class="nv">hex = </span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">r = </span><span class="k">if</span> <span class="p">(</span> <span class="nx">hex</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">128</span> <span class="k">then</span> <span class="s">&#39;00&#39;</span> <span class="k">else</span> <span class="s">&#39;FF&#39;</span>
</span><span class='line'>  <span class="nv">g = </span><span class="k">if</span> <span class="p">(</span> <span class="nx">hex</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">128</span> <span class="k">then</span> <span class="s">&#39;00&#39;</span> <span class="k">else</span> <span class="s">&#39;FF&#39;</span>
</span><span class='line'>  <span class="nv">b = </span><span class="k">if</span> <span class="p">(</span> <span class="nx">hex</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">128</span> <span class="k">then</span> <span class="s">&#39;00&#39;</span> <span class="k">else</span> <span class="s">&#39;FF&#39;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span> <span class="o">+</span> <span class="nx">r</span> <span class="o">+</span> <span class="nx">g</span> <span class="o">+</span> <span class="nx">b</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考文献</h3>

<ol>
<li><a href="http://maestric.com/doc/color_brightness_difference_calculator">Online calculator of color difference and color brightness difference</a></li>
<li><a href="http://en.wikipedia.org/wiki/Color_difference">Wikipedia - Color difference</a></li>
<li><a href="http://hao.qinz.net/comments.php?y=08&amp;m=07&amp;entry=entry080727-033517">从RGB到Lab色彩空间的转换</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJs里实现HTTP基本认证]]></title>
    <link href="http://vangie.github.com/blog/2012/09/13/http-basic-auth-in-nodejs/"/>
    <updated>2012-09-13T00:58:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/13/http-basic-auth-in-nodejs</id>
    <content type="html"><![CDATA[<h2>何为HTTP基本认证(HTTP Basic Auth)</h2>

<p>在HTTP中，基本认证是一种用来允许Web浏览器，或其他客户端程序在请求时提供以用户名和口令形式的凭证。
通常我们通过浏览器去访问一个SVN代码库，浏览器会弹出一个窗口，要求输入用户名和密码。一般SVN的的Web服务端采用Apache服务器，因为Apache实现了WebDAV协议，支持HTTP协议管理SVN库。Apache里HTTP基本认证的功能是通过<a href="http://httpd.apache.org/docs/2.2/mod/mod_auth_basic.html" title="Apache Module mod_auth_basic">mod_auth_basic</a>模块实现的。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Location</span> <span class="err">/secure</span><span class="nt">&gt;</span>
</span><span class='line'>  AuthType basic
</span><span class='line'>  AuthName &quot;private area&quot;
</span><span class='line'>  AuthBasicProvider dbm
</span><span class='line'>  AuthDBMType SDBM
</span><span class='line'>  AuthDBMUserFile /www/etc/dbmpasswd
</span><span class='line'>  Require valid-user
</span><span class='line'><span class="nt">&lt;/Location&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>HTTP基本认证的实现机制</h2>

<ol>
<li>客户端请求一个需要身份认证的页面，但是没有提供用户名和口令。</li>
<li>服务端响应一个401应答码，并提供一个认证域。在响应消息的同步加入<code>WWW-Authenticate: Basic realm="Secure Area"</code></li>
<li>接到应答后，客户端显示该认证域（通常是所访问的计算机或系统的描述）给用户并提示输入用户名和口令。此时用户可以确定取消。</li>
<li>用户输入了用户名和口令后，客户端在原先的请求上添加了认证消息头（值是<code>base64encode(username+":"+password)</code>），然后重新发送。</li>
<li>服务器接受了认证并返回了页面。如果用户名非法或口令不对，服务器可能返回401应答码，客户端可以再次提示用户输入口令，服务器也可以返回403，提示访问的内容被禁止，用户需要刷新页面再次打开用户名和口令输入窗口。</li>
</ol>


<p><strong>客户端请求</strong>（没有认证信息）:</p>

<pre><code>GET /private/index.html HTTP/1.0
Host: localhost
</code></pre>

<p><strong>服务端应答</strong>:</p>

<pre><code>HTTP/1.0 401 Authorization Required
Server: HTTPd/1.0
Date: Sat, 27 Nov 2004 10:18:15 GMT
WWW-Authenticate: Basic realm="Secure Area"
Content-Type: text/html
Content-Length: 311

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;TITLE&gt;Error&lt;/TITLE&gt;
    &lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1"&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;401 Unauthorized.&lt;/H1&gt;&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>

<p><strong>客户端的请求</strong>（用户名“&#8221;Aladdin”，口令, password “open sesame”）:</p>

<pre><code>GET /private/index.html HTTP/1.0
Host: localhost
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
</code></pre>

<h2>如何在NodeJs里实现HTTP基本认证</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;authorization&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Authorization Header is: &quot;</span><span class="p">,</span> <span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">auth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">401</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;WWW-Authenticate&#39;</span><span class="p">,</span> <span class="s1">&#39;Basic realm=&quot;Secure Area&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">auth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">auth</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s1">&#39;base64&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">plain_auth</span> <span class="o">=</span> <span class="nx">buf</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Decoded Authorization &quot;</span><span class="p">,</span> <span class="nx">plain_auth</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">creds</span> <span class="o">=</span> <span class="nx">plain_auth</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">);</span>      <span class="c1">// split on a &#39;:&#39;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">creds</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="nx">creds</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="nx">username</span> <span class="o">==</span> <span class="s1">&#39;hack&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">password</span> <span class="o">==</span> <span class="s1">&#39;thegibson&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>  <span class="c1">// OK</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;&lt;html&gt;&lt;body&gt;登录成功!&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>           <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">401</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;WWW-Authenticate&#39;</span><span class="p">,</span> <span class="s1">&#39;Basic realm=&quot;Secure Area&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Server Listening on http://localhost:5000/&quot;</span><span class="p">);</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>HTTP基本认证的缺点</h2>

<p>所有流行的网页浏览器都支持基本认证,而且非常容易实现，但它有两个非常明显的缺点。</p>

<ul>
<li>以明文传输的密钥和口令很容易被拦截</li>
<li>不关闭浏览器的情况下无法登出</li>
</ul>


<h3>参考文献</h3>

<ol>
<li><a href="http://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81">维基百科-HTTP基本认证</a></li>
<li><a href="https://gist.github.com/1686663">Example of HTTP Basic Auth in NodeJS</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浏览器自动补全不触发Input控件的onChange和onKeyup事件]]></title>
    <link href="http://vangie.github.com/blog/2012/09/10/fix-browser-autocomplete-does-not-fire-change-or-keyup-event/"/>
    <updated>2012-09-10T13:57:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/10/fix-browser-autocomplete-does-not-fire-change-or-keyup-event</id>
    <content type="html"><![CDATA[<p>表单的输入校验通常会使用<code>onBlur</code>事件，这个事件有个问题，若填完最后一个输入框时，直接点击“提交”按钮，那最后一个输入框的<code>onBlur</code>事件不会触发，导致校验不会执行。这种场景下，语意最贴切的就是<code>onChange</code>事件了，但是<code>onChange</code>事件在<code>onBlur</code>事件之后触发，所有只能用<code>onKeyup</code>或者<code>onKeyPress</code>方法来感知输入框的变化。但是如果在输入时浏览器提供自动补全的功能，那<code>onKeyup</code>和<code>onKeyPress</code>事件不会被触发。</p>

<!-- more -->


<p>下面是通过轮询输入框来模拟change事件的方法，来解决文本框内容变化不被感知的问题。</p>

<pre><code>(function($) {
    $.fn.listenForChange = function(options) {
        settings = $.extend({
            interval: 200 // 毫秒
        }, options);

        var jquery_object = this;
        var current_focus = null;

        jquery_object.filter(":input").add(":input", jquery_object).focus( function() {
            current_focus = this;
        }).blur( function() {
            current_focus = null;
        });

        setInterval(function() {
            // allow
            jquery_object.filter(":input").add(":input", jquery_object).each(function() {
                // set data cache on element to input value if not yet set
                if ($(this).data('change_listener') == undefined) {
                    $(this).data('change_listener', $(this).val());
                    return;
                }
                // return if the value matches the cache
                if ($(this).data('change_listener') == $(this).val()) {
                    return;
                }
                // ignore if element is in focus (since change event will fire on blur)
                if (this == current_focus) {
                    return;
                }
                // if we make it here, manually fire the change event and set the new value
                $(this).trigger('change');
                $(this).data('change_listener', $(this).val());
            });
        }, settings.interval);
        return this;
    };
})(jQuery);
</code></pre>

<p>然后只需要</p>

<pre><code>$("form").listenForChange();
</code></pre>

<h4>参考文献</h4>

<ol>
<li><a href="http://furrybrains.com/2009/01/02/capturing-autofill-as-a-change-event/">Capturing AutoFill as a Change Event</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《HTTP权威指南》读书笔记]]></title>
    <link href="http://vangie.github.com/blog/2012/09/08/reading-notes-of-http-the-definitive-guide/"/>
    <updated>2012-09-08T12:45:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/08/reading-notes-of-http-the-definitive-guide</id>
    <content type="html"><![CDATA[<blockquote><p>一直在做web开发，对HTTP协议还算熟悉，但是这本手册类的砖头书还是很吸引我，看了两章觉得还不错，对于巩固基础很有帮助，最近感觉记性不如从前，烂笔头越来越重要了。</p></blockquote>

<h1>第一章 HTTP概述</h1>

<h2>MIME</h2>

<p>媒体类型<code>MIME</code>（Multipurpose Internet Mail Extension）最初设计是为了解决不同的电子邮件系统之间搬移报文时存在的问题。</p>

<!-- more -->


<p>MIME类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分割</p>

<ul>
<li>HTML格式 text/html</li>
<li>ASCII文本 text/plain</li>
<li>JPEG图片 image/jpeg</li>
<li>GIF图片 image/gif</li>
</ul>


<h2>URI</h2>

<p>URI(Uniform Resource Identifier)统一资源标识符，他有两种形式URL和URN</p>

<ul>
<li>URL（Uniform Resource Locator）同一资源定位符</li>
<li>URN（Uniform Resource Name）同一资源名

<ul>
<li>由唯一的资源名来定位文件，解决URL因服务器变更等原因导致资源无法找到的问题，但是由于URL已被广泛的接受，目前URN技术没推广计划。</li>
<li>语法 <code>urn:&lt;NID&gt;:&lt;NSS&gt;</code><br/>
  <code>&lt;NID&gt;</code>表示命名空间标识符<br/>
  <code>&lt;NSS&gt;</code>表示命名空间里的特定字符</li>
</ul>
</li>
</ul>


<h2>协议</h2>

<p>HTTP协议是基于TCP协议的文本类型的报文，报文非为请求（Request）和相应（Response），报文的结构由3部分组成</p>

<ul>
<li>起始行（start line）</li>
<li>首部字段（header）</li>
<li>主体（body）</li>
</ul>


<p>Telnet实质上就是一个基于TCP协议的工具，所有可以使用Telnet工具模拟HTTP报文与web服务器通讯。</p>

<h2>HTTP协议的版本</h2>

<ul>
<li>HTTP/0.9 已经废弃</li>
<li>HTTP/1.0</li>
<li>HTTP/1.0+ 各家厂商自己扩展的协议</li>
<li>HTTP/1.1 当前使用版本</li>
<li>HTTP/2.0(HTTP-NG) 尚未推广</li>
</ul>


<h2>web的结构组件</h2>

<h3>代理</h3>

<p>位于客户端和服务器之间的HTTP中间实体。客户端向代理发出请求，代理代替客户端向服务端发出请求。</p>

<h3>缓存</h3>

<p>HTTP的仓库，使常用的页面的副本可以保存在离客户端更近的地方。</p>

<h3>网关</h3>

<p>连接其他应用程序的特殊web服务器，将HTTP协议转换为其他协议，如FTP协议</p>

<h3>隧道</h3>

<p>对HTTP通信报文进行盲目转发的特殊代理，常见用途，通过HTTP连接承载SSL流量</p>

<h3>Agent 代理</h3>

<p>发起自动HTTP请求的半智能web客户端，浏览器或者网络蜘蛛。</p>

<h2>相关资源链接</h2>

<ol>
<li><a href="http://www.ietf.org/rfc/rfc2616.txt">RFC2616 超文本传输协议-HTTP/1.1</a></li>
<li><a href="http://www.ietf.org/rfc/rfc1945.txt">RFC1945 超文本传输协议-HTTP/1.0</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2396.txt">RFC2396 统一资源标识符：通用语法</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2141.txt">RFC2141 URN语法规范</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2046.txt">RFC2046 MIME第二部分：媒体类型</a></li>
<li><a href="http://www.wrec.org/Drafts/draft-ietf-wrec-taxonomy-06.txt">因特网Web复制和缓存分类法</a></li>
<li><a href="http://www.w3.org/Protocols/WhyHTTP.html">Why HTTP</a></li>
<li><a href="http://www.w3.org/History.html">万维网简史</a></li>
<li><a href="http://www.w3.org/DesignIssues/Architecture.html">高考俯瞰Web结构</a></li>
</ol>


<h1>第二章 URL与资源</h1>

<h2>URL的语法</h2>

<pre><code>&lt;schema&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;
</code></pre>

<p>几乎没有URL包含上面的全部，最常见的部分是：<code>schema</code>，<code>host</code>，<code>path</code></p>

<ul>
<li><p>&lt;params>:参数</p>

<p>参数和参数，参数和路径之间使用<code>;</code>分割，每一级路径都可以带参数</p>

<pre><code>  ftp://prep.ai.mit.edu/pub/gnu;type=d
  http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true
</code></pre></li>
</ul>


<h2>URL字符集</h2>

<p>URL可以接受的字符是US-ASCII字符集的子集，超过该字符集的字符需要使用<code>%</code>+两位16进制数进行转义。</p>

<h2>需要转义的字符</h2>

<table>
<thead>
<tr>
<th align="left">字符           </th>
<th align="left">保留/受限</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">%             </td>
<td align="left">转移字符</td>
</tr>
<tr>
<td align="left">/             </td>
<td align="left">路径分隔符</td>
</tr>
<tr>
<td align="left">.             </td>
<td align="left">路径当前目录</td>
</tr>
<tr>
<td align="left">..            </td>
<td align="left">路径上一级目录</td>
</tr>
<tr>
<td align="left">#            </td>
<td align="left">分段定界符号</td>
</tr>
<tr>
<td align="left">?             </td>
<td align="left">查询定界符号</td>
</tr>
<tr>
<td align="left">;             </td>
<td align="left">参数定界符号</td>
</tr>
<tr>
<td align="left">:             </td>
<td align="left">方案，用户/口令,主机/端口定界符号</td>
</tr>
<tr>
<td align="left">$ , +         </td>
<td align="left">保留</td>
</tr>
<tr>
<td align="left">@ &amp; =         </td>
<td align="left">用户/主机,查询条件,键值对定界符号</td>
</tr>
<tr>
<td align="left">{}\</td>
<td align="left">\<sup>~[]&#8217;</sup>   |由于各种传输Agent代理不安全处理，受限</td>
</tr>
<tr>
<td align="left">&lt;>&#8221;           </td>
<td align="left">不安全，会破坏html文档</td>
</tr>
<tr>
<td align="left">0x00-0x1F,0x7F</td>
<td align="left">不可见</td>
</tr>
<tr>
<td align="left">>0x7F        </td>
<td align="left">超出US-ASCII字符集范围</td>
</tr>
</tbody>
</table>


<h2>PURL</h2>

<p>PURL(persistent uniform resource locators)<a href="http://purl.oclc.org">永久统一资源定位符</a>，是一种使用URL实现URN功能的方案。</p>

<h1>第三章 HTTP报文</h1>

<p>这张全面的介绍了http报文。</p>

<h2>报文的结构</h2>

<h3>报文语法</h3>

<p><strong>请求报文</strong></p>

<pre><code>&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>

<p><strong>响应报文</strong></p>

<pre><code>&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>

<h3>起始行</h3>

<p><strong>方法</strong></p>

<p>HTTP规范定义的方法：<code>GET</code>、<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>TRACE</code>、<code>OPTIONS</code>、<code>DELETE</code>。其中除了POST方法外，其它方法都是幂等的。</p>

<p>除了规范定义的7中方法，其他服务器可以实现一些自己的请求方法，这类自己实现的方法称为<code>扩展方法</code>。</p>

<p><strong>状态码分类</strong></p>

<table>
<thead>
<tr>
<th align="left">整体范围      </th>
<th align="left">已定义范围   </th>
<th align="left">分类</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">100~199      </td>
<td align="left">100-101    </td>
<td align="left">信息提示</td>
</tr>
<tr>
<td align="left">200~299      </td>
<td align="left">200-206    </td>
<td align="left">成功</td>
</tr>
<tr>
<td align="left">300~399      </td>
<td align="left">300-305    </td>
<td align="left">重定向</td>
</tr>
<tr>
<td align="left">400~499      </td>
<td align="left">400-415    </td>
<td align="left">客户端错误</td>
</tr>
<tr>
<td align="left">500~599      </td>
<td align="left">500-505    </td>
<td align="left">服务端错误</td>
</tr>
</tbody>
</table>


<p><strong>原因短语</strong></p>

<p>原因短语是响应起始行中的最后部分。他是文本形式，<code>HTTP/1.0 200 OK</code>，<code>OK</code>就是原因短语。原因短语没有控制作用，原因短语与状态码不匹配不会引发任何异常。</p>

<h3>首部</h3>

<p>首部紧接着起始行，为请求和响应添加一些附加信息，可分为</p>

<ul>
<li>通用首部</li>
<li>请求首部</li>
<li>响应首部</li>
<li>实体首部</li>
<li>扩展首部</li>
</ul>


<p>(未完待续…)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jetty临时目录被tmpwatch定时任务删除]]></title>
    <link href="http://vangie.github.com/blog/2012/09/07/jetty-tmp-deleted-by-tmpwatch-cron/"/>
    <updated>2012-09-07T16:44:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/07/jetty-tmp-deleted-by-tmpwatch-cron</id>
    <content type="html"><![CDATA[<p>linux下部署的jetty，隔大哥一周时间就会访问出错，或者出现web应用的目录列表。很长一段时间都被这个问题困扰着，由于是个演示系统，持续运行的要求不高，无奈配置了一个cron，定时重启。</p>

<p>最近发现原来linux下有一个叫做<code>tmpwatch</code>的命令，而且默认配置成了<code>cron.daily</code>。每日执行一次。</p>

<!-- more -->


<pre><code>[root@bsdn02 ~]# cat /etc/cron.daily/tmpwatch 
#! /bin/sh
flags=-umc
/usr/sbin/tmpwatch "$flags" -x /tmp/.X11-unix -x /tmp/.XIM-unix \
    -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \
    -X '/tmp/hsperfdata_*' 10d /tmp
/usr/sbin/tmpwatch "$flags" 30d /var/tmp
for d in /var/{cache/man,catman}/{cat?,X11R6/cat?,local/cat?}; do
    if [ -d "$d" ]; then
        /usr/sbin/tmpwatch "$flags" -f 30d "$d"
    fi
done
</code></pre>

<p>此定时任务根据文件的修改/创建时间,清理<code>/tmp</code>下的10天前创建或修改的文件。</p>

<p>jetty启动一个Web应用时，需要先按照<code>jetty_host_port_virtualHost_contextPath_hash</code>的格式创建一个子目录。该临时目录注册给ServletContext里的<code>javax.servlet.context.tempdir</code>属性。临时目前确定的规则如下</p>

<ol>
<li>通过<code>WebAppContext.setTempDirectory</code>设置的临时文件目录</li>
<li>上下文中已经定义的<code>javax.servlet.context.tempdir</code>所对应的目录</li>
<li><code>${jetty.home}/work</code>目录</li>
<li><code>WEB-INF/work</code>目录</li>
<li><code>${java.io.tmpdir}</code>目录</li>
</ol>


<p>默认情况下，jetty取得的临时目录是<code>${java.io.tmpdir}</code>目录,linux系统里，该目录通常指向<code>/tmp</code>目录。jetty会在临时目录里创建一个<code>webapp</code>子目录，用户存放war包里解压出来的内容。若<code>tmpwatch</code>真好删除了，<code>webapp</code>目录里的文件，特别是index.html或者index.jsp，就会导致上述的问题。</p>

<p>这里面需要注意的是，除了第一种（并且仅当该目录为Jetty创建的前提下）和最后一种使用场景下Jetty会在Web应用程序退出以后自动删除临时目录以外，其余场景Jetty都会保留临时文件目录。这就解释了为什么每隔一段时间重启服务能避开这个问题。但是更好的解决方法是，通过设置虚拟机的启动参数<code>-Djava.io.tmpdir</code>，把临时文件指向不受<code>tmpwatch</code>影响的目录位置。</p>

<h4>参考文献</h4>

<ol>
<li><a href="http://lostinmalmo.com/others/2009/04/20/jetty_tmp_dir.html">在Jetty中定位临时文件目录</a></li>
<li><a href="http://www.colorfuldays.org/program/%E9%81%87%E5%88%B0%E4%B8%80%E4%B8%AAjetty-tmp%E7%9A%84%E9%99%B7%E9%98%B1/">遇到一个Jetty tmp的陷阱</a></li>
<li><a href="http://www.longtask.com/blog/?p=734">Jetty部署中tmpdir导致服务不可用的问题</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse插件通过Maven依赖第三方jar包]]></title>
    <link href="http://vangie.github.com/blog/2012/09/05/eclipse-plugin-depend-thirdparty-jars-by-maven/"/>
    <updated>2012-09-05T22:32:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/05/eclipse-plugin-depend-thirdparty-jars-by-maven</id>
    <content type="html"><![CDATA[<blockquote><p>Osgi和Maven都分别提供了依赖管理的机制，在Osgi世界可以被依赖的单元称之为Bundle(一种特殊格式的jar)，在Maven世界称之为POM。各自的领域中都是优雅的技术，但是当两者结合在一起，就不那么美好了。</p></blockquote>

<h3>tycho让plugin和maven结合在一起</h3>

<p><a href="http://www.eclipse.org/tycho/" title="Building Eclipse plug-ins with maven">tycho</a>可以让一个eclipse plugin项目变成一个maven项目，把maven的自动构建和自动测试的优势带到了plugin项目。但是maven的另一个优势依赖管理并没有能够和plugin项目结合。</p>

<!-- more -->


<h3>OSGI如何处理依赖</h3>

<p>先简单介绍一下plugin项目不与maven结合的时候如何处理依赖问题。Eclipse plugin是构建在Osgi技术之上的，或者说Eclipse是Osgi规范的一种实现。</p>

<p>Osgi里每个独立的项目或者jar称之为Bundle，Bundle有生命周期，Osgi平台负责管理Bundle的生命周期状态和依赖关系。和Maven Repository类似，Osgi也有所谓的仓库，<a href="http://ebr.springsource.com/repository/app/" title="Bundle Repository for OSGI">SpringSource Enterprise Bundle Repository</a>和<a href="http://download.eclipse.org/eclipse/updates/4.2/" title="The software repository for the Eclipse Project">Eclipse Project Juno Software Repository</a>就是<a href="http://www.springsource.org/osgi" title="Spring Dynamic Modules">Spring DM</a>和Eclipse为各自的OSGI实现提供的官方仓库。</p>

<p>使用Maven的时候常常会发现总有几个包是仓库里找不到的。Osgi环境下也类似，通常有两种做法：</p>

<ul>
<li>通过工具直接把jar包转换成Bundle，Peter Kriens开发的<a href="http://www.aqute.biz/Bnd/Bnd" title="the Swiss army knife of OSGi">Bnd</a>是OSGI里的瑞士军刀。</li>
<li>把许多第三方jar嵌入到某个Bundle里，通过Osgi的<code>Export-Package</code>机制，将这些jar包里的类开放出来</li>
</ul>


<p>Eclipse plugin开发常用后一种方法。但是这些第三方jar包需要单独去下载，对于用惯maven的开发者来说，很难接受。</p>

<p>下面就介绍如何使用maven技术来构建这个jar包集bundle,我们将使用一个由<a href="http://felix.apache.org">Apache Felix</a>项目提供的maven插件<a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html" title="Bundle Plugin for Maven">maven-bundle-plugin</a></p>

<h3>通过maven-bundle-plugin包含第三方依赖的Bundle</h3>

<p><a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html" title="Bundle Plugin for Maven">maven-bundle-plugin</a>提供了详尽的文档和示例关于如何使用该maven插件，这里就不啰嗦了，直接贴出好用的pom文件片段吧</p>

<pre><code>&lt;project 
xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    ...

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
            &lt;version&gt;2.0.5&lt;/version&gt;
        &lt;/dependency&gt;   
    &lt;/dependencies&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
                &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.1.0&lt;/version&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
                &lt;configuration&gt;
                    &lt;manifestLocation&gt;META-INF&lt;/manifestLocation&gt;
                    &lt;instructions&gt;
                        &lt;Bundle-SymbolicName&gt;${project.artifactId}&lt;/Bundle-SymbolicName&gt;
                        &lt;Bundle-RequiredExecutionEnvironment&gt;
                            J2SE-1.5
                        &lt;/Bundle-RequiredExecutionEnvironment&gt;
                        &lt;Embed-Dependency&gt;
                            *;scope=compile|runtime;inline=false
                        &lt;/Embed-Dependency&gt;
                        &lt;_exportcontents&gt;
                            com.fasterxml.jackson.core.*,
                            com.fasterxml.jackson.databind.*,
                            com.fasterxml.jackson.annotation.*
                        &lt;/_exportcontents&gt;
                        &lt;Bundle-ClassPath&gt;.,{maven-dependencies}&lt;/Bundle-ClassPath&gt;
                        &lt;Embed-Transitive&gt;true&lt;/Embed-Transitive&gt;
                        &lt;Embed-Directory&gt;jars&lt;/Embed-Directory&gt;
                        &lt;Embed-StripGroup&gt;true&lt;/Embed-StripGroup&gt;
                        &lt;_failok&gt;true&lt;/_failok&gt;
                        &lt;_nouses&gt;true&lt;/_nouses&gt;
                    &lt;/instructions&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                &lt;executions&gt;

                    &lt;execution&gt;
                        &lt;id&gt;copy-dependencies&lt;/id&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;outputDirectory&gt;jars&lt;/outputDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
        &lt;pluginManagement&gt;
            &lt;plugins&gt;
                &lt;!--This plugin's configuration is used to store Eclipse m2e settings 
                    only. It has no influence on the Maven build itself. --&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;
                    &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;
                    &lt;version&gt;1.0.0&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;lifecycleMappingMetadata&gt;
                            &lt;pluginExecutions&gt;
                                &lt;pluginExecution&gt;
                                    &lt;pluginExecutionFilter&gt;
                                        &lt;groupId&gt;
                                            org.apache.maven.plugins
                                        &lt;/groupId&gt;
                                        &lt;artifactId&gt;
                                            maven-dependency-plugin
                                        &lt;/artifactId&gt;
                                        &lt;versionRange&gt;
                                            [2.1,)
                                        &lt;/versionRange&gt;
                                        &lt;goals&gt;
                                            &lt;goal&gt;
                                                copy-dependencies
                                            &lt;/goal&gt;
                                        &lt;/goals&gt;
                                    &lt;/pluginExecutionFilter&gt;
                                    &lt;action&gt;
                                        &lt;execute&gt;&lt;/execute&gt;
                                    &lt;/action&gt;
                                &lt;/pluginExecution&gt;
                            &lt;/pluginExecutions&gt;
                        &lt;/lifecycleMappingMetadata&gt;
                    &lt;/configuration&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>一些说明，这个pom会生成Osgi的描述文件<code>META-INF/MANIFEST.MF</code>,但是不会将jars目录下的jar加到<code>Referenced Libraries</code>里去，虽然<code>Maven Dependencies</code>里有，但是仍然会导致PDE编辑器对<code>Export-Package</code>段的校验报错。所以需要在PDE编辑器<code>Runtime-&gt;Classpath</code>里把jar全部删掉，再重新添加一次。</p>

<h4>参考文献</h4>

<ol>
<li><a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html">Bundle Plugin for Maven</a></li>
<li><a href="http://maxrohde.com/2010/12/02/%E2%80%9Cno-required-execution-environment-has-been-set%E2%80%9D-from-maven-bundle-plugin/">No required execution environment has been set” from Maven Bundle Plugin</a></li>
<li><a href="http://maven.apache.org/plugins/maven-dependency-plugin/copy-dependencies-mojo.html">Maven Dependency plugin > dependency:copy-dependencies</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweetbot for Mac使用GoAgent代理]]></title>
    <link href="http://vangie.github.com/blog/2012/09/04/tweetbot-for-mac-using-goagent-as-proxy/"/>
    <updated>2012-09-04T22:45:00+08:00</updated>
    <id>http://vangie.github.com/blog/2012/09/04/tweetbot-for-mac-using-goagent-as-proxy</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://tapbots.com/blog/news/tweetbot-for-mac-beta-sort-of" title="Tweetbot for Mac">Tweetbot for Mac</a>是MacOS X上推的不二选择，但是该软件的所有版本都没有提供Proxy设置。网上少有几篇关于<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>如何使用<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>代理上网的教程是针对iOS平台的。</p></blockquote>

<p>玩Ubuntu的时候有个工具软件可以作为启动器启动另一个软件，然后让被启动的软件使用该工具软件设定好的代理上网。这个工具可以解决需要使用代理上网但软件自身未提供代理配置功能的问题。</p>

<!-- more -->


<p>为什么不使用全局代理呢？</p>

<ol>
<li>浪费<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>有限的浏览，下个迅雷就玩完了。</li>
<li>国内的站点到绕道国外一圈在回来，不是折腾么。</li>
</ol>


<p>可惜在Mac没能找到那么一款神奇的工具，庆幸的是找到了<a href="http://www.proxycap.com/" title="Proxifier and SSH Tunneler for Windows/Mac OS X">ProxyCap</a>和<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>两款软件，这两款软件的功能类似，都是通过配置规则来指定某些应用程序使用指定的代理访问网络。不管哪种方式，到达的效果是一样的,当两款都是收费软件，提供了30天的使用。经过测试<a href="http://www.proxycap.com/" title="Proxifier and SSH Tunneler for Windows/Mac OS X">ProxyCap</a>无法在Mountian Lion下工作，而且提供的是pkg的安装包，安装完需要重启。<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>可用，下面介绍如何配置。官网提供了30天使用的安装版本下载，dmg的安装过程就直接跳过了。</p>

<h3>配置Proxy</h3>

<p>打开<code>Proxies-&gt;Add</code>,针对本机<a href="http://code.google.com/p/goagent/" title="a gae proxy forked from gappproxy/wallproxy">GoAgent</a>的配置添加一个代理</p>

<ul>
<li>类型: <code>HTTPS</code></li>
<li>地址: <code>127.0.0.1</code></li>
<li>端口: <code>8087</code></li>
</ul>


<p><img src="http://vangie.github.com/images/post/2012-09-04/Proxies.jpg" alt="Proxy Setting" /></p>

<h3>配置规则</h3>

<p>打开<code>Rules-&gt;Add</code>,添加一个规则，指定<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>使用改成配置的代理上网</p>

<ul>
<li>名称: Tweetbot</li>
<li>应用程序：选择Tweetbot（默认是Any，右下角有一个<code>+</code>可以选择应用程序的位置）</li>
<li>目标主机(Target Hosts): <code>Any</code></li>
<li>目标端口(Target Port): <code>Any</code></li>
<li>行为(Action): <code>Proxy HTTPS 127.0.0.1:8087</code></li>
</ul>


<p><img src="http://vangie.github.com/images/post/2012-09-04/Rules.jpg" alt="Rule Setting" /></p>

<h3>修改DNS设置</h3>

<p>打开 <code>DNS</code>,勾上<code>Resolve hostnames through proxy</code>。
这一步很重要，漏掉了会因为DNS污染导致连接不上。</p>

<p><img src="http://vangie.github.com/images/post/2012-09-04/DNS.jpg" alt="DNS Setting" /></p>

<p>接下打开<a href="http://tapbots.com/software/tweetbot/" title="Tweetbot for iOS">Tweetbot</a>就可以尽情的Tweet了。在<a href="http://www.proxifier.com/" title="Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy">Proxifier</a>的<code>Connections</code>Tab页能看到链接信息。</p>

<p><img src="http://vangie.github.com/images/post/2012-09-04/Connections.jpg" alt="Connections information" /></p>
]]></content>
  </entry>
  
</feed>
